<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Loupe.Core.NETCore</name>
    </assembly>
    <members>
        <member name="T:Gibraltar.ApplicationLogging">
            <summary>
            Loupe application logging factory
            </summary>
        </member>
        <member name="P:Gibraltar.ApplicationLogging.LoggerFactory">
            <summary>
            Get the Loupe Logger Factory (one per process)
            </summary>
        </member>
        <member name="M:Gibraltar.ApplicationLogging.CreateLogger``1">
            <summary>
            Create a new logger for the requested type from the common logger factory
            </summary>
        </member>
        <member name="T:Gibraltar.AsynchronousTask">
            <summary>
            Execute an asynchronous execution task without any user interface.
            </summary>
        </member>
        <member name="M:Gibraltar.AsynchronousTask.Execute(System.Threading.WaitCallback,System.String,System.Object)">
            <summary>
            Execute the requested delegate asynchronously with the specified arguments.
            </summary>
            <remarks>A progress dialog is displayed after a few moments and updated asynchronously as the task continues.  If the user
            elects ot cancel the task, execution attempts to stop immediately and True is returned indicating the user canceled.</remarks>
            <param name="callBack">The method to be executed asynchronously</param>
            <param name="title">An end-user display title for this task.</param>
            <param name="state">Arguments to pass to the callBack delegate</param>
        </member>
        <member name="P:Gibraltar.AsynchronousTask.Canceled">
            <summary>
            True if the task is completed and was canceled by the user.  False if the task is still executing or was not canceled.
            </summary>
        </member>
        <member name="P:Gibraltar.AsynchronousTask.Completed">
            <summary>
            True if the task has completed executing.  Check Canceled to determine if it completed successfully or not.
            </summary>
        </member>
        <member name="P:Gibraltar.AsynchronousTask.TaskResults">
            <summary>
            Optional. Extended information about the result of the task once it is complete.
            </summary>
        </member>
        <member name="M:Gibraltar.AsynchronousTask.AsyncTaskExec(System.Object)">
            <summary>
            Executes the application's callback function
            </summary>
            <remarks>This lets us better control exception handling and make sure the delegate is complete
            before we return to our caller while still allowing us to use the thread pool.</remarks>
        </member>
        <member name="T:Gibraltar.AsyncTaskArguments">
            <summary>
            Arguments used to execute tasks asynchronously using progress monitors.
            </summary>
        </member>
        <member name="M:Gibraltar.AsyncTaskArguments.#ctor(System.String,System.Object)">
            <summary>
            Create a new asynchronous execution task
            </summary>
            <param name="title"></param>
            <param name="state"></param>
            <remarks>Creates its own progress monitor stack</remarks>
        </member>
        <member name="P:Gibraltar.AsyncTaskArguments.ProgressMonitors">
            <summary>
            Retrieve the progress monitor stack for this asynchronous task
            </summary>
        </member>
        <member name="P:Gibraltar.AsyncTaskArguments.State">
            <summary>
            The state object for this asynchronous task (contains any arguments necessary to execute the task)
            </summary>
        </member>
        <member name="P:Gibraltar.AsyncTaskArguments.Title">
            <summary>
            An end-user display title for this task.
            </summary>
        </member>
        <member name="P:Gibraltar.AsyncTaskArguments.TaskResult">
            <summary>
            The final results of the asynchronous task, set upon completion.
            </summary>
        </member>
        <member name="M:Gibraltar.AsyncTaskArguments.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.AsyncTaskArguments.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.
            </summary>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="T:Gibraltar.AsyncTaskResult">
            <summary>
            The result of processing an asynchronous task
            </summary>
            <remarks>For any value better than Error the task did complete its primary purpose.</remarks>
        </member>
        <member name="F:Gibraltar.AsyncTaskResult.Unknown">
            <summary>
            The severity level is uninitialized and thus unknown.
            </summary>
        </member>
        <member name="F:Gibraltar.AsyncTaskResult.Canceled">
            <summary>
            The task was canceled before it could complete or fail to complete.
            </summary>
        </member>
        <member name="F:Gibraltar.AsyncTaskResult.Error">
            <summary>
            Recoverable error.
            </summary>
            <remarks>This is equal to TraceEventType.Error.</remarks>
        </member>
        <member name="F:Gibraltar.AsyncTaskResult.Warning">
            <summary>
            Noncritical problem.
            </summary>
            <remarks>This is equal to TraceEventType.Warning.</remarks>
        </member>
        <member name="F:Gibraltar.AsyncTaskResult.Information">
            <summary>
            Informational message.
            </summary>
            <remarks>This is equal to TraceEventType. Information</remarks>
        </member>
        <member name="F:Gibraltar.AsyncTaskResult.Success">
            <summary>
            Debugging trace.
            </summary>
            <remarks>This is equal to TraceEventType.Verbose.</remarks>
        </member>
        <member name="T:Gibraltar.AsyncTaskResultEventArgs">
            <summary>
            The results from processing an asynchronous task.
            </summary>
        </member>
        <member name="M:Gibraltar.AsyncTaskResultEventArgs.#ctor(Gibraltar.AsyncTaskResult,System.String)">
            <summary>
            Create a new result arguments object from the provided information
            </summary>
            <param name="result">The final status of the task</param>
            <param name="message">Optional. A display message to complement the result.</param>
        </member>
        <member name="M:Gibraltar.AsyncTaskResultEventArgs.#ctor(Gibraltar.AsyncTaskResult,System.String,System.Exception)">
            <summary>
            Create a new result arguments object from the provided information
            </summary>
            <param name="result">The final status of the task</param>
            <param name="message">Optional. A display message to complement the result.</param>
            <param name="exception">Optional. An exception object to allow the caller to do its own interpretation of an exception.</param>
        </member>
        <member name="P:Gibraltar.AsyncTaskResultEventArgs.Result">
            <summary>
            The final status of the task.
            </summary>
        </member>
        <member name="P:Gibraltar.AsyncTaskResultEventArgs.Message">
            <summary>
            Optional.  An end-user display message to complement the result.
            </summary>
        </member>
        <member name="P:Gibraltar.AsyncTaskResultEventArgs.Exception">
            <summary>
            Optional.  An exception object to allow custom interpretation of an exception.
            </summary>
        </member>
        <member name="T:Gibraltar.AsyncTaskResultEventHandler">
            <summary>
            A standard event handler for asynchronous task results
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Gibraltar.CommonCentralLogic">
            <summary>
            A static class to hold central logic for common file and OS operations needed by various projects.
            </summary>
        </member>
        <member name="P:Gibraltar.CommonCentralLogic.SilentMode">
            <summary>
            Indicates if the logging system should be running in silent mode (for example when running in the agent).
            </summary>
        </member>
        <member name="P:Gibraltar.CommonCentralLogic.BreakPointEnable">
            <summary>
            A temporary flag to tell us whether to invoke a Debugger.Break() when Log.DebugBreak() is called.
            </summary>
            <remarks>True enables breakpointing, false disables.  This should probably be replaced with an enum
            to support multiple modes, assuming the basic usage works out.</remarks>
        </member>
        <member name="P:Gibraltar.CommonCentralLogic.IsSessionEnding">
            <summary>
            Reports whether EndSession() has been called to formally end the session.
            </summary>
        </member>
        <member name="P:Gibraltar.CommonCentralLogic.IsSessionEnded">
            <summary>
            Reports whether EndSession() has completed flushing the end-session command to the log.
            </summary>
        </member>
        <member name="P:Gibraltar.CommonCentralLogic.IsNetFramework">
            <summary>
            True if the underlying runtime is the .NET Framework
            </summary>
        </member>
        <member name="P:Gibraltar.CommonCentralLogic.IsNetNative">
            <summary>
            True if the underlying runtime is .NET Native
            </summary>
        </member>
        <member name="P:Gibraltar.CommonCentralLogic.IsNetCore">
            <summary>
            True if the underlying runtime is .NET Core.
            </summary>
        </member>
        <member name="M:Gibraltar.CommonCentralLogic.DeclareSessionIsEnding">
            <summary>
            Sets the SessionEnding flag to true.  (Can't be reversed once set.)
            </summary>
        </member>
        <member name="M:Gibraltar.CommonCentralLogic.DeclareSessionHasEnded">
            <summary>
            Sets the SessionHasEnded flag to true.  (Can't be reversed once set.)
            </summary>
        </member>
        <member name="M:Gibraltar.CommonCentralLogic.DebugBreak">
            <summary>
            Automatically stop debugger like a breakpoint, if enabled.
            </summary>
            <remarks>This will check the state of Log.BreakPointEnable and whether a debugger is attached,
            and will breakpoint only if both are true.  This should probably be extended to handle additional
            configuration options using an enum, assuming the basic usage works out.  This method is conditional
            upon a DEBUG build and will be safely ignored in release builds, so it is not necessary to wrap calls
            to this method in #if DEBUG (acts much like Debug class methods).</remarks>
        </member>
        <member name="M:Gibraltar.CommonCentralLogic.FindMessageSource(System.Int32,System.Boolean,System.Exception,System.String@,System.String@,System.String@,System.Int32@)">
            <summary>
            Extracts needed message source information from the current call stack.
            </summary>
            <remarks>This is used internally to perform the actual stack frame walk.  Constructors for derived classes
            all call this method.  This constructor also allows the caller to specify a log message as being
            of local origin, so Gibraltar stack frames will not be automatically skipped over when determining
            the originator for internally-issued log messages.</remarks>
            <param name="skipFrames">The number of stack frames to skip over to find the first candidate to be
            identified as the source of the log message.  (Should generally use 0 if exception parameter is not null.)</param>
            <param name="trustSkipFrames">True if logging a message originating in Gibraltar code (or to just trust skipFrames).
            False if logging a message from the client application and Gibraltar frames should be explicitly skipped over.</param>
            <param name="exception">An exception declared as the source of this log message (or null for normal call stack source).</param>
            <param name="className">The class name of the identified source (usually available).</param>
            <param name="methodName">The method name of the identified source (usually available).</param>
            <param name="fileName">The file name of the identified source (if available).</param>
            <param name="lineNumber">The line number of the identified source (if available).</param>
            <returns>The index of the stack frame chosen</returns>
        </member>
        <member name="M:Gibraltar.CommonCentralLogic.SafeFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Safely attempt to expand a format string with supplied arguments.
            </summary>
            <remarks>If the normal call to string.Format() fails, this method does its best to create a string
            (intended as a log message) error message containing the original format string and a representation
            of the args supplied, to attempt to preserve meaningful information despite the user's mistake.</remarks>
            <param name="formatProvider">An IFormatProvider (such as a CultureInfo) to use, where applicable.
            (may be null, indicating the current culture)</param>
            <param name="format">The desired format string, as used by string.Format().</param>
            <param name="args">An array of args, as used by string.Format() after the format string.</param>
            <returns>The formatted string, or an error string containing best-effort information.</returns>
        </member>
        <member name="M:Gibraltar.CommonCentralLogic.InitEscapeMap">
            <summary>
            Initializes the EscapeMap dictionary.
            </summary>
        </member>
        <member name="M:Gibraltar.CommonCentralLogic.ReverseEscapes(System.String)">
            <summary>
            Expand (some) special characters back to how they appear in string literals in source code.
            </summary>
            <remarks>This currently does nothing but return the original string.</remarks>
            <param name="format">The string (e.g. a format string) to convert back to its literal appearance.</param>
            <returns>A string with embedded backslash escape codes to be displayed as in source code.</returns>
        </member>
        <member name="M:Gibraltar.CommonCentralLogic.SafeToString(System.IFormatProvider,System.Object,System.Boolean)">
            <summary>
            Try to expand an object to a string, handling exceptions which might occur.
            </summary>
            <param name="formatProvider">An IFormatProvider (such as a CultureInfo).  (may be null to indicate the
            current culture)</param>
            <param name="forDisplay">The object for display into a string.</param>
            <param name="reverseEscapes">Whether to convert null and strings back to appearance as in code.</param>
            <returns>The best effort at representing the given object as a string.</returns>
        </member>
        <member name="T:Gibraltar.Data.BinarySerializer">
            <summary>
            Provides basic binary serialization for platform independent simple serialization
            </summary>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.IO.Stream,System.Boolean)">
            <summary>
            Write the host value to the stream
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="hostValue"></param>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.Boolean)">
            <summary>
            Serialize a boolean value to a byte array with a single byte
            </summary>
            <param name="hostValue"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.IO.Stream,System.Guid)">
            <summary>
            Serialize a GUID to a stream
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="hostValue"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.Guid)">
            <summary>
            Serialize a GUID to a 16 byte array
            </summary>
            <param name="hostValue"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.IO.Stream,System.String)">
            <summary>
            Serialize a string to a byte array
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="hostValue"></param>
            <remarks>Serializes the length in the first byte then each character with one byte character encoding</remarks>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.String)">
            <summary>
            Serialize a string to a byte array
            </summary>
            <param name="hostValue"></param>
            <returns>The byte array for the string</returns>
            <remarks>Serializes the length in the first byte then each character with one byte character encoding</remarks>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.IO.Stream,System.DateTime)">
            <summary>
            Serialize a date time to a stream
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="hostValue"></param>
            <returns></returns>
            <remarks>Uses the date time offset encoding with the local time zone.</remarks>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.DateTime)">
            <summary>
            Serialize a date time to a byte array
            </summary>
            <param name="hostValue"></param>
            <returns></returns>
            <remarks>Uses the date time offset encoding with the local time zone.</remarks>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.IO.Stream,System.DateTimeOffset)">
            <summary>
            Serialize a date time and offset
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="hostValue"></param>
            <returns></returns>
            <remarks>Encodes the date time offset as a string in ISO 8601 standard formatting</remarks>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.DateTimeOffset)">
            <summary>
            Serialize a date time and offset to a byte array.
            </summary>
            <param name="hostValue"></param>
            <returns></returns>
            <remarks>Encodes the date time offset as a string in ISO 8601 standard formatting</remarks>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.IO.Stream,System.TimeSpan)">
            <summary>
            Serialize a timespan to a byte array
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="hostValue"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.TimeSpan)">
            <summary>
            Serialize a timespan to a byte array
            </summary>
            <param name="hostValue"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.IO.Stream,System.Int64)">
            <summary>
            Write the host value to the provided stream
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="hostValue">The host value to be serialized</param>
            <returns>A byte array of each byte of the value in network byte order</returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.Int64)">
            <summary>
            Create a network-byte-order array of the host value
            </summary>
            <param name="hostValue">The host value to be serialized</param>
            <returns>A byte array of each byte of the value in network byte order</returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.IO.Stream,System.UInt64)">
            <summary>
            Create a network-byte-order array of the host value
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="hostValue">The host value to be serialized</param>
            <returns>A byte array of each byte of the value in network byte order</returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.UInt64)">
            <summary>
            Create a network-byte-order array of the host value
            </summary>
            <param name="hostValue">The host value to be serialized</param>
            <returns>A byte array of each byte of the value in network byte order</returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.IO.Stream,System.Int32)">
            <summary>
            Write the host value to the stream
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="hostValue">The host value to be serialized</param>
            <returns>A byte array of each byte of the value in network byte order</returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.Int32)">
            <summary>
            Create a network-byte-order array of the host value
            </summary>
            <param name="hostValue">The host value to be serialized</param>
            <returns>A byte array of each byte of the value in network byte order</returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.IO.Stream,System.UInt32)">
            <summary>
            Write the host value to the stream
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="hostValue">The host value to be serialized</param>
            <returns>A byte array of each byte of the value in network byte order</returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.UInt32)">
            <summary>
            Create a network-byte-order array of the host value
            </summary>
            <param name="hostValue">The host value to be serialized</param>
            <returns>A byte array of each byte of the value in network byte order</returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.IO.Stream,System.Int16)">
            <summary>
            Write the host value to the stream
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="hostValue">The host value to be serialized</param>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.Int16)">
            <summary>
            Create a network-byte-order array of the host value
            </summary>
            <param name="hostValue">The host value to be serialized</param>
            <returns>A byte array of each byte of the value in network byte order</returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.IO.Stream,System.UInt16)">
            <summary>
            Write the host value to the stream
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="hostValue">The host value to be serialized</param>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.SerializeValue(System.UInt16)">
            <summary>
            Create a network-byte-order array of the host value
            </summary>
            <param name="hostValue">The host value to be serialized</param>
            <returns>A byte array of each byte of the value in network byte order</returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.DeserializeValue(System.IO.Stream,System.Int64@)">
            <summary>
            Convert a network byte order array to host value
            </summary>
            <param name="networkBytes">Network order byte array of the long</param>
            <param name="hostValue">The converted long from the network byte array</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.DeserializeValue(System.IO.Stream,System.UInt64@)">
            <summary>
            Convert a network byte order array to host value
            </summary>
            <param name="networkBytes">Network order byte array of the long</param>
            <param name="hostValue">The converted long from the network byte array</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.DeserializeValue(System.IO.Stream,System.Int32@)">
            <summary>
            Convert a network byte order array to host value
            </summary>
            <param name="networkBytes">Network order byte array of the long</param>
            <param name="hostValue">The converted long from the network byte array</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.DeserializeValue(System.IO.Stream,System.UInt32@)">
            <summary>
            Convert a network byte order array to host value
            </summary>
            <param name="networkBytes">Network order byte array of the long</param>
            <param name="hostValue">The converted long from the network byte array</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.DeserializeValue(System.IO.Stream,System.Int16@)">
            <summary>
            Convert a network byte order array to host value
            </summary>
            <param name="networkBytes">Network order byte array of the long</param>
            <param name="hostValue">The converted long from the network byte array</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.DeserializeValue(System.IO.Stream,System.UInt16@)">
            <summary>
            Convert a network byte order array to host value
            </summary>
            <param name="networkBytes">Network order byte array of the long</param>
            <param name="hostValue">The converted long from the network byte array</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.DeserializeValue(System.IO.Stream,System.TimeSpan@)">
            <summary>
            Deserialize a timespan value from the provided stream
            </summary>
            <param name="networkBytes"></param>
            <param name="hostValue"></param>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.DeserializeValue(System.IO.Stream,System.DateTime@)">
            <summary>
            Deserialize a date and time value from the provided stream
            </summary>
            <param name="networkBytes"></param>
            <param name="hostValue"></param>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.DeserializeValue(System.IO.Stream,System.DateTimeOffset@)">
            <summary>
            Deserialize a date time offset value from the provided stream
            </summary>
            <param name="networkBytes"></param>
            <param name="hostValue"></param>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.DeserializeValue(System.IO.Stream,System.Guid@)">
            <summary>
            Deserialize a GUID value from the provided stream
            </summary>
            <param name="networkBytes"></param>
            <param name="hostValue"></param>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.DeserializeValue(System.IO.Stream,System.Boolean@)">
            <summary>
            Deserialize a boolean value from the provided stream
            </summary>
            <param name="networkBytes"></param>
            <param name="hostValue"></param>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.DeserializeValue(System.IO.Stream,System.String@)">
            <summary>
            Deserialize a string value from the provided stream
            </summary>
            <param name="networkBytes"></param>
            <param name="hostValue"></param>
        </member>
        <member name="M:Gibraltar.Data.BinarySerializer.CalculateCRC(System.Byte[],System.Int32)">
            <summary>
            Calculate a CRC for the provided byte array
            </summary>
            <param name="data"></param>
            <param name="length"></param>
            <returns>A 4 byte CRC value created by calculating an MD5 hash of the provided byte array</returns>
        </member>
        <member name="T:Gibraltar.Data.FileHeader">
            <summary>
            Generates and parses the binary header used at the start of a Gibraltar Log File
            </summary>
        </member>
        <member name="F:Gibraltar.Data.FileHeader.HeaderSize">
            <summary>
            The number of bytes used by the header
            </summary>
        </member>
        <member name="F:Gibraltar.Data.FileHeader.GLFTypeCode">
            <summary>
            The unique sequence of bytes at the start of the header that identify a binary file as a GLF
            </summary>
        </member>
        <member name="F:Gibraltar.Data.FileHeader.DefaultMajorVersion">
            <summary>
            Default value for serialization protocol major version
            </summary>
            <remarks>
            Normally, you'd expect this to be a constant.  However, for testing purposes
            it's convenient to be able to change it back and forth.
            </remarks>
        </member>
        <member name="F:Gibraltar.Data.FileHeader.DefaultMinorVersion">
            <summary>
            Default value for serialization protocol minor version
            </summary>
        </member>
        <member name="M:Gibraltar.Data.FileHeader.#ctor">
            <summary>
            Create a new empty file header
            </summary>
        </member>
        <member name="M:Gibraltar.Data.FileHeader.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new empty file header
            </summary>
        </member>
        <member name="M:Gibraltar.Data.FileHeader.#ctor(System.Byte[])">
            <summary>
            Create a new header from the provided byte array
            </summary>
            <param name="data"></param>
            <remarks>The byte array must have at least as many bytes as indicated by the Header Size.</remarks>
        </member>
        <member name="M:Gibraltar.Data.FileHeader.RawData">
            <summary>
            Export the file header into a raw data array
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Data.FileHeader.TypeCode">
            <summary>
            The type code set in the file
            </summary>
        </member>
        <member name="P:Gibraltar.Data.FileHeader.MajorVersion">
            <summary>
            The major version of the file
            </summary>
        </member>
        <member name="P:Gibraltar.Data.FileHeader.MinorVersion">
            <summary>
            The minor version of the file
            </summary>
        </member>
        <member name="P:Gibraltar.Data.FileHeader.DataOffset">
            <summary>
            The offset in the stream from the start of the file header to the start of the data section
            </summary>
        </member>
        <member name="P:Gibraltar.Data.FileHeader.DataChecksum">
            <summary>
            A checksum of the file header
            </summary>
        </member>
        <member name="M:Gibraltar.Data.FileHeader.IsValid">
            <summary>
            True if the header is valid.  Always returns true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.FileHeader.SupportsComputerId(System.Int32,System.Int32)">
            <summary>
            Indicates if the supplied file version supports the Computer Id field.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.FileHeader.SupportsEnvironmentAndPromotion(System.Int32,System.Int32)">
            <summary>
            Indicates if the supplied file version supports the Environment and Promotion fields.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.FileHeader.SupportsFragments(System.Int32,System.Int32)">
            <summary>
            Indicates if the binary stream supports fragments or only single-stream transfer (the pre-3.0 format)
            </summary>
        </member>
        <member name="T:Gibraltar.Data.FileHelper">
            <summary>
            A class to provide common wrappers and direct access to low-level file calls.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.FileHelper.OpenFileStream(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Attempt to open a FileStream while avoiding exceptions.
            </summary>
            <param name="fileName">The full-path file name to create or open.</param>
            <param name="creationMode">An action to take on files that exist and do not exist</param>
            <param name="fileAccess">Desired access to the object, which can be read, write, or both</param>
            <param name="fileShare">The sharing mode of an object, which can be read, write, both, or none</param>
            <returns>An open FileStream, or null upon failure.</returns>
        </member>
        <member name="M:Gibraltar.Data.FileHelper.SafeDeleteFile(System.String)">
            <summary>
            Delete a file with no exception being thrown.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.FileHelper.GetFileLock(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Get a persistent lock on a file without opening it.
            </summary>
            <param name="fileName">The full-path file name to create or open.</param>
            <param name="creationMode">An action to take on files that exist and do not exist</param>
            <param name="fileAccess">Desired access to the object, which can be read, write, or both</param>
            <param name="fileShare">The sharing mode of an object, which can be read, write, both, or none</param>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Data.FileLock">
            <summary>
            A wrapper for conveniently holding a file lock where the stream access is not necessarily needed.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.FileLock.Dispose">
            <summary>
            Release the file lock and the resources held by this instance.
            </summary>
        </member>
        <member name="T:Gibraltar.Data.GLFReader">
            <summary>
            Reads a GLF file
            </summary>
        </member>
        <member name="P:Gibraltar.Data.GLFReader.FragmentStorageSummary">
            <summary>
            Details about the storage required for this session fragment
            </summary>
        </member>
        <member name="M:Gibraltar.Data.GLFReader.#ctor(System.IO.Stream)">
            <summary>
            Create a new GLF reader to operate on the provided stream.  The GLFReader then owns the stream and will dispose it
            when disposed itself. (Use static GLFReader.IsGLF() to test a stream without giving it up.)
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:Gibraltar.Data.GLFReader.IsGLF(System.String)">
            <summary>
            Indicates if the specified fileName is an existing, accessible, valid GLF file.
            </summary>
            <param name="fileName">The full path to the file in question.</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.GLFReader.IsGLF(System.IO.Stream)">
            <summary>
            Indicates if the provided file stream is for a GLF file.
            </summary>
            <param name="fileStream"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.GLFReader.IsGLF(System.IO.Stream,Gibraltar.Data.FileHeader@)">
            <summary>
            Indicates if the provided file stream is for a GLF file.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.GLFReader.MajorVersion">
            <summary>
            Returns the major version of the serialization protocol in use
            </summary>
        </member>
        <member name="P:Gibraltar.Data.GLFReader.MinorVersion">
            <summary>
            Returns the minor version of the serialization protocol in use
            </summary>
        </member>
        <member name="M:Gibraltar.Data.GLFReader.EnsureDataLoaded">
            <summary>
            Ensures that the file Stream is positioned beyond the header ready to start reading packets, and the original
            provided Stream may be closed/disposed after this call.  (But do not alter the original Stream or its position
            because the same file handle may be retained.)
            </summary>
        </member>
        <member name="M:Gibraltar.Data.GLFReader.Close">
            <summary>
            Closes the GLF reader and releases any data stream owned by the GLF reader
            </summary>
            <remarks>The file stream provided to the GLF reader in the constructor is owned by the instance and will be
            disposed with the GLFReader instance.</remarks>
        </member>
        <member name="P:Gibraltar.Data.GLFReader.IsSessionStream">
            <summary>
            Indicates if the stream provided to the GLFReader is a valid session stream.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.GLFReader.FileHeader">
            <summary>
            The file header at the start of the stream.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.GLFReader.SessionHeader">
            <summary>
            The session header for the stream
            </summary>
        </member>
        <member name="P:Gibraltar.Data.GLFReader.RawStream">
            <summary>
            The raw GLF data stream.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.GLFReader.GetPacketStreamStart">
            <summary>
            Sets the position of the packet stream to the start of packet data and returns the stream.
            </summary>
            <returns>A readable Stream, positioned at the start of packet data.</returns>
        </member>
        <member name="M:Gibraltar.Data.GLFReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Data.GLFReader.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.
            </summary>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="T:Gibraltar.Data.Internal.FileTransportPackage">
            <summary>
            A transport package that is just being written out to a file.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Internal.FileTransportPackage.FileNamePath">
            <summary>
            The full file name and path to write out to.
            </summary>
        </member>
        <member name="T:Gibraltar.Data.Internal.RepositoryMaintenance">
            <summary>
            Performs repository level maintenance such as purging for size.  Should be used with collection repositories only.
            </summary>
        </member>
        <member name="F:Gibraltar.Data.Internal.RepositoryMaintenance.MutiprocessLockName">
            <summary>
            The name of the repository lock used to serialize repository maintenance.
            </summary>
        </member>
        <member name="E:Gibraltar.Data.Internal.RepositoryMaintenance.CollectionChanged">
            <summary>
            Raised every time the sessions collection changes.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryMaintenance.#ctor(System.String,System.Boolean)">
            <summary>
            Create a repository maintenance object for the provided repository without the ability to perform pruning.
            </summary>
            <param name="repositoryPath"></param>
            <param name="loggingEnabled">Indicates if the maintenance process should log its actions.</param>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryMaintenance.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create the repository maintenance object for the provided repository.
            </summary>
            <param name="repositoryPath">The full path to the base of the repository (which must contain an index)</param>
            <param name="productName">The product name of the application(s) to restrict pruning to.</param>
            <param name="applicationName">Optional.  The application within the product to restrict pruning to.</param>
            <param name="maxAgeDays">The maximum allowed days since the session fragment was closed to keep the fragment around.</param>
            <param name="maxSizeMegabytes">The maximum number of megabytes of session fragments to keep</param>
            <param name="loggingEnabled">Indicates if the maintenance process should log its actions.</param>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryMaintenance.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Gibraltar.Data.Internal.RepositoryMaintenance.ProductName">
            <summary>
            The product to restrict purge operations to.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Internal.RepositoryMaintenance.ApplicationName">
            <summary>
            Optional.  The application name to restrict purge operations to.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Internal.RepositoryMaintenance.RepositoryPath">
            <summary>
            The full path to the base of the repository that is being maintained
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Internal.RepositoryMaintenance.MaxAgeDays">
            <summary>
            The maximum allowed days since the session fragment was closed to keep the fragment around.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Internal.RepositoryMaintenance.MaxSizeMegabytes">
            <summary>
            The maximum number of megabytes of session fragments to keep
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Internal.RepositoryMaintenance.LastMaintenanceRunDateTime">
            <summary>
            The last time a maintenance run was started.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Internal.RepositoryMaintenance.IsLoggingEnabled">
            <summary>
            Indicates if the database should log operations to Gibraltar or not.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Internal.RepositoryMaintenance.PerformingMaintenance">
            <summary>
            Indicates whether maintenance is currently being performed on the repository.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryMaintenance.PerformMaintenance(System.Boolean)">
            <summary>
            Run the maintenance cycle.
            </summary>
            <param name="asyncronous">True to have maintenance performed on a background thread, allowing the current process to continue.</param>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryMaintenance.QueueAsyncMaintenance(System.Threading.WaitCallback,System.Boolean)">
            <summary>
            Attempts to execute the provided maintenance delegate on a dedicated thread.
            </summary>
            <param name="maintenanceDelegate">The maintenance delegate to execute</param>
            <param name="asyncronous">True to return as soon as the request has been submitted, false to wait for completion.</param>
            <remarks>If there is already a maintenance operation underway then a new request is not queued. If not set to asynchronous
            execution the call will block until the pending maintenance is complete.  If another maintainer is running then maintenance
            will be considered immediately complete.</remarks>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryMaintenance.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            </summary>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
            <remarks> Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.</remarks>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryMaintenance.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Called whenever the collection changes.
            </summary>
            <param name="e"></param>
            <remarks>Note to inheritors:  If overriding this method, you must call the base implementation to ensure
            that the appropriate events are raised.</remarks>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryMaintenance.AsyncPerformMaintenance(System.Object)">
            <summary>
            Execute repository maintenance on a background thread.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryMaintenance.ProcessPruneForAge(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Removes old session fragments.
            </summary>
            <returns>True if any files were removed, false otherwise</returns>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryMaintenance.ProcessPruneForSize(System.Int32)">
            <summary>
            Remove the oldest files to get the total repository space down to the allowed limit.
            </summary>
            <param name="maxSizeMegabytes"></param>
            <returns>True if any files were removed, false otherwise</returns>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryMaintenance.SafeGetSessionId(System.String)">
            <summary>
            Attempt to load the session Id from the specified file, returning null if it can't be loaded.
            </summary>
            <param name="sessionFileNamePath"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryMaintenance.SafeGetSessionHeader(System.String)">
            <summary>
            Attempt to load the session header from the specified file, returning null if it can't be loaded
            </summary>
            <param name="sessionFileNamePath">The full file name &amp; path</param>
            <returns>The session header, or null if it can't be loaded</returns>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryMaintenance.SortFilesByUpdateDateDesc(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Sorts by LastWrite, then create time, then name as a last attempt.
            </summary>
            <param name="leftFile"></param>
            <param name="rightFile"></param>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Data.Internal.RepositoryPublishClient">
            <summary>
            Publishes sessions from the specified repository to a remote destination repository.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryPublishClient.#ctor(Gibraltar.Monitor.LocalRepository)">
            <summary>
            Create a new repository publish engine for the specified repository.
            </summary>
            <param name="source">The repository to publish</param>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryPublishClient.#ctor(Gibraltar.Monitor.LocalRepository,System.String,System.String,Loupe.Configuration.ServerConfiguration)">
            <summary>
            Create a new repository publish engine for the specified repository.
            </summary>
            <param name="source">The repository to publish</param>
            <param name="productName">Optional.  A product name to restrict operations to.</param>
            <param name="applicationName">Optional.  An application name within a product to restrict operations to.</param>
            <param name="configuration">The server connection information.</param>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryPublishClient.#ctor(Gibraltar.Monitor.LocalRepository,Loupe.Configuration.ServerConfiguration)">
            <summary>
            Create a new repository publish engine for the specified repository.
            </summary>
            <param name="source">The repository to publish</param>
            <param name="serverConfiguration">The configuration of the connection to the server</param>
        </member>
        <member name="P:Gibraltar.Data.Internal.RepositoryPublishClient.Repository">
            <summary>
            The repository this publish engine is associated with.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Internal.RepositoryPublishClient.IsActive">
            <summary>
            Indicates if this is the active repository publish engine for the specified repository.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryPublishClient.CanConnect">
            <summary>
            Attempts to connect to the server and returns information about the connection status.
            </summary>
            <returns>True if the configuration is valid and the server is available, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryPublishClient.PublishSessions(System.Boolean,System.Boolean)">
            <summary>
            Publish qualifying local sessions and upload any details requested by the server
            </summary>
            <param name="async"></param>
            <param name="purgeSentSessions">Indicates if the session should be purged from the repository once it has been sent successfully.</param>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryPublishClient.UploadSession(System.Guid,System.Int32,System.Boolean)">
            <summary>
            Send the specified session with details, even if other publishers are running.
            </summary>
            <param name="sessionId"></param>
            <param name="maxRetries"></param>
            <param name="purgeSentSession">Indicates if the session should be purged from the repository once it has been sent successfully.</param>
            <remarks>Throws an exception if it fails</remarks>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryPublishClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryPublishClient.AsyncPublishSessions(System.Object)">
            <summary>
            Publish the latest session data and find out what sessions should be uploaded.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryPublishClient.GetRequestedSessions">
            <summary>
            Find out what sessions the server wants details for.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryPublishClient.GetSessions">
            <summary>
            Find the list of all sessions that haven't been published yet and match our filter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryPublishClient.UnsentSessionsPredicate(Loupe.Extensibility.Data.ISessionSummary)">
            <summary>
            A predicate filter for the repository to identify unsent, qualifying sessions
            </summary>
            <param name="candidateSession"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryPublishClient.PerformSessionDataUpload(System.Guid,System.Int32,System.Boolean)">
            <summary>
            Sends a session, either as a single stream or a set of fragments, to the server.
            </summary>
            <param name="sessionId"></param>
            <param name="maxRetries">The maximum number of times to retry the session data upload.</param>
            <param name="purgeSentSessions">Indicates whether to purge sessions that have been successfully sent from the repository</param>
            <returns>Throws an exception if the upload fails.</returns>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryPublishClient.PerformSessionFileUpload(System.Guid,System.Nullable{System.Guid},System.Int32,System.Boolean)">
            <summary>
            Sends a merged session stream or a single session fragment file to the server.
            </summary>
            <param name="sessionId"></param>
            <param name="fileId"></param>
            <param name="maxRetries">The maximum number of times to retry the session data upload.</param>
            <param name="purgeSentSessions">Indicates whether to purge sessions that have been successfully sent from the repository</param>
            <returns>Throws an exception if the upload fails.</returns>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryPublishClient.PerformSessionHeaderUpload(Loupe.Extensibility.Data.ISessionSummary)">
            <summary>
            Upload the session summary for one session.
            </summary>
            <param name="sessionSummary"></param>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryPublishClient.PerformSessionHeaderUpload(Gibraltar.Server.Client.Data.SessionXml)">
            <summary>
            Upload the session summary for one session.
            </summary>
            <param name="sessionSummary"></param>
        </member>
        <member name="M:Gibraltar.Data.Internal.RepositoryPublishClient.PerformSessionMarkComplete(System.Guid)">
            <summary>
            Mark the specified session as being complete.
            </summary>
        </member>
        <member name="T:Gibraltar.Data.Internal.SessionCriteriaPredicate">
            <summary>
            Compares sessions to the supplied session criteria to determine if they match
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Internal.TransportPackageBase.Product">
            <summary>
            The product the package was restricted to.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Internal.TransportPackageBase.Application">
            <summary>
            The application the package was restricted to (optional, may be null)
            </summary>
        </member>
        <member name="M:Gibraltar.Data.Internal.TransportPackageBase.MarkContentsAsRead(Gibraltar.Monitor.LocalRepository)">
            <summary>
            Mark all of the sessions contained in the source package as being read.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.Internal.TransportPackageBase.Send(Gibraltar.ProgressMonitorStack)">
            <summary>
            Perform the actual package transport
            </summary>
            <param name="progressMonitors"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.Internal.TransportPackageBase.OnSend(Gibraltar.ProgressMonitorStack)">
            <summary>
            Overridden by our inheritors to implement the package send routine.
            </summary>
            <param name="progressMonitors"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.Internal.TransportPackageBase.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            </summary>
            <remarks>
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization. Note to inheritors:  Be sure to call base to enable the base class to release resources.</remarks>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="T:Gibraltar.Data.InterprocessLock">
            <summary>
            Represents an exclusive lock on a repository within a process and between processes.
            </summary>
            <remarks>To be valid, the repository lock object must be obtained from the RepositoryLockManager class.
            When you're done with a lock, dispose the repository lock to release it.</remarks>
        </member>
        <member name="F:Gibraltar.Data.InterprocessLock.LockFileExtension">
            <summary>
            The file extension of lock files used to lock repositories..
            </summary>
        </member>
        <member name="E:Gibraltar.Data.InterprocessLock.Disposed">
            <summary>
            Raised when the lock is disposed.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.InterprocessLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLock.FullName">
            <summary>
            The full (unique) name for the lock, combining the index path and lock name.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLock.IndexPath">
            <summary>
            The name of the repository this lock controls access to.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLock.LockName">
            <summary>
            The name of the lock within the repository.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLock.Owner">
            <summary>
            The object that is currently holding the lock.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLock.OwningThread">
            <summary>
            The thread that created and waits on this request and owns the lock when this request is granted.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLock.OwningThreadId">
            <summary>
            The ManagedThreadId of the thread that owns this lock instance.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLock.WaitForLock">
            <summary>
            Whether this lock request is willing to wait (finite) for the lock or return immediately if not available.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLock.WaitTimeout">
            <summary>
            The clock time at which this lock request wants to stop waiting for the lock and give up.
            (MaxValue once the lock is granted, MinValue if the lock was denied.)
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLock.ActualLock">
            <summary>
            The actual holder of the lock if we are a secondary lock on the same thread, or ourselves if we hold the file lock.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLock.IsSecondaryLock">
            <summary>
            Reports if this lock object holds a secondary lock rather than the actual lock (or no lock).
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLock.IsExpired">
            <summary>
            Reports if this request instance has expired and should be skipped over because no thread is still waiting on it.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLock.IsDisposed">
            <summary>
            Whether this lock instance has been disposed (and thus does not hold any locks).
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLock.DisposeProxyOnClose">
            <summary>
            Gets or sets the dispose-on-close policy for the lock proxy associated with this lock instance.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLock.OurLockProxy">
            <summary>
            The proxy who will actually hold the file lock on our behalf.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.InterprocessLock.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.
            </summary>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="T:Gibraltar.Data.InterprocessLockManager">
            <summary>
            A multiprocess lock manager for repositories
            </summary>
            <remarks>Manages locking first within the process and then extends the process lock to multiple processes
            by locking a file on disk.  Designed for use with the Using statement as opposed to the Lock statement.</remarks>
        </member>
        <member name="M:Gibraltar.Data.InterprocessLockManager.Lock(System.Object,System.String,System.String,System.Int32)">
            <summary>
            Attempt to lock the repository with the provided index path.
            </summary>
            <param name="requester">The object that is requesting the lock (useful for debugging purposes)</param>
            <param name="indexPath">The fully qualified path to the directory containing the index file of the repository</param>
            <param name="lockName">The name of the lock to get (locks are a combination of index and this name)</param>
            <param name="timeoutSeconds">The maximum number of seconds to wait on the lock before giving up.</param>
            <returns>A Repository Lock object if the lock could be obtained or Null if the lock timed out.</returns>
        </member>
        <member name="M:Gibraltar.Data.InterprocessLockManager.Lock(System.Object,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Attempt to lock the repository with the provided index path.
            </summary>
            <param name="requester">The object that is requesting the lock (useful for debugging purposes)</param>
            <param name="indexPath">The fully qualified path to the directory containing the index file of the repository</param>
            <param name="lockName">The name of the lock to get (locks are a combination of index and this name)</param>
            <param name="timeoutSeconds">The maximum number of seconds to wait on the lock before giving up.</param>
            <param name="deleteOnClose">Whether the lock file should be deleted on close or left around for reuse.</param>
            <returns>A Repository Lock object if the lock could be obtained or Null if the lock timed out.</returns>
        </member>
        <member name="M:Gibraltar.Data.InterprocessLockManager.QueryLockAvailable(System.Object,System.String,System.String)">
            <summary>
            Query whether a particular lock is available without holding on to it.
            </summary>
            <param name="requester">The object that is querying the lock (useful for debugging purposes)</param>
            <param name="indexPath">The fully qualified path to the directory containing the index file of the repository</param>
            <param name="lockName">The name of the lock to query (locks are a combination of index and this name)</param>
            <returns>True if the lock could have been obtained.  False if the lock could not be obtained without waiting.</returns>
        </member>
        <member name="T:Gibraltar.Data.InterprocessLockProxy">
            <summary>
            A class to hold a file lock for this process (app domain) and pass it fairly to other waiting threads before release.
            </summary>
        </member>
        <member name="E:Gibraltar.Data.InterprocessLockProxy.Disposed">
            <summary>
            Raised when the lock is disposed.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.InterprocessLockProxy.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLockProxy.FullName">
            <summary>
            The full (unique) name for the lock, combining the index path and lock name.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLockProxy.IndexPath">
            <summary>
            The name of the repository this lock controls access to.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLockProxy.LockName">
            <summary>
            The name of the lock within the repository.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLockProxy.IsDisposed">
            <summary>
            Whether this lock instance has been disposed (and thus does not hold any locks).
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLockProxy.WaitingCount">
            <summary>
            Reports how many threads are in the queue waiting on the lock (some may have timed out and given up already).
            (Reports -1 if the proxy is idle (no current turn).)
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLockProxy.CurrentLockTurn">
            <summary>
            The lock request with the current turn to hold or wait for the lock.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLockProxy.CurrentTurnOwner">
            <summary>
            The requesting owner of the current turn for the lock.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLockProxy.CurrentTurnThread">
            <summary>
            The thread with the current turn for the lock.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLockProxy.CurrentTurnThreadId">
            <summary>
            The ManagedThreadId of the thread with the current turn for the lock, or -1 if none.  (For debug convenience only.)
            </summary>
        </member>
        <member name="P:Gibraltar.Data.InterprocessLockProxy.DisposeOnClose">
            <summary>
            Object persistence policy for this instance:  Whether to dispose this instance when file lock is released.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.InterprocessLockProxy.CheckCurrentTurnThread(Gibraltar.Data.InterprocessLock)">
            <summary>
            Check the thread with the current turn for the lock and grant a secondary lock if applicable.
            </summary>
            <param name="candidateLock">An unexpired lock request on the current thread, or null to just check the turn thread.</param>
            <returns>The Thread with the current turn for the lock, or null if there are none holding or waiting.</returns>
        </member>
        <member name="M:Gibraltar.Data.InterprocessLockProxy.QueueRequest(Gibraltar.Data.InterprocessLock)">
            <summary>
            Queue a lock request (RepositoryLock instance).  Must be followed by a call to AwaitOurTurnOrTimeout (which can block).
            </summary>
            <param name="lockRequest"></param>
        </member>
        <member name="M:Gibraltar.Data.InterprocessLockProxy.AwaitOurTurnOrTimeout(Gibraltar.Data.InterprocessLock)">
            <summary>
            Wait for our turn to have the lock (and wait for the lock) up to our time limit
            </summary>
            <param name="lockRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.InterprocessLockProxy.TryGetLock(Gibraltar.Data.InterprocessLock)">
            <summary>
            Try to get the actual file lock on behalf of the current request.
            </summary>
            <param name="currentRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.InterprocessLockProxy.StartNextTurn(Gibraltar.Data.InterprocessLock)">
            <summary>
            Find the next request still waiting and signal it to go.  Or return true if the current caller may proceed.
            </summary>
            <param name="currentRequest">The request the caller is waiting on, or null for none.</param>
            <returns>True if the caller's supplied request is the next turn, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Data.InterprocessLockProxy.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.
            </summary>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="M:Gibraltar.Data.InterprocessLockProxy.GetFileLock(System.String)">
            <summary>
            Attempts to get an exclusive lock on a specified file.
            </summary>
            <param name="lockFullFileNamePath">The full-path file name for the lock file.</param>
            <returns>A file stream to the maintenance file if locked, null otherwise</returns>
            <remarks>Callers should check the provided handle for null to ensure they got the lock on the file.
            If it is not null, it must be disposed to release the lock in a timely manner.</remarks>
        </member>
        <member name="M:Gibraltar.Data.InterprocessLockProxy.GetLockRequest(System.String)">
            <summary>
            Attempts to request a turn at an exclusive lock on a specified file.
            </summary>
            <param name="lockFullFileNamePath">The full-path file name for the lock file.</param>
            <returns>A LockFile holding a lock request if available, null otherwise</returns>
            <remarks>Callers should check the provided handle for null to ensure they got a valid lock request on the file.
            If it is not null, it must be disposed to release the request when expired or full lock is acquired.</remarks>
        </member>
        <member name="M:Gibraltar.Data.InterprocessLockProxy.CheckLockRequest(System.String)">
            <summary>
            Check if a lock request is pending (without blocking).
            </summary>
            <param name="lockFullFileNamePath">The full-path file name to request a lock on.</param>
            <returns>True if a lock request is pending (an open read), false if no reads are open on the file.</returns>
        </member>
        <member name="M:Gibraltar.Data.InterprocessLockProxy.OpenFileAccess(System.String,System.IO.FileAccess,System.IO.FileShare,System.Boolean)">
            <summary>
            Open a file for the specified fileAccess and fileShare, or return null if open fails (avoids exceptions).
            </summary>
            <param name="fullFileNamePath">The full-path file name to open for the specified access.</param>
            <param name="fileAccess">The FileAccess with which to open the file.</param>
            <param name="fileShare">The FileShare to allow to overlap with this open.</param>
            <param name="manualDeleteOnClose">Whether the (successfully-opened) FileLock returned should delete the file
            upon dispose.</param>
            <returns>A disposable FileLock opened with the specified access and sharing), or null if the attempt failed.</returns>
        </member>
        <member name="T:Gibraltar.Data.MD5Core">
            <summary>
            This is an implementation of MD5 that can be used in a FIPS environment.  Not for real encryption.
            </summary>
            <remarks>
            This is included and used instead of the standard MD5 crypto provider because the 
            MD5 is not part of the FIPS.  When FIPS is enforced, any attempt to use the .NET
            Framework implementation will throw an exception.  
            Sure, MD5 is not so secure but then does everything need 100% security?  No.
            Meanwhile there's a ton of code that uses MD5 (including ComplyXL) that's not 
            going to (cannot) be rewritten because of this issue.
            </remarks>
        </member>
        <member name="M:Gibraltar.Data.MD5Core.GetHash(System.String,System.Text.Encoding)">
            <summary>
            Calculate the MD5 hash of the specified string input and encoding
            </summary>
            <param name="input"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.MD5Core.GetHash(System.String)">
            <summary>
            Calculate the MD5 has of the specified string input with UTF8 encoding
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.MD5Core.GetHashString(System.Byte[])">
            <summary>
            Calculate a hash string for the specified byte array of data
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.MD5Core.GetHashString(System.String,System.Text.Encoding)">
            <summary>
            Calculate an MD5 hash string of the specified string input and encoding
            </summary>
            <param name="input"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.MD5Core.GetHashString(System.String)">
            <summary>
            Calculate an MD5 hash string of the specified string input with UTF8 encoding
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.MD5Core.GetHash(System.Byte[])">
            <summary>
            Calculate the binary MD5 hash of a binary input
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.MD5Core.GetHashBlock(System.Byte[],Gibraltar.Data.MD5Core.ABCDStruct@,System.Int32)">
            Performs a single block transform of MD5 for a given set of ABCD inputs
        </member>
        <member name="T:Gibraltar.Data.NewSessionsEventArgs">
            <summary>
            Supplies summary information about new sessions that are available to be retrieved or just retrieved into the repository
            </summary>
        </member>
        <member name="M:Gibraltar.Data.NewSessionsEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Loupe.Extensibility.Data.LogMessageSeverity)">
            <summary>
            Create a new sessions event arguments container
            </summary>
            <param name="newSessions"></param>
            <param name="warningSessions"></param>
            <param name="errorSessions"></param>
            <param name="criticalSessions"></param>
            <param name="maxSeverity"></param>
        </member>
        <member name="P:Gibraltar.Data.NewSessionsEventArgs.NewSessions">
            <summary>
            The number of new sessions affected
            </summary>
        </member>
        <member name="P:Gibraltar.Data.NewSessionsEventArgs.WarningSessions">
            <summary>
            The number of new sessions with a max severity of warning.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.NewSessionsEventArgs.ErrorSessions">
            <summary>
            The number of new sessions with a max severity of error.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.NewSessionsEventArgs.CriticalSessions">
            <summary>
            The number of new sessions with a max severity of critical.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.NewSessionsEventArgs.MaxSeverity">
            <summary>
            The maximum severity of new sessions.
            </summary>
        </member>
        <member name="T:Gibraltar.Data.NewSessionsEventHandler">
            <summary>
            An event handler for the New Sessions Event Arguments
            </summary>
            <param name="state"></param>
            <param name="e"></param>
        </member>
        <member name="T:Gibraltar.Data.OperationMetric">
            <summary>
            Record an event metric for a single execution of a data operation
            </summary>
            <remarks>This class is optimized to be used in a using statement.  It will automatically
            time the duration of the command and record an event metric when disposed.  It will also
            record trace messages for the start and end of each command so that it is unnecessary to add
            redundant trace messages in your method invocation to denote the boundaries of a command.
            If not explicitly Dispose'd (automatically done for you by a using statement)
            the metric will not be generated.</remarks>
        </member>
        <member name="F:Gibraltar.Data.OperationMetric.MetricTypeName">
            <summary>
            The metric type name
            </summary>
        </member>
        <member name="F:Gibraltar.Data.OperationMetric.MetricCounterName">
            <summary>
            The metric counter name
            </summary>
        </member>
        <member name="F:Gibraltar.Data.OperationMetric.MetricDefinitionDescription">
            <summary>
            The metric counter description
            </summary>
        </member>
        <member name="M:Gibraltar.Data.OperationMetric.#ctor(System.String,System.String)">
            <summary>
            Create a new operation metric monitoring object to record a single operation.
            </summary>
            <remarks>All event metrics are recorded under the same metric counter in Gibraltar.Data called Repository Operation.</remarks>
            <param name="category">The category to use for the metric</param>
            <param name="operationName">The name of the operation for tracking purposes</param>
        </member>
        <member name="M:Gibraltar.Data.OperationMetric.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new operation metric monitoring object to record a single operation.
            </summary>
            <remarks>All event metrics are recorded under the same metric counter in Gibraltar.Data called Repository Operation.</remarks>
            <param name="category">The category to use for the metric</param>
            <param name="operationName">The name of the operation for tracking purposes</param>
            <param name="startMessage">A trace message to add at the start of the operation.</param>
        </member>
        <member name="M:Gibraltar.Data.OperationMetric.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Create a new operation metric monitoring object to record a single operation.
            </summary>
            <remarks>All event metrics are recorded under the same metric counter in Gibraltar.Data called Repository Operation.</remarks>
            <param name="category">The category to use for the metric</param>
            <param name="operationName">The name of the operation for tracking purposes</param>
            <param name="startMessage">A trace message to add at the start of the operation.</param>
            <param name="endMessage">A trace message to add at the end of the operation.</param>
        </member>
        <member name="M:Gibraltar.Data.OperationMetric.#ctor(System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Create a new operation metric monitoring object to record a single operation.
            </summary>
            <remarks>All event metrics are recorded under the same metric counter in Gibraltar.Data called Repository Operation.</remarks>
            <param name="category">The category to use for the metric</param>
            <param name="operationName">The name of the operation for tracking purposes</param>
            <param name="startMessage">A trace message to add at the start of the operation. Any args provided will be inserted.</param>
            <param name="endMessage">A trace message to add at the end of the operation.  Any args provided will be inserted.</param>
            <param name="args">A variable number of arguments to insert into the start and end messages</param>
        </member>
        <member name="P:Gibraltar.Data.OperationMetric.OperationName">
            <summary>
            The operation that was executed.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.OperationMetric.Duration">
            <summary>
            The duration of the command
            </summary>
        </member>
        <member name="M:Gibraltar.Data.OperationMetric.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            <remarks>Calling Dispose() (automatic when a using statement ends) will generate the metric.</remarks>
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Data.OperationMetric.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.
            </summary>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="M:Gibraltar.Data.OperationMetric.Initialize(System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Our real constructor logic
            </summary>
            <remarks>This is in its own special method so that the number of stack frames from the caller to this
            method is constant regardless of constructor.</remarks>
            <param name="category">The category to use for the metric</param>
            <param name="operationName">The name of the command for tracking purposes</param>
            <param name="startMessage">A trace message to add at the start of the command. Any args provided will be inserted.</param>
            <param name="endMessage">A trace message to add at the end of the command.  Any args provided will be inserted.</param>
            <param name="args">A variable number of arguments to insert into the start and end messages</param>
        </member>
        <member name="T:Gibraltar.Data.Packager">
            <summary>
            Packages up sessions collected on the local computer and sends them via server or file transport.
            </summary>
        </member>
        <member name="F:Gibraltar.Data.Packager.LogCategory">
            <summary>
            The log category for the packager
            </summary>
        </member>
        <member name="E:Gibraltar.Data.Packager.BeginSend">
            <summary>
            Raised at the start of the packaging and sending process (after all input is collected)
            </summary>
        </member>
        <member name="E:Gibraltar.Data.Packager.EndSend">
            <summary>
            Raised at the end of the packaging and sending process with completion status information.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.Packager.#ctor">
            <summary>
            Create a new packager for the current process.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.Packager.#ctor(System.String)">
            <summary>
            Create a new packager for the current process.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.Packager.#ctor(System.String,System.String)">
            <summary>
            Create a new packager for the current process.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.Packager.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new packager for the current process.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Packager.ProductName">
            <summary>
            The product name of the current running application this packager was initialized with.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Packager.ApplicationName">
            <summary>
            The name of the current running application this packager was initialized with.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Packager.Caption">
            <summary>
            A caption for the resulting package
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Packager.Description">
            <summary>
            A description for the resulting package.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.Packager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Data.Packager.SendToFile(Loupe.Extensibility.Data.SessionCriteria,System.Boolean,System.String,Gibraltar.ProgressMonitorStack)">
            <summary>
            Write the completed package to the provided full file name and path without extension.
            </summary>
            <param name="sessions">The set of match rules to apply to sessions to determine what to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="fullFileNamePath">The file name and path to write the final package to</param>
            <param name="progressMonitors">The asynchronous progress monitoring stack.</param>
            <returns>The Package Send Event Arguments object that was also used for the EndSend event.</returns>
            <remarks>The EndSend event will be raised when the send operation completes.
            Any provided extension will be removed and replaced with the standard Gibraltar package extension.</remarks>
            <exception cref="T:System.ArgumentNullException">A required parameter was null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided file information is not a fully qualified file name and path.</exception>
        </member>
        <member name="M:Gibraltar.Data.Packager.SendToFile(Loupe.Extensibility.Data.SessionCriteria,System.Boolean,System.String,System.Boolean)">
            <summary>
            Write the completed package to the provided full file name and path without extension.
            </summary>
            <param name="sessions">The set of match rules to apply to sessions to determine what to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="fullFileNamePath">The file name and path to write the final package to</param>
            <param name="asyncSend">True to have the package and send process run asynchronously.</param>
            <remarks>The EndSend event will be raised when the send operation completes.
            Any provided extension will be removed and replaced with the standard Gibraltar package extension.</remarks>
            <exception cref="T:System.ArgumentNullException">A required parameter was null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided file information is not a fully qualified file name and path.</exception>
        </member>
        <member name="M:Gibraltar.Data.Packager.SendToFile(System.Predicate{Loupe.Extensibility.Data.ISessionSummary},System.Boolean,System.String,System.Boolean)">
            <summary>
            Write the completed package to the provided full file name and path without extension.
            </summary>
            <param name="sessionMatchPredicate">A delegate to evaluate sessions and determine which ones to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="fullFileNamePath">The file name and path to write the final package to</param>
            <param name="asyncSend">True to have the package and send process run asynchronously.</param>
            <remarks>The EndSend event will be raised when the send operation completes.
            Any provided extension will be removed and replaced with the standard Gibraltar package extension.</remarks>
            <exception cref="T:System.ArgumentNullException">A required parameter was null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided file information is not a fully qualified file name and path.</exception>
        </member>
        <member name="M:Gibraltar.Data.Packager.SendToServer(Loupe.Extensibility.Data.SessionCriteria,System.Boolean,System.Boolean,System.Boolean,Loupe.Configuration.ServerConfiguration)">
            <summary>
            Send the specified packages to our session data server as configured
            </summary>
            <param name="sessions">The set of match rules to apply to sessions to determine what to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="purgeSentSessions">True to have every included session removed from the local repository upon successful completion.</param>
            <param name="serverConfiguration">Optional.  The connection options to use instead of the current configured server connection</param>
            <param name="asyncSend">True to have the package and send process run asynchronously.</param>
            <returns>The Package Send Event Arguments object that was also used for the EndSend event.</returns>
            <remarks>The EndSend event will be raised when the send operation completes.</remarks>
            <exception cref="T:Gibraltar.GibraltarException">The server couldn't be contacted or there was a communication error.</exception>
            <exception cref="T:System.ArgumentException">The server configuration specified is invalid.</exception>
        </member>
        <member name="M:Gibraltar.Data.Packager.SendToServer(System.Predicate{Loupe.Extensibility.Data.ISessionSummary},System.Boolean,System.Boolean,System.Boolean,Loupe.Configuration.ServerConfiguration)">
            <summary>
            Send the specified packages to our session data server as configured
            </summary>
            <param name="sessionMatchPredicate">A delegate to evaluate sessions and determine which ones to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="purgeSentSessions">True to have every included session removed from the local repository upon successful completion.</param>
            <param name="serverConfiguration">Optional.  The connection options to use instead of the current configured server connection</param>
            <param name="asyncSend">True to have the package and send process run asynchronously.</param>
            <returns>The Package Send Event Arguments object that was also used for the EndSend event.</returns>
            <remarks>The EndSend event will be raised when the send operation completes.</remarks>
            <exception cref="T:Gibraltar.GibraltarException">The server couldn't be contacted or there was a communication error.</exception>
            <exception cref="T:System.ArgumentException">The server configuration specified is invalid.</exception>
        </member>
        <member name="M:Gibraltar.Data.Packager.SendToServer(Loupe.Extensibility.Data.SessionCriteria,System.Boolean,System.Boolean,Loupe.Configuration.ServerConfiguration,Gibraltar.ProgressMonitorStack)">
            <summary>
            Send the specified packages to our session data server as configured
            </summary>
            <param name="sessions">The set of match rules to apply to sessions to determine what to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="purgeSentSessions">True to have every included session removed from the local repository upon successful completion.</param>
            <param name="serverConfiguration">Optional.  The connection options to use instead of the current configured server connection</param>
            <param name="progressMonitors">Optional. The asynchronous progress monitoring stack.</param>
            <returns>The Package Send Event Arguments object that was also used for the EndSend event.</returns>
            <remarks>The EndSend event will be raised when the send operation completes.</remarks>
            <exception cref="T:Gibraltar.GibraltarException">The server couldn't be contacted or there was a communication error</exception>
            <exception cref="T:System.ArgumentException">The server configuration specified is invalid</exception>
        </member>
        <member name="M:Gibraltar.Data.Packager.CanSendToServer(System.Boolean,Loupe.Configuration.ServerConfiguration)">
            <summary>
            Determines if it can correctly connect to the server and send data
            </summary>
            <param name="overrideConfiguration">Indicates if any of the configuration information provided on this call should be used</param>
            <param name="serverConfiguration">The connection configuration to use if overriding the server configuration</param>
            <returns>The hub status information for the specified configuration</returns>
        </member>
        <member name="M:Gibraltar.Data.Packager.CanSendToServer">
            <summary>
            Determines if it can correctly connect to the server and send data
            </summary>
            <returns>The hub status information for the specified configuration</returns>
        </member>
        <member name="M:Gibraltar.Data.Packager.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            </summary>
            <remarks>
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.</remarks>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="M:Gibraltar.Data.Packager.FindPackageSessions(Loupe.Extensibility.Data.SessionCriteria,Gibraltar.ProgressMonitorStack,System.Boolean@)">
            <summary>
            Get a dataset of all of the sessions that should be included in our package
            </summary>
            <param name="sessionCriteria"></param>
            <param name="progressMonitors"></param>
            <param name="hasProblemSessions"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.Packager.FindPackageSessions(System.Predicate{Loupe.Extensibility.Data.ISessionSummary},Gibraltar.ProgressMonitorStack,System.Boolean@)">
            <summary>
            Get a dataset of all of the sessions that should be included in our package
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.Packager.OnBeginSend">
            <summary>
            Called to raise the BeginSend event at the start of the packaging and sending process (after all input is collected)
            </summary>
            <remarks>If overriding this method, be sure to call Base.OnBeginSend to ensure that the event is still raised to its caller.</remarks>
        </member>
        <member name="M:Gibraltar.Data.Packager.OnEndSend(Gibraltar.Data.PackageSendEventArgs)">
            <summary>
            Called to raise the EndSend event at the end of the packaging and sending process with completion status information.
            </summary>
            <remarks>If overriding this method, be sure to call Base.OnBeginSend to ensure that the event is still raised to its caller.</remarks>
        </member>
        <member name="M:Gibraltar.Data.Packager.AsyncTaskExecute(System.Threading.WaitCallback,System.String,System.Object,System.Boolean)">
            <summary>
            Provides a common wrapper to async task execution that can be synchronous with exception generation
            </summary>
            <param name="asyncTask">The task method to call</param>
            <param name="title">The title for the operation being performed</param>
            <param name="state">All of the state to pass to the task</param>
            <param name="processAsynchronously">True to return immediately after dispatch, false to wait until completion and then throw an exception if there is an error.</param>
        </member>
        <member name="P:Gibraltar.Data.Packager.CleanupQueueLength">
            <summary>
            Thread-safe get of the package queue length
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.Packager.CleanupDequeue">
            <summary>
            Thread-safe cleanup dequeue
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.Packager.CleanupEnqueue(Gibraltar.Data.Internal.TransportPackageBase)">
            <summary>
            Thread-safe cleanup enqueue
            </summary>
            <param name="package"></param>
        </member>
        <member name="P:Gibraltar.Data.Packager.TransportQueueLength">
            <summary>
            Thread-safe get of the package queue length
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.Packager.TransportDequeue">
            <summary>
            Thread-safe transport dequeue
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.Packager.TransportEnqueue(Gibraltar.Data.Internal.TransportPackageBase)">
            <summary>
            Thread-safe transport enqueue
            </summary>
            <param name="package"></param>
        </member>
        <member name="M:Gibraltar.Data.Packager.EnsureTransportThreadRunning">
            <summary>
            Makes sure the background transport thread is running.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.Packager.CreateTransportablePackage(Gibraltar.ProgressMonitorStack,Gibraltar.ProgressMonitor,Loupe.Extensibility.Data.ISessionSummaryCollection,System.Int32,System.Boolean@,Gibraltar.Data.Packager.PackagingState)">
            <summary>
            Creates a transportable package of the selected sessions in the local collection repository.
            </summary>
            <remarks>Multi-thread safe.</remarks>
        </member>
        <member name="M:Gibraltar.Data.Packager.LogSendToServer(System.Boolean,System.Boolean,Loupe.Configuration.ServerConfiguration)">
            <summary>
            Log the request information for a send to server request
            </summary>
        </member>
        <member name="M:Gibraltar.Data.Packager.AsyncTransportPackage(System.Object)">
            <summary>
            work the transport queue until it's empty.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Gibraltar.Data.Packager.ActionSendToFile(System.Object)">
            <summary>
            Performs the actual packaging and storing of sessions in a file, safe for async calling.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.Packager.ActionSendToServer(System.Object)">
            <summary>
            Performs the actual packaging and transmission of sessions via SDS, safe for async calling.
            </summary>
            <param name="state"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The server configuration specified is invalid</exception>
        </member>
        <member name="M:Gibraltar.Data.Packager.AsyncSendToFile(System.Object)">
            <summary>
            WaitCallback compatible wrapper for ActionSendToFile.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Gibraltar.Data.Packager.AsyncSendToServer(System.Object)">
            <summary>
            WaitCallback compatible wrapper for ActionSendToWeb.
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:Gibraltar.Data.Packager.PackagingState.LastSessionId">
            <summary>
            The last session that we either packaged or attempted to package, and should start immediately after.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Packager.PackagingState.NextSessionId">
            <summary>
            The session to start the next package on.  The NextSessionStream property will be set if this is set.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Packager.PackagingState.NextSessionStream">
            <summary>
            A working session stream that could not be stored into the last package.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.Packager.PackagingState.IsComplete">
            <summary>
            Indicates if all of the sessions have been packaged (packaging is therefore complete) or not
            </summary>
        </member>
        <member name="T:Gibraltar.Data.PackageSendEventHandler">
            <summary>
            Used to provide information on the status of a package send.
            </summary>
            <param name="sender">The packager object raising the event</param>
            <param name="e">The information on the package send event</param>
        </member>
        <member name="T:Gibraltar.Data.PackageSendEventArgs">
            <summary>
            Information about the Package Send Events.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.PackageSendEventArgs.#ctor(System.Int32,Gibraltar.AsyncTaskResult,System.String,System.Exception)">
            <summary>
            Create a new result arguments object from the provided information
            </summary>
            <param name="fileSize">The number of bytes in the package, if sent succesfully.</param>
            <param name="result">The final status of the task</param>
            <param name="message">Optional. A display message to complement the result.</param>
            <param name="exception">Optional. An exception object to allow the caller to do its own interpretation of an exception.</param>
        </member>
        <member name="P:Gibraltar.Data.PackageSendEventArgs.FileSize">
            <summary>
            The number of bytes in the package, if sent succesfully.
            </summary>
        </member>
        <member name="T:Gibraltar.Data.PathManager">
            <summary>
            Determines the correct physical paths to use for various Gibraltar scenarios
            </summary>
        </member>
        <member name="F:Gibraltar.Data.PathManager.RootFolder">
            <summary>
            The root folder to use for all of our sub-folders
            </summary>
        </member>
        <member name="F:Gibraltar.Data.PathManager.RepositoryFolder">
            <summary>
            The subfolder of the selected path used for the repository
            </summary>
        </member>
        <member name="F:Gibraltar.Data.PathManager.CollectionFolder">
            <summary>
            The subfolder of the selected path used for local session log collection
            </summary>
        </member>
        <member name="F:Gibraltar.Data.PathManager.CollectionFolderOld">
            <summary>
            The subfolder of the selected path used for local session log collection on the .NET Framework original agent
            </summary>
        </member>
        <member name="F:Gibraltar.Data.PathManager.DiscoveryFolder">
            <summary>
            The subfolder of the selected path used for discovery information
            </summary>
        </member>
        <member name="M:Gibraltar.Data.PathManager.FindBestPath(Gibraltar.Data.PathType)">
            <summary>
            Determine the best path of the provided type for the current user
            </summary>
            <param name="pathType">The path type to retrieve a path for</param>
            <returns>The best accessible path of the requested type.</returns>
            <remarks>The common application data folder is used if usable
            then the local application data folder as a last resort.</remarks>
        </member>
        <member name="M:Gibraltar.Data.PathManager.FindBestPath(Gibraltar.Data.PathType,System.String)">
            <summary>
            Determine the best path of the provided type for the current user
            </summary>
            <param name="pathType">The path type to retrieve a path for</param>
            <param name="preferredPath">The requested full path to use if available.</param>
            <returns>The best accessible path of the requested type.</returns>
            <remarks>If the preferred path is usable it is used, otherwise the common application data folder is used
            then the local application data folder as a last resort.</remarks>
        </member>
        <member name="M:Gibraltar.Data.PathManager.CreatePath(System.String,System.String)">
            <summary>
            Find the full path for the provided subfolder name within a special folder, and make sure it's usable (return null if fails).
            </summary>
            <returns>The full path to the requested folder if it is usable, null otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Data.PathManager.ComputePath(System.String,System.String)">
            <summary>
            Compute the full path for the provided subfolder name within a special folder.
            </summary>
            <returns>The full path to the requested folder, which may or may not exist.</returns>
        </member>
        <member name="M:Gibraltar.Data.PathManager.PathIsUsable(System.String)">
            <summary>
            Determines if the provided full path is usable for the current user
            </summary>
            <param name="path"></param>
            <returns>True if the path is usable, false otherwise</returns>
            <remarks>The path is usable if the current user can access the path, create files and write to existing files.</remarks>
        </member>
        <member name="T:Gibraltar.Data.PathType">
            <summary>
            The different path types that Gibraltar uses
            </summary>
        </member>
        <member name="F:Gibraltar.Data.PathType.Collection">
            <summary>
            The place for the agent to record new session information
            </summary>
        </member>
        <member name="F:Gibraltar.Data.PathType.Repository">
            <summary>
            The session repository for sessions the user wants to keep
            </summary>
        </member>
        <member name="F:Gibraltar.Data.PathType.Discovery">
            <summary>
            The shared folder for inter-agent discovery (like for live sessions)
            </summary>
        </member>
        <member name="T:Gibraltar.Data.RepositoryPublishEngine">
            <summary>
            Performs constant, background publishing of sessions from the repository.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.RepositoryPublishEngine.#ctor(System.String,System.String,System.String,Loupe.Configuration.ServerConfiguration)">
            <summary>
            Create a repository publish engine for the specified local repository to the remote server.
            </summary>
            <param name="productName">Required. The product to restrict sending to.</param>
            <param name="applicationName">Optional.  The application to restrict sending to.</param>
            <param name="directory">Optional.  The base directory of the repository, overriding the system default.</param>
            <param name="serverConfiguration">The server to publish to.</param>
        </member>
        <member name="P:Gibraltar.Data.RepositoryPublishEngine.IsActive">
            <summary>
            Indicates if the publisher has a valid configuration and is running.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.RepositoryPublishEngine.Start">
            <summary>
            Start the engine's background processing thread.  If it is currently running the call has no effect.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.RepositoryPublishEngine.Stop(System.Boolean)">
            <summary>
            Stop publishing sessions
            </summary>
            <param name="waitForStop">Indicates if the caller wants to wait for the engine to stop before returning</param>
            <remarks></remarks>
        </member>
        <member name="M:Gibraltar.Data.RepositoryPublishEngine.RepositoryPublishLoop">
            <summary>
            Called when we're the one true publisher for our data to have us poll for data to push and push as soon as available.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.RepositoryPublishEngine.EnsureSessionPublishThreadIsValid">
            <summary>
            Makes sure that there is an active, valid session publishing thread
            </summary>
            <remarks>This is a thread-safe method that acquires the session publishing thread lock on its own, so
            the caller need not have that lock prior to calling this method.  If the session publishing thread has
            failed a new one will be started.</remarks>
        </member>
        <member name="M:Gibraltar.Data.RepositoryPublishEngine.GetLock(System.Int32)">
            <summary>
            Get a multiprocess lock for the subscription engine.
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Data.SessionHeader">
            <summary>
            Used at the start of a data stream to contain the session summary
            </summary>
            <remarks>The session header subsumes a SessionStartInfoPacket, but both should be included
            in a stream because the SessionHeader is really a cache of the session start info packet that
            is easy to access.</remarks>
        </member>
        <member name="E:Gibraltar.Data.SessionHeader.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.SessionHeader.#ctor(Gibraltar.Monitor.SessionSummary)">
            <summary>
            Create a new header from the provided session summary information
            </summary>
            <param name="sessionSummary"></param>
        </member>
        <member name="M:Gibraltar.Data.SessionHeader.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Create a new session header with the specified properties collection.  All other values are unset.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Gibraltar.Data.SessionHeader.#ctor(System.Byte[])">
            <summary>
            Create a new session header by reading the provided byte array
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Gibraltar.Data.SessionHeader.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Create a new session header by reading the provided stream, which must contain ONLY the header
            </summary>
            <param name="data"></param>
            <param name="length">The number of bytes to read from the stream for the header (or zero to read the whole stream)</param>
        </member>
        <member name="M:Gibraltar.Data.SessionHeader.RawData">
            <summary>
            Export the file header into a raw data array
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.MajorVersion">
            <summary>
            The major version of the binary format of the session header
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.MinorVersion">
            <summary>
            The minor version of the binary format of the session header
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.Id">
            <summary>
            The unique Id of the session
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.Uri">
            <summary>
            The link to this item on the server
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.IsComplete">
            <summary>
            Indicates if all of the session data is stored that is expected to be available
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.ComputerId">
            <summary>
            The unique Id of the computer
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.Caption">
            <summary>
            A display caption for the session
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.Product">
            <summary>
            The product name of the application that recorded the session
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.Application">
            <summary>
            The title of the application that recorded the session
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.Environment">
            <summary>
            Optional.  The environment this session is running in.
            </summary>
            <remarks>Environments are useful for categorizing sessions, for example to 
            indicate the hosting environment. If a value is provided it will be 
            carried with the session data to upstream servers and clients.  If the 
            corresponding entry does not exist it will be automatically created.</remarks>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.PromotionLevel">
            <summary>
            Optional.  The promotion level of the session.
            </summary>
            <remarks>Promotion levels are useful for categorizing sessions, for example to 
            indicate whether it was run in development, staging, or production. 
            If a value is provided it will be carried with the session data to upstream servers and clients.  
            If the corresponding entry does not exist it will be automatically created.</remarks>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.ApplicationType">
            <summary>
            The type of process the application ran as.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.ApplicationTypeName">
            <summary>
            The type of process the application ran as.
            </summary>
            <remarks>Not an enumeration because the ApplicationType enum isn't accessible at this level.</remarks>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.ApplicationDescription">
            <summary>
            The description of the application from its manifest.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.ApplicationVersion">
            <summary>
            The version of the application that recorded the session
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.AgentVersion">
            <summary>
            The version of the Gibraltar Agent used to monitor the session
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.HostName">
            <summary>
            The host name / NetBIOS name of the computer that recorded the session
            </summary>
            <remarks>Does not include the domain name portion of the fully qualified DNS name.</remarks>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.DnsDomainName">
            <summary>
            The DNS domain name of the computer that recorded the session.  May be empty.
            </summary>
            <remarks>Does not include the host name portion of the fully qualified DNS name.</remarks>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.TimeZoneCaption">
            <summary>
            The display caption of the time zone where the session was recorded
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.UserName">
            <summary>
            The user Id that was used to run the session
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.UserDomainName">
            <summary>
            The domain of the user id that was used to run the session
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.FullyQualifiedUserName">
            <summary>
            The fully qualified user name of the user the application was run as.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.StartDateTime">
            <summary>
            The date and time the session started
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.DisplayStartDateTime">
            <summary>
            The date and time the session started
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.EndDateTime">
            <summary>
            The date and time the session ended or was last confirmed running
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.DisplayEndDateTime">
            <summary>
            The date and time the session ended
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.Duration">
            <summary>
            The duration of the session.  May be zero indicating unknown
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.Status">
            <summary>
            The final status of the session.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.StatusName">
            <summary>
            The status of the session (based on the SessionStatus enumeration)
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.MessageCount">
            <summary>
            The total number of log messages recorded in the session
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.CriticalCount">
            <summary>
            The total number of critical severity log messages recorded in the session
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.ErrorCount">
            <summary>
            The total number of error severity log messages recorded in the session
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.WarningCount">
            <summary>
            The total number of warning severity log messages recorded in the session
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.OSVersion">
            <summary>
            The version information of the installed operating system (without service pack or patches)
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.OSServicePack">
            <summary>
            The operating system service pack, if any.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.OSCultureName">
            <summary>
            The culture name of the underlying operating system installation
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.OSPlatformCode">
            <summary>
            The OS Platform code, nearly always 1 indicating Windows NT
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.OSProductType">
            <summary>
            The OS product type code, used to differentiate specific editions of various operating systems.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.OSSuiteMask">
            <summary>
            The OS Suite Mask, used to differentiate specific editions of various operating systems.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.OSFamilyName">
            <summary>
            The well known operating system family name, like Windows Vista or Windows Server 2003.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.OSEditionName">
            <summary>
            The edition of the operating system without the family name, such as Workstation or Standard Server.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.OSFullName">
            <summary>
            The well known OS name and edition name
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.OSFullNameWithServicePack">
            <summary>
            The well known OS name, edition name, and service pack like Windows XP Professional Service Pack 3
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.OSArchitecture">
            <summary>
            The processor architecture of the operating system.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.OSBootMode">
            <summary>
            The boot mode of the operating system.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.RuntimeVersion">
            <summary>
            The version of the .NET runtime that the application domain is running as.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.RuntimeArchitecture">
            <summary>
            The processor architecture the process is running as.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.CurrentCultureName">
            <summary>
            The current application culture name.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.CurrentUICultureName">
            <summary>
            The current user interface culture name.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.MemoryMB">
            <summary>
            The number of megabytes of installed memory in the host computer.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.Processors">
            <summary>
            The number of physical processor sockets in the host computer.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.ProcessorCores">
            <summary>
            The total number of processor cores in the host computer.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.UserInteractive">
            <summary>
            Indicates if the session was run in a user interactive mode.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.TerminalServer">
            <summary>
            Indicates if the session was run through terminal server.  Only applies to User Interactive sessions.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.ScreenWidth">
            <summary>
            The number of pixels wide of the virtual desktop.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.ScreenHeight">
            <summary>
            The number of pixels tall for the virtual desktop.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.ColorDepth">
            <summary>
            The number of bits of color depth.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.CommandLine">
            <summary>
            The complete command line used to execute the process including arguments.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.FileId">
            <summary>
            The unique id of the file the session header is associated with
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.FileStartDateTime">
            <summary>
            The date and time that this file became the active file for the session
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.FileEndDateTime">
            <summary>
            The date and time that this file was no longer the active file for the session.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.FileSequence">
            <summary>
            The sequence of this file in the set of files for the session
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.Properties">
            <summary>
            A collection of properties used to provided extended information about the session
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.Computer">
            <summary>
            Optional. Represents the computer that sent the session
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.AddedDateTime">
            <summary>
            The date and time the session was added to the repository
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.DisplayAddedDateTime">
            <summary>
            The date and time the session was added to the repository
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.UpdatedDateTime">
            <summary>
            The date and time the session was added to the repository
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.DisplayUpdatedDateTime">
            <summary>
            The date and time the session was added to the repository
            </summary>
        </member>
        <member name="M:Gibraltar.Data.SessionHeader.Loupe#Extensibility#Data#ISessionSummary#Session">
            <summary>
            Get a copy of the full session detail this session refers to.  
            </summary>
            <remarks>Session objects can be large in memory.  This method will return a new object
            each time it is called which should be released by the caller as soon as feasible to control memory usage.</remarks>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.IsLastFile">
            <summary>
            True if this is the last file recorded for the session.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.IsValid">
            <summary>
            True if the session header is valid (has not been corrupted)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.IsNew">
            <summary>
            Indicates if the session has ever been viewed or exported
            </summary>
            <remarks>Changes to this property are not persisted.</remarks>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.IsLive">
            <summary>
            Indicates if the session is currently running and a live stream is available.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.HasData">
            <summary>
            Indicates if session data is available.
            </summary>
            <remarks>The session summary can be transfered separately from the session details
            and isn't subject to pruning so it may be around long before or after the detailed data is.</remarks>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.HasFileInfo">
            <summary>
            True if the session header contains the extended file information
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SessionHeader.SupportsFragments">
            <summary>
            Indicates if the binary stream supports fragments or only single-stream transfer (the pre-3.0 format)
            </summary>
        </member>
        <member name="M:Gibraltar.Data.SessionHeader.Equals(Gibraltar.Data.SessionHeader)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
        </member>
        <member name="M:Gibraltar.Data.SessionHeader.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Data.SessionHeader.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Data.SessionHeader.ArraysAreEqual``1(``0[],``0[])">
            <summary>
            Compare two arrays of an arbitrary object type for equality.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.SessionHeader.StatusNameToStatus(System.String)">
            <summary>
            Performance optimized status converter
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.SessionHeader.SwapStringReferences">
            <summary>
            Exchange our custom strings for the single instance value from the single instance store.
            </summary>
        </member>
        <member name="T:Gibraltar.Data.SimplePackage">
            <summary>
            A very simple implementation of the Package type for use within the agent
            </summary>
            <remarks>Unlike the full package implementation this form has no index and does not merge session fragments.</remarks>
        </member>
        <member name="M:Gibraltar.Data.SimplePackage.#ctor">
            <summary>
            Create a new, empty package.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.SimplePackage.#ctor(System.String)">
            <summary>
            Create a new package by loading the specified file.  It must be a package file, not a log file.
            </summary>
            <remarks>To load any single GLF or GLP file into a new Package object see the static method LoadFileAsPackage().</remarks>
            <param name="fileNamePath">The full path to the package file to open.</param>
        </member>
        <member name="M:Gibraltar.Data.SimplePackage.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Data.SimplePackage.AddSession(System.IO.Stream)">
            <summary>
            Adds the provided session to the package
            </summary>
            <param name="sessionStream"></param>
        </member>
        <member name="M:Gibraltar.Data.SimplePackage.Save(Gibraltar.ProgressMonitorStack)">
            <summary>
            Save the package, overwriting any existing data
            </summary>
            <param name="progressMonitors"></param>
        </member>
        <member name="M:Gibraltar.Data.SimplePackage.Save(Gibraltar.ProgressMonitorStack,System.String)">
            <summary>
            Save the package to the specified file name and path, overwriting any existing data
            </summary>
            <param name="progressMonitors"></param>
            <param name="fileNamePath"></param>
        </member>
        <member name="P:Gibraltar.Data.SimplePackage.Caption">
            <summary>
            The display caption for the package
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SimplePackage.Description">
            <summary>
            The end user display description for the package
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SimplePackage.IsDirty">
            <summary>
            Indicates if there is unsaved data in the repository.
            </summary>
        </member>
        <member name="P:Gibraltar.Data.SimplePackage.FileNamePath">
            <summary>
            The current full path to the package.  It may be null or empty if this package has never been saved.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.SimplePackage.Clear">
            <summary>
            Clear all of the sessions from the package
            </summary>
        </member>
        <member name="M:Gibraltar.Data.SimplePackage.GetStats(System.Int32@,System.Int32@,System.Int32@,System.Int64@)">
            <summary>
            Get summary statistics about the sessions in the repository
            </summary>
            <param name="sessions">The number of sessions in the entire repository</param>
            <param name="files">The number of files for all of the sessions in the repository</param>
            <param name="fileBytes">The total number of bytes used by files in the repository</param>
            <param name="problemSessions">The number of sessions with problems in the folder and all folders it contains</param>
            <remarks>Problems are crashed sessions or sessions with critical or error messages.</remarks>
        </member>
        <member name="M:Gibraltar.Data.SimplePackage.GetSessions">
            <summary>
            Get the set of all of the session headers in the package
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.SimplePackage.GetSession(System.Guid,System.Nullable{System.Guid})">
            <summary>
            Load the specified session
            </summary>
            <returns>The loaded session.  If no session can be found with the specified Id an ArgumentOutOfRangeException will be thrown.</returns>
        </member>
        <member name="M:Gibraltar.Data.SimplePackage.GetSessionFileIds(System.Guid)">
            <summary>
            Retrieve the ids of the sessions files known locally for the specified session
            </summary>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Data.SimplePackage.Dispose(System.Boolean)">
            <summary>
            Dispose managed and unmanaged resources
            </summary>
            <param name="releaseManaged">Indicates if its safe to release all of the managed resources</param>
        </member>
        <member name="M:Gibraltar.Data.SimplePackage.OnInitialize">
            <summary>
            Called to initialize the package on creation
            </summary>
        </member>
        <member name="M:Gibraltar.Data.SimplePackage.LoadIndex">
            <summary>
            Load the index from the current archive by reading all of the file fragments.
            </summary>
        </member>
        <member name="M:Gibraltar.Data.SimplePackage.LoadSessionHeader(System.IO.Compression.ZipArchiveEntry)">
            <summary>
            Attempt to load the session header from the specified entry, returning null if it can't be loaded
            </summary>
            <param name="zipEntry">The current entry</param>
            <returns>The session header, or null if it can't be loaded</returns>
        </member>
        <member name="T:Gibraltar.ExceptionSourceProvider">
            <summary>
            Serves as an IMessageSourceProvider to attribute a message to the code location which threw an Exception.
            </summary>
            <remarks>This class looks at the <see CREF="System.Diagnostics.StackTrace">StackTrace</see> of a thrown Exception,
            rather than the current call stack, to attribute a message to the code location which threw that Exception rather
            than to where the call is made to log the Exception.</remarks>
        </member>
        <member name="M:Gibraltar.ExceptionSourceProvider.#ctor(System.Exception)">
            <summary>
            Construct an ExceptionSourceProvider based on a provided Exception.
            </summary>
            <remarks>The first (closest) stack frame of the first (outer) Exception will be taken as the
            originator of a log message using this as its IMessageSourceProvider.</remarks>
            <param name="exception">The Exception whose first stack frame is the declared originator.</param>
        </member>
        <member name="P:Gibraltar.ExceptionSourceProvider.MethodName">
            <summary>
            Should return the simple name of the method which issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.ExceptionSourceProvider.ClassName">
            <summary>
            Should return the full name of the class (with namespace) whose method issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.ExceptionSourceProvider.FileName">
            <summary>
            Should return the name of the file containing the method which issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.ExceptionSourceProvider.LineNumber">
            <summary>
            Should return the line within the file at which the log message was issued.
            </summary>
        </member>
        <member name="T:Gibraltar.Extensions">
            <summary>
            Conversion extensions
            </summary>
        </member>
        <member name="M:Gibraltar.Extensions.ToProcessorArchitecture(System.Runtime.InteropServices.Architecture)">
            <summary>
            Convert from .NET Core Architecture type to ProcessorArchitecture type.
            </summary>
            <param name="architecture"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Extensions.SafeDispose(System.IDisposable)">
            <summary>
            Dispose an object, catching any exceptions (and handling a null object)
            </summary>
        </member>
        <member name="T:Gibraltar.FileReference">
            <summary>
            Tracks files to detect changes.
            </summary>
        </member>
        <member name="E:Gibraltar.FileReference.PropertyChanged">
            <summary>
            Raised whenever a property changes (including the file data)
            </summary>
        </member>
        <member name="M:Gibraltar.FileReference.#ctor(System.IO.FileInfo)">
            <summary>
            Create a new file reference object
            </summary>
            <param name="referencedFile">The file information object for the file being added</param>
        </member>
        <member name="P:Gibraltar.FileReference.Caption">
            <summary>
            A display caption for the file
            </summary>
        </member>
        <member name="P:Gibraltar.FileReference.FileNamePath">
            <summary>
            The full file name &amp; path being monitored
            </summary>
        </member>
        <member name="P:Gibraltar.FileReference.Data">
            <summary>
            The full set of data in the file.
            </summary>
        </member>
        <member name="P:Gibraltar.FileReference.LastWriteTime">
            <summary>
            The last time the file was written
            </summary>
        </member>
        <member name="M:Gibraltar.FileReference.Refresh">
            <summary>
            Tell the file reference to check if it has been updated on disk.
            </summary>
        </member>
        <member name="P:Gibraltar.FileReference.ItemFound">
            <summary>
            Used while checking for updates to mark if the item was found during the update check or not.
            </summary>
        </member>
        <member name="M:Gibraltar.FileReference.LoadData">
            <summary>
            Called to reload the data for the file reference from disk.
            </summary>
            <remarks>Raises the property changed event for the data property</remarks>
        </member>
        <member name="M:Gibraltar.FileReference.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called to raise the property changed event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Gibraltar.FileReferenceCollection">
            <summary>
            A collection of file references that can be persisted.
            </summary>
            <remarks>
            The file cache provides a lightweight ability to store links to a number of files
            in an XML index file.</remarks>
        </member>
        <member name="E:Gibraltar.FileReferenceCollection.CollectionChanged">
            <summary>
            Raised every time the collection's contents are changed to allow subscribers to automatically track changes.
            </summary>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.#ctor(System.String,System.String)">
            <summary>
            Create a new directory monitor for the provided file reference collection on the provided path.
            </summary>
            <param name="path">The file path to monitor.</param>
            <param name="filter">A matching filter to files to look for in the specified path</param>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.Add(Gibraltar.FileReference)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </exception>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. 
            </exception>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.Contains(Gibraltar.FileReference)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
            <param name="item">
            The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </param>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.CopyTo(Gibraltar.FileReference[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array" /> is multidimensional.
                                -or-
            <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                                -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
                                -or-
            Type cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.Remove(Gibraltar.FileReference)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.Remove(System.String)">
            <summary>
            Removes the item with the specified key.
            </summary>
            <param name="key">The key of the item to remove</param>
            <returns>true if <paramref name="key" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="key" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.Rename(System.String,System.String)">
            <summary>
            Change the files name to the new unique name
            </summary>
            <param name="originalFileNamePath">The fully qualified file name and path to rename</param>
            <param name="newFileNamePath">The new fully qualified file name and path</param>
            <returns>True if a change was made to the collection, false otherwise.</returns>
            <remarks>If no item is found with the original file name or new file name an exception will be thrown.
            If an item is found with the new file name and the original file name an exception will be thrown.
            If no item is found with the original file name but one is found with the new file name, the operation
            will be considered successful but return false (indicating no change).</remarks>
        </member>
        <member name="P:Gibraltar.FileReferenceCollection.Count">
            <summary> Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />. </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="P:Gibraltar.FileReferenceCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.IndexOf(Gibraltar.FileReference)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.Insert(System.Int32,Gibraltar.FileReference)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item" /> should be inserted.
            </param>
            <param name="item">
            The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
            </exception>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
            </exception>
        </member>
        <member name="P:Gibraltar.FileReferenceCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">
            The zero-based index of the element to get or set.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
            </exception>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.TryGetValue(System.String,Gibraltar.FileReference@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.ClearItemFoundFlags">
            <summary>
            Called to clear all of the item found flags on existing file references prior to checking for updates.
            </summary>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.RemoveItemsNotFound">
            <summary>
            Remove all items in the collection that weren't found.
            </summary>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Called to raise the CollectionChanged event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.OnItemAdd(Gibraltar.FileReference,System.Int32)">
            <summary>
            Add an item to the collection, optionally specifying the index
            </summary>
            <param name="item"></param>
            <param name="index">-1 to add to the end of the collection, index in the collection to insert at that location.</param>
            <remarks>Raises the CollectionChanged event.</remarks>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.OnItemClear">
            <summary>
            Clear all of the items in the collection
            </summary>
            <remarks>Raises the CollectionChanged event.</remarks>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.OnItemRemove(Gibraltar.FileReference)">
            <summary>
            Called whenever an item has to be removed to the collection
            </summary>
            <param name="item"></param>
            <returns>True if an item was removed, false if none was found.</returns>
            <remarks>Raises the CollectionChanged event.</remarks>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.OnItemSet(System.Int32,Gibraltar.FileReference)">
            <summary>
            Called to set an item to a specific location in the index, removing whatever is there
            </summary>
            <param name="index">The index of an existing item in the collection to set</param>
            <param name="item">The item to place at that location</param>
            <remarks>Raises an event for each collection change (remove and add) that may happen.</remarks>
        </member>
        <member name="M:Gibraltar.FileReferenceCollection.OnDirectoryChange">
            <summary>
            Called when it has been detected that the directory has been updated to determine what the update is.
            </summary>
            <returns>True if a real change was detected, false otherwise</returns>
        </member>
        <member name="T:Gibraltar.FileSystemTools">
            <summary>
            Common routines for manipulating files and directories that extend the .NET framework
            </summary>
        </member>
        <member name="M:Gibraltar.FileSystemTools.SanitizeDirectoryName(System.String,System.Boolean,System.Boolean,System.Char)">
            <summary>
            Sanitize the provided directory name by substituting a specified character for illegal values.
            </summary>
            <param name="directoryName">The name of the directory to sanitize.</param>
            <param name="eliminateSpaces">When true, treat whitespace as an illegal value</param>
            <param name="lowerCaseOnly">When true, ensure the final name is lower case.</param>
            <param name="replaceChar">The character to substitute for illegal values, must be legal.</param>
            <returns>The sanitized directory name.</returns>
        </member>
        <member name="M:Gibraltar.FileSystemTools.SanitizeFileName(System.String,System.Boolean,System.Boolean,System.Char)">
            <summary>
            Sanitize the provided file name (without path) by substituting the specified character for illegal values.
            </summary>
            <param name="fileName">The file name to sanitize</param>
            <param name="eliminateSpaces">When true, treat whitespace as an illegal value</param>
            <param name="lowerCaseOnly">When true, ensure the final name is lower case.</param>
            <param name="replaceChar">The character to substitute for illegal values, must be legal.</param>
            <returns>The sanitized file name.</returns>
        </member>
        <member name="M:Gibraltar.FileSystemTools.MakeFileNamePathUnique(System.String)">
            <summary>
            Ensures that the provided full file name and path is unique, and makes it unique if necessary.
            </summary>
            <param name="path">The candidate path to verify</param>
            <returns>A unique path based on the provided path.</returns>
        </member>
        <member name="M:Gibraltar.FileSystemTools.EnsurePathExists(System.String)">
            <summary>
            Ensure that the path to the provided fully qualified file name exists, creating it if necessary.
            </summary>
            <param name="fileNamePath">A fully qualified file name and path.</param>
        </member>
        <member name="M:Gibraltar.FileSystemTools.MakeFileWriteable(System.String)">
            <summary>
            Checks the attributes on the file and clears read-only attributes.
            </summary>
            <param name="fileNamePath"></param>
        </member>
        <member name="M:Gibraltar.FileSystemTools.GetFileSize(System.String)">
            <summary>
            Find out the size of the file specified
            </summary>
            <param name="fileNamePath"></param>
            <returns>The file size in bytes or 0 if the file is not found.</returns>
        </member>
        <member name="M:Gibraltar.FileSystemTools.GetTempFileStream(System.String@,System.Boolean)">
            <summary>
            Open a temporary file for read and write and return the open FileStream.
            </summary>
            <param name="fileName">The full file name path created.</param>
            <param name="deleteOnClose">True to set the file delete on close, false to leave the file after close
            (caller must delete, rename, etc).</param>
            <returns>An open read-write FileStream.</returns>
        </member>
        <member name="M:Gibraltar.FileSystemTools.GetTempFileStream">
            <summary>
            Open a temporary file for read and write and return the open FileStream which will delete-on-close.
            </summary>
            <returns>An open read-write FileStream which is set to delete on close.</returns>
        </member>
        <member name="M:Gibraltar.FileSystemTools.GetTempFileStream(System.String@)">
            <summary>
            Open a temporary file for read and write and return the open FileStream which will NOT delete-on-close.
            </summary>
            <param name="fileName">The full file name path created.</param>
            <returns>An open read-write FileStream which will NOT delete on close.</returns>
        </member>
        <member name="M:Gibraltar.FileSystemTools.GetTempFileStreamCopy(System.IO.Stream,System.String@,System.Boolean)">
            <summary>
            Copy the content of a Stream into a temporary file opened for read and write and return the open FileStream.
            </summary>
            <param name="contentStream">An open Stream to copy from its current Position to its end.</param>
            <param name="fileName">The full file name path created.</param>
            <param name="deleteOnClose">True to set the file delete on close, false to leave the file after close
            (caller must delete, rename, etc).</param>
            <returns>An open read-write FileStream with a copy of the contentStream.</returns>
        </member>
        <member name="M:Gibraltar.FileSystemTools.GetTempFileStreamCopy(System.IO.Stream)">
            <summary>
            Copy the content of a Stream into a temporary file opened for read and write and return the open FileStream which will delete-on-close.
            </summary>
            <param name="contentStream">An open Stream to copy from its current Position to its end.</param>
            <returns>An open read-write FileStream which is set to delete on close with a copy of the contentStream.</returns>
        </member>
        <member name="M:Gibraltar.FileSystemTools.GetTempFileStreamCopy(System.IO.Stream,System.String@)">
            <summary>
            Copy the content of a Stream into a temporary file opened for read and write and return the open FileStream which will NOT delete-on-close.
            </summary>
            <param name="contentStream">An open Stream to copy from its current Position to its end.</param>
            <param name="fileName">The full file name path created.</param>
            <returns>An open read-write FileStream which will NOT delete on close with a copy of the contentStream.</returns>
        </member>
        <member name="M:Gibraltar.FileSystemTools.StreamContentPump(System.IO.Stream,System.IO.Stream)">
            <summary>
            Pump the remaining contents of one stream at its current Position into another stream at its current Position.
            </summary>
            <param name="sourceStream">The Stream to read from, starting at its current Position.</param>
            <param name="destinationStream">The Stream to write into, starting at its current Position.</param>
            <returns>The total number of bytes copied.</returns>
        </member>
        <member name="M:Gibraltar.FileSystemTools.StreamContentPump(System.IO.Stream,System.IO.Stream,System.Int64)">
            <summary>
            Pump the contents of one stream from its current Position into another stream at its current Position up to a
            maximum byte count.
            </summary>
            <param name="sourceStream">The Stream to read from, starting at its current Position.</param>
            <param name="destinationStream">The Stream to write into, starting at its current Position.</param>
            <param name="maxCount">The maximum count of bytes to copy.  Non-positive count will copy nothing.</param>
            <returns>The total number of bytes copied.</returns>
        </member>
        <member name="M:Gibraltar.FileSystemTools.StreamContentCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copy the entire contents of one stream into another, preserving the source Position.
            </summary>
            <param name="sourceStream">The Stream to read from Position 0, restoring its original Position when completed.</param>
            <param name="destinationStream">The Stream to write into, which will be advanced by the number of bytes written</param>
            <returns>The total number of bytes copied.</returns>
        </member>
        <member name="M:Gibraltar.FileSystemTools.StreamContentCopy(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Copy the entire contents of one stream into another, preserving Position.
            </summary>
            <param name="sourceStream">The Stream to read from Position 0, restoring its original Position when completed.</param>
            <param name="destinationStream">The Stream to write into which may optionally be restored to its original position</param>
            <param name="resetDestinationToOriginalPosition">True to reset the destination stream back to its starting position</param>
            <returns>The total number of bytes copied.</returns>
        </member>
        <member name="M:Gibraltar.FileSystemTools.CopyIfNewer(System.String,System.String)">
            <summary>
            Copy a file to a target location, replacing an existing file if the source is newer.
            </summary>
        </member>
        <member name="T:Gibraltar.GibraltarException">
            <summary>
            Represents errors that occur within Gibraltar during application execution.
            </summary>
            <remarks>This is a base class for any new Exception types we define and for generic exceptions we
            generate.  Custom Exception types defined by Gibraltar should try to derive from GibraltarException
            so that they could be caught as this base type.  This may not currently be consistent, however.
            For more information, see the root class, Exception.</remarks>
        </member>
        <member name="F:Gibraltar.GibraltarException.s_BreakPointGibraltarExceptions">
            <summary>
            A temporary flag to tell us whether to invoke a Debugger.Break() on all of our exceptions.
            </summary>
            <remarks>True enables breakpointing, false disables.  This should probably be replaced with an enum
            to support multiple modes, assuming the basic usage works out.</remarks>
        </member>
        <member name="M:Gibraltar.GibraltarException.BreakPoint">
            <summary>
            Automatically stop debugger like a breakpoint, if enabled.
            </summary>
            <remarks>This will check the state of GibraltarExceptions.s_BreakPointGibraltarExceptions</remarks>
        </member>
        <member name="M:Gibraltar.GibraltarException.#ctor">
            <summary>
            Initializes a new instance of the GibraltarException class.
            </summary>
            <remarks>This constructor initializes the Message property of the new instance to a system-supplied
            message that describes the error and takes into account the current system culture.
            For more information, see the base constructor in Exception.</remarks>
        </member>
        <member name="M:Gibraltar.GibraltarException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the GibraltarException class with a specified error message.
            </summary>
            <param name="message">The error message string.</param>
            <remarks>This constructor initializes the Message property of the new instance using the
            message parameter.  The InnerException property is left as a null reference.
            For more information, see the base constructor in Exception.</remarks>
        </member>
        <member name="M:Gibraltar.GibraltarException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the GibraltarException class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message string.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a
            null reference if no inner exception is specified.</param>
            <remarks>An exception that is thrown as a direct result of a previous exception should include
            a reference to the previous exception in the innerException parameter.
            For more information, see the base constructor in Exception.</remarks>
        </member>
        <member name="T:Gibraltar.GibraltarPacketVersionException">
            <summary>
            This exception indicates that an unexpected packet version was encountered.
            </summary>
            <remarks>This exception occurs when processing a Gibraltar log packet with a version
            which is not understood by this version of Gibraltar.  This usually means that an older
            version of Gibraltar is trying to read a log stream generated by a newer and incompatible
            version of Gibraltar.  For more information, see the root class, Exception.</remarks>
        </member>
        <member name="M:Gibraltar.GibraltarPacketVersionException.#ctor">
            <summary>
            Initializes a new instance of the GibraltarPacketVersionException class.
            </summary>
            <remarks>This constructor initializes the Message property of the new instance to a system-supplied
            message that describes the error and takes into account the current system culture.
            For more information, see the base constructor in Exception.</remarks>
        </member>
        <member name="M:Gibraltar.GibraltarPacketVersionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the GibraltarPacketVersionException class with a specified error message.
            </summary>
            <param name="message">The error message string.</param>
            <remarks>This constructor initializes the Message property of the new instance using the
            message parameter.  The InnerException property is left as a null reference.
            For more information, see the base constructor in Exception.</remarks>
        </member>
        <member name="M:Gibraltar.GibraltarPacketVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the GibraltarPacketVersionException class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message string.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a
            null reference if no inner exception is specified.</param>
            <remarks>An exception that is thrown as a direct result of a previous exception should include
            a reference to the previous exception in the innerException parameter.
            For more information, see the base constructor in Exception.</remarks>
        </member>
        <member name="M:Gibraltar.GibraltarPacketVersionException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the GibraltarPacketVersionException class to a standard
            error message string given a supplied version parameter.
            </summary>
            <param name="version">The unexpected version encountered</param>
            <remarks>This is the preferred way to initialize this exception type, because
            this constructor automatically formats the message string to be "Unexpected version: {0}",
            where {0} is replaced with the provided version argument.</remarks>
        </member>
        <member name="T:Gibraltar.Messaging.CommandPacket">
            <summary>
            A command to be processed by the messaging system.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.CommandPacket.#ctor(Gibraltar.Messaging.MessagingCommand)">
            <summary>
            Create a new command packet for the provided command.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Gibraltar.Messaging.CommandPacket.#ctor(Gibraltar.Messaging.MessagingCommand,System.Object)">
            <summary>
            Create a new command packet for the provided command, with state.
            </summary>
            <param name="command"></param>
            <param name="state"></param>
        </member>
        <member name="P:Gibraltar.Messaging.CommandPacket.Command">
            <summary>
            The command to execute
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.CommandPacket.State">
            <summary>
            Optional.  State arguments for the command
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.FileMessenger.SessionFileNamePrefix(System.String,System.String)">
            <summary>
            Creates the appropriate start of a session file name for a product/application
            </summary>
            <param name="productName"></param>
            <param name="applicationName"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Messaging.FileMessenger.OnCommand(Gibraltar.Messaging.MessagingCommand,System.Object,System.Boolean,Gibraltar.Messaging.MessengerBase.MaintenanceModeRequest@)">
            <summary>
            Inheritors should override this method to implement custom Command handling functionality
            </summary>
            <remarks>Code in this method is protected by a Queue Lock.
            This method is called with the Message Dispatch thread exclusively.
            Some commands (Shutdown, Flush) are handled by MessengerBase and redirected into specific
            method calls.</remarks>
            <param name="command">The MessagingCommand enum value of this command.</param>
            <param name="state"></param>
            <param name="writeThrough">Whether write-through (synchronous) behavior was requested.</param>
            <param name="maintenanceRequested">Specifies whether maintenance mode has been requested and the type (source) of that request.</param>
        </member>
        <member name="M:Gibraltar.Messaging.FileMessenger.OnInitialize(Loupe.Configuration.IMessengerConfiguration)">
            <summary>
            Inheritors should override this method to implement custom initialize functionality.
            </summary>
            <remarks>This method will be called exactly once before any call to OnFlush or OnWrite is made.  
            Code in this method is protected by a Thread Lock.
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.FileMessenger.OnWrite(Gibraltar.Messaging.IMessengerPacket,System.Boolean,Gibraltar.Messaging.MessengerBase.MaintenanceModeRequest@)">
            <summary>
            Inheritors must override this method to implement their custom message writing functionality.
            </summary>
            <remarks>Code in this method is protected by a Queue Lock
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.FileMessenger.OnExit">
            <summary>
            Inheritors should override this method to implement custom Exit functionality
            </summary>
            <remarks>Code in this method is protected by a Queue Lock.
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.FileMessenger.OnFlush(Gibraltar.Messaging.MessengerBase.MaintenanceModeRequest@)">
            <summary>
            Inheritors should override this method to implement custom flush functionality.
            </summary>
            <remarks>Code in this method is protected by a Queue Lock.        
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.FileMessenger.OnMaintenance">
            <summary>
            Inheritors should override this to implement a periodic maintenance capability
            </summary>
            <remarks>Maintenance is invoked by a return value from the OnWrite method.  When invoked,
            this method is called and all log messages are buffered for the duration of the maintenance period.
            Once this method completes, normal log writing will resume.  During maintenance, any queue size limit is ignored.
            This method is not called with any active locks to allow messages to continue to queue during maintenance.  
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.FileMessenger.OnClose">
            <summary>
            Inheritors should override this method to implement custom Close functionality
            </summary>
            <remarks>Code in this method is protected by a Queue Lock.
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.FileMessenger.GetSessionFileLock">
            <summary>
            Get the unique lock for the active session, to be held until the session exits.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.FileMessenger.ReleaseSessionFileLock">
            <summary>
            Release the unique lock for the active session, to be called when the FileMessenger gets disposed.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.FileMessenger.ScheduleRepositoryMaintenance(System.Int32,System.Int32)">
            <summary>
            Schedule repository maintenance to happen at the next opportunity if maintenance is enabled.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.FileMessenger.OpenFile">
            <summary>
            Open a new output file.
            </summary>
            <remarks>Any existing file will be closed.</remarks>
        </member>
        <member name="T:Gibraltar.Messaging.ICachedMessengerPacket">
            <summary>
            This interface is required to be a publishable cached packet
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.ICachedMessengerPacket.IsHeader">
            <summary>
            Indicates if this packet is part of the session header and should be presented with other header packets.
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.IMessenger">
            <summary>
            Implement this interface to be a packet sink for the messaging system. 
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.IMessenger.Name">
            <summary>
            A name for this messenger
            </summary>
            <remarks>The name is unique and specified by the publisher during initialization.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.IMessenger.Caption">
            <summary>
            A display caption for this messenger
            </summary>
            <remarks>End-user display caption for this messenger.  Captions are typically
            not unique to a given instance of a messenger.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.IMessenger.Description">
            <summary>
            A display description for this messenger
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Gibraltar.Messaging.IMessenger.ConfigurationUpdated(Loupe.Configuration.IMessengerConfiguration)">
            <summary>
            Called by the publisher every time the configuration has been updated.
            </summary>
            <param name="configuration">The configuration block for this messenger</param>
        </member>
        <member name="M:Gibraltar.Messaging.IMessenger.Initialize(Gibraltar.Messaging.Publisher,Loupe.Configuration.IMessengerConfiguration)">
            <summary>
            Initialize the messenger so it is ready to accept packets.
            </summary>
            <param name="publisher">The publisher that owns the messenger</param>
            <param name="configuration">The configuration block for this messenger</param>
        </member>
        <member name="M:Gibraltar.Messaging.IMessenger.Write(Gibraltar.Messaging.IMessengerPacket,System.Boolean)">
            <summary>
            Write the provided packet to this messenger.
            </summary>
            <remarks>The packet may depend on other packets.  If the messenger needs those packets they are available from the publisher's packet cache.</remarks>
            <param name="packet">The packet to write through the messenger.</param>
            <param name="writeThrough">True if the information contained in packet should be committed synchronously, false if the messenger should use write caching (if available).</param>
        </member>
        <member name="T:Gibraltar.Messaging.IMessengerPacket">
            <summary>
            This interface is required to be a publishable packet
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.IMessengerPacket.Sequence">
            <summary>
            The unique sequence number of this packet in the session
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.IMessengerPacket.Timestamp">
            <summary>
            The timestamp of this packet in the session
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.IUserPacket">
            <summary>
            Identifies a packet that can be associated with a specific user
            </summary>
            <remarks>Implemented by packets that represent user-initiated data where
            the user principal should be captured</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.IUserPacket.Principal">
            <summary>
            Optional.  The user principal this packet was initiated by.
            </summary>
            <remarks>This is set when the packet is queued</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.IUserPacket.UserPacket">
            <summary>
            Optional.  The Application User to attribute this packet to.
            </summary>
            <remarks>Internal Infrastructure.  This is set during the publish phase</remarks>
        </member>
        <member name="T:Gibraltar.Messaging.LocalServerDiscoveryFile">
            <summary>
            IP Configuration information for a live stream proxy running on the local computer
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.LocalServerDiscoveryFile.Extension">
            <summary>
            The standard file extension for a discovery file
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.LocalServerDiscoveryFile.FileFilter">
            <summary>
            A file matching filter for discovery files
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.LocalServerDiscoveryFile.#ctor(System.String)">
            <summary>
            Load the specified file as a local server discovery file
            </summary>
            <param name="fileNamePath">The fully qualified file to load</param>
        </member>
        <member name="M:Gibraltar.Messaging.LocalServerDiscoveryFile.#ctor(System.Int32,System.Int32,System.Int32,System.IO.FileStream)">
            <summary>
            Create a new publish file for the local computer
            </summary>
            <param name="publisher"></param>
            <param name="subscriber"></param>
            <param name="processId"></param>
            <param name="destination"></param>
        </member>
        <member name="P:Gibraltar.Messaging.LocalServerDiscoveryFile.PublisherPort">
            <summary>
            The TCP port to publish information to (for agents)
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.LocalServerDiscoveryFile.SubscriberPort">
            <summary>
            The TCP port for subscribers to get information from (for analyst)
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.LocalServerDiscoveryFile.ProcessId">
            <summary>
            The process Id of the socket proxy host.
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.LocalServerDiscoveryFile.IsAlive">
            <summary>
            Indicates if the socket proxy host is still running
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.LocalServerDiscoveryFile.FileNamePath">
            <summary>
            The fully qualified file name and path for the discovery file
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.LocalServerDiscoveryFileMonitor">
            <summary>
            Monitors the discovery directory of the local file system for discovery file changes.
            </summary>
        </member>
        <member name="E:Gibraltar.Messaging.LocalServerDiscoveryFileMonitor.FileChanged">
            <summary>
            Event raised when a file change is detected.
            </summary>
        </member>
        <member name="E:Gibraltar.Messaging.LocalServerDiscoveryFileMonitor.FileDeleted">
            <summary>
            Event raised when a file change is detected.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.LocalServerDiscoveryFileMonitor.Start">
            <summary>
            Begin monitoring for file changes
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.LocalServerDiscoveryFileMonitor.Stop">
            <summary>
            Stop monitoring for file changes
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.LocalServerDiscoveryFileMonitor.OnFileChanged(Gibraltar.Messaging.LocalServerDiscoveryFileEventArgs)">
            <summary>
            Raises the FileChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Gibraltar.Messaging.LocalServerDiscoveryFileMonitor.OnFileDeleted(Gibraltar.Messaging.LocalServerDiscoveryFileEventArgs)">
            <summary>
            Raises the FileDeleted event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Gibraltar.Messaging.LocalServerDiscoveryFileMonitor.AsyncProcessQueue(System.Object)">
            <summary>
            Called from the thread pool to process all of the items in the queue
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Gibraltar.Messaging.LocalServerDiscoveryFileEventArgs">
            <summary>
            Event arguments for LocalServerDiscoveryFile events.
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.LocalServerDiscoveryFileEventArgs.File">
            <summary>
            The file that was affected
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.LocalServerDiscoveryFileEventArgs.#ctor(Gibraltar.Messaging.LocalServerDiscoveryFile)">
            <summary>
            Create a new event argument
            </summary>
            <param name="file"></param>
        </member>
        <member name="T:Gibraltar.Messaging.LocalServerDiscoveryFileEventHandler">
            <summary>
            Standard event handler delegate for the LocalSErverDiscoveryFile Event arguments
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Gibraltar.Messaging.LogMessageNotifyEventArgs">
            <summary>
            EventArgs for LogMessage notify events.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.LogMessageNotifyEventArgs.Message">
            <summary>
            The ILogMessage being notified.
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.MessagingCommand">
            <summary>
            Different types of commands.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.MessagingCommand.None">
            <summary>
            Not a command.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.MessagingCommand.Flush">
            <summary>
            Flush the queue
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.MessagingCommand.CloseFile">
            <summary>
            Close the current file (and open a new one because the session isn't ending)
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.MessagingCommand.ExitMode">
            <summary>
            Alert the messaging system to make preparations for the application exiting.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.MessagingCommand.CloseMessenger">
            <summary>
            Close the messenger (and don't restart it)
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.MessagingCommand.ShowLiveView">
            <summary>
            Cause the Gibraltar Live View form to be (generated if necessary and) shown.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.MessagingCommand.OpenRemoteViewer">
            <summary>
            Causes the network messenger to connect out to a remote viewer
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.MessengerBase">
            <summary>
            A baseline implementation of a messenger that provides common messenger functionality.
            </summary>
            <remarks>This implementation is somewhat more elaborate than necessary because it maintains
            a design that allows for multiple threads queuing requests, which is why it needs an overflow
            queue instead of just blocking as soon as it overflows.  This can be simplified, but lets make sure
            we can test this out first.</remarks>
        </member>
        <member name="F:Gibraltar.Messaging.MessengerBase.LogCategory">
            <summary>
            The log category to use for log messages in this class
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new dispatch queue
            </summary>
            <param name="name">A display name for this messenger to differentiate it from other messengers</param>
            <param name="supportsWriteThrough">True if the messenger supports synchronous (write through) processing</param>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.MessageDispatchMain">
            <summary>
            The main method of the message dispatch thread.  
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.DispatchPacket(Gibraltar.Messaging.PacketEnvelope,Gibraltar.Messaging.MessengerBase.MaintenanceModeRequest@)">
            <summary>
            Send the packet via our messenger and add it to our packet cache, if necessary.
            </summary>
            <param name="packetEnvelope"></param>
            <param name="maintenanceRequested">Specifies whether maintenance mode has been requested after this packet
            and the type (source) of that request.</param>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.ActionOnCommand(Gibraltar.Messaging.MessagingCommand,System.Object,System.Boolean,Gibraltar.Messaging.MessengerBase.MaintenanceModeRequest@)">
            <summary>
            Wraps calling the OnCommand() method that derived classes use to provide common exception handling.
            </summary>
            <param name="command">The MessagingCommand enum value of this command.</param>
            <param name="state">Optional.  Command arguments</param>
            <param name="writeThrough">Whether write-through (synchronous) behavior was requested.</param>
            <param name="maintenanceRequested">Specifies whether the handler requested maintenance mode and the type (source) of that request.</param>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.ActionOnExit">
            <summary>
            Wraps calling the OnExit() method that derived classes use to provide common exception handling.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.ActionOnClose">
            <summary>
            Wraps calling the OnClose() method that derived classes use to provide common exception handling.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.ActionOnConfigurationUpdate(Loupe.Configuration.IMessengerConfiguration)">
            <summary>
            Wraps calling the OnConfigurationUpdate() method that derived classes use to provide common exception handling.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.ActionOnFlush(Gibraltar.Messaging.MessengerBase.MaintenanceModeRequest@)">
            <summary>
            Wraps calling the OnFlush() method that derived classes use to provide common exception handling.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.ActionOnInitialize(Loupe.Configuration.IMessengerConfiguration)">
            <summary>
            Wraps calling the OnInitialize() method that derived classes use to provide common exception handling.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.ActionOnMaintenance">
            <summary>
            Wraps calling the OnMaintenance() method that derived classes use to provide common exception handling.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.ActionOnOverflow">
            <summary>
            Wraps calling the OnOverflow() method that derived classes use to provide common exception handling.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.ActionOnOverflowRestore">
            <summary>
            Wraps calling the OnOverflowRestore() method that derived classes use to provide common exception handling.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.ActionOnWrite(Gibraltar.Messaging.IMessengerPacket,System.Boolean,Gibraltar.Messaging.MessengerBase.MaintenanceModeRequest@)">
            <summary>
            Wraps calling the OnWrite() method that derived classes use to provide common exception handling.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.UpdateNextFlushDue">
            <summary>
            Sets the next flush due date &amp; time based on the current time and the auto flush interval.
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.MessengerBase.MaintenanceModeRequest">
            <summary>
            Specifies whether maintenance mode has been requested and the type (source) of that request.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.MessengerBase.MaintenanceModeRequest.None">
            <summary>
            No maintenance is being requested.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.MessengerBase.MaintenanceModeRequest.Regular">
            <summary>
            Maintenance has been triggered by size or time thresholds.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.MessengerBase.MaintenanceModeRequest.Explicit">
            <summary>
            Maintenance has been explicitly requested by the client.
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.MessengerBase.AutoFlush">
            <summary>
            Indicates whether the messenger base should automatically flush the derived messenger.
            </summary>
            <remarks>When true the derived messenger will automatically be asked to flush based on the auto flush interval.
            If the messenger is manually flushed due to an external flush request the auto-flush will take that into account
            and keep waiting.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.MessengerBase.AutoFlushInterval">
            <summary>
            The number of seconds since the last flush to trigger an automatic flush
            </summary>
            <remarks>This only applies when AutoFlush is true.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.MessengerBase.Publisher">
            <summary>
            The publisher that created this messenger.
            </summary>
            <remarks>This property does not require any locks.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.MessengerBase.Exiting">
            <summary>
            True once the messenger is being closed or application is exiting, false otherwise
            </summary>
            <remarks>This property is not thread-safe; to guarantee thread safety callers should have the Queue Lock.
            This property indicates a normal application exit condition.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.MessengerBase.Exited">
            <summary>
            True once the messenger is ready for the application to exit, false otherwise
            </summary>
            <remarks>This property is not thread-safe; to guarantee thread safety callers should have the Queue Lock.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.MessengerBase.Closed">
            <summary>
            True once the messenger has been closed, false otherwise
            </summary>
            <remarks>This property is not thread-safe; to guarantee thread safety callers should have the Queue Lock.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.MessengerBase.Initialized">
            <summary>
            True if the messenger has been initialized.
            </summary>
            <remarks>This property is not thread-safe; to guarantee thread safety callers should have the Thread Lock.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.MessengerBase.ForceWriteThrough">
            <summary>
            True if the current configuration forces write through mode.
            </summary>
            <remarks>This property is not thread-safe; to guarantee thread safety callers should have the Thread Lock.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.MessengerBase.QueueLock">
            <summary>
            Synchronization object for the message queue.
            </summary>
            <remarks>In general it should not be necessary to do your own locking provided that you work within the locks provided
            by overrideable methods.  If you get an object lock, you must use the Monitor.Pulse command to notify other threads 
            that you are done with the lock.  Failure to do so may cause your messenger to be unresponsive.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.MessengerBase.ThreadLock">
            <summary>
            Synchronization object for the dispatch thread.
            </summary>
            <remarks>In general it should not be necessary to do your own locking provided that you work within the locks provided
            by overrideable methods.  If you get an object lock, you must use the Monitor.Pulse command to notify other threads 
            that you are done with the lock.  Failure to do so may cause your messenger to be unresponsive.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.MessengerBase.OverflowMode">
            <summary>
            The behavior of the messenger when there are too many messages in the queue
            </summary>
            <remarks>
            Changes take effect the next time a message is published to the messenger.
            </remarks>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.EnsureInitialized">
            <summary>
            Perform first-time initialization.  Requires the caller have the Thread Lock.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.EnsureMessageDispatchThreadIsValid">
            <summary>
            Makes sure that there is an active, valid queue dispatching thread
            </summary>
            <remarks>This is a thread-safe method that acquires the message dispatch thread lock on its own, so
            the caller need not have that lock prior to calling this method.  If the message dispatch thread has
            failed a new one will be started.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.EnsureOpen(System.String)">
            <summary>
            Throws an exception if the messenger is closed.  Useful on guarding public methods
            </summary>
            <remarks>This method does not check that the messenger is initialized (since that happens on the messenger's internal thread)</remarks>
            <param name="caller">The string name of the calling method to attribute the exception to.</param>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.QueuePacket(Gibraltar.Messaging.IMessengerPacket,System.Boolean)">
            <summary>
            Perform the actual package queuing and wait for it to be committed.  
            </summary>
            <remarks>This will be done within a Queue Lock.</remarks>
            <param name="packet">The packet to be queued</param>
            <param name="writeThrough">True if the call should block the current thread until the packet has been committed, false otherwise.</param>
            <returns>The packet envelope for the packet that was queued.</returns>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.WaitOnPacket(Gibraltar.Messaging.PacketEnvelope)">
            <summary>
            Suspends the calling thread until the provided packet is committed.
            </summary>
            <remarks>Even if the envelope is not set to write through the method will not return until
            the packet has been committed.  This method performs its own synchronization and should not be done within a lock.</remarks>
            <param name="packetEnvelope">The packet that must be committed</param>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.WaitOnPending(Gibraltar.Messaging.PacketEnvelope)">
            <summary>
            Suspends the calling thread until the provided packet is no longer pending.
            </summary>
            <remarks>This method performs its own synchronization and should not be done within a lock.</remarks>
            <param name="packetEnvelope">The packet that must be submitted</param>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.OnCommand(Gibraltar.Messaging.MessagingCommand,System.Object,System.Boolean,Gibraltar.Messaging.MessengerBase.MaintenanceModeRequest@)">
            <summary>
            Inheritors should override this method to implement custom Command handling functionality
            </summary>
            <remarks>Code in this method is protected by a Queue Lock.
            This method is called with the Message Dispatch thread exclusively.
            Some commands (Shutdown, Flush) are handled by MessengerBase and redirected into specific
            method calls.</remarks>
            <param name="command">The MessagingCommand enum value of this command.</param>
            <param name="state">Optional.  Command arguments</param>
            <param name="writeThrough">Whether write-through (synchronous) behavior was requested.</param>
            <param name="maintenanceRequested">Specifies whether maintenance mode has been requested and the type (source) of that request.</param>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.OnExit">
            <summary>
            Inheritors should override this method to implement custom Exit functionality
            </summary>
            <remarks>Code in this method is protected by a Queue Lock.
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.OnClose">
            <summary>
            Inheritors should override this method to implement custom Close functionality
            </summary>
            <remarks>Code in this method is protected by a Queue Lock.
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.OnConfigurationUpdate(Loupe.Configuration.IMessengerConfiguration)">
            <summary>
            Inheritors should override this method to implement custom Configuration Update functionality.
            </summary>
            <remarks>Code in this method is protected by a Thread Lock.
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.OnFlush(Gibraltar.Messaging.MessengerBase.MaintenanceModeRequest@)">
            <summary>
            Inheritors should override this method to implement custom flush functionality.
            </summary>
            <param name="maintenanceRequested">Specifies whether maintenance mode has been requested and the type (source) of that request.</param>
            <remarks>Code in this method is protected by a Queue Lock.        
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.OnInitialize(Loupe.Configuration.IMessengerConfiguration)">
            <summary>
            Inheritors should override this method to implement custom initialize functionality.
            </summary>
            <remarks>This method will be called exactly once before any call to OnFlush or OnWrite is made.  
            Code in this method is protected by a Thread Lock.
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.OnMaintenance">
            <summary>
            Inheritors should override this to implement a periodic maintenance capability
            </summary>
            <remarks>Maintenance is invoked by a return value from the OnWrite method.  When invoked,
            this method is called and all log messages are buffered for the duration of the maintenance period.
            Once this method completes, normal log writing will resume.  During maintenance, any queue size limit is ignored.
            This method is not called with any active locks to allow messages to continue to queue during maintenance.  
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.OnOverflow">
            <summary>
            Inheritors can override this method to implement custom functionality when the main queue over flows.
            </summary>
            <remarks>This method is called when the first packet is placed in the overflow queue.  It will not be
            called again unless there is a call to OnOverflowRestore, indicating that the overflow has been resolved.
            Code in this method is protected by a Queue Lock.
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.OnOverflowRestore">
            <summary>
            Inheritors can override this method to implement custom functionality when the main queue is no longer in overflow.
            </summary>
            <remarks>This method is called when there are no more packets in the overflow queue  It will not be
            called again unless there is a call to OnOverflowRestore, indicating that the overflow has been resolved.
            Code in this method is protected by a Queue Lock.
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.OnWrite(Gibraltar.Messaging.IMessengerPacket,System.Boolean,Gibraltar.Messaging.MessengerBase.MaintenanceModeRequest@)">
            <summary>
            Inheritors must override this method to implement their custom message writing functionality.
            </summary>
            <remarks>Code in this method is protected by a Queue Lock
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.MessengerBase.Caption">
            <summary>
            A display caption for this messenger
            </summary>
            <remarks>End-user display caption for this messenger.  Captions are typically
            not unique to a given instance of a messenger.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.MessengerBase.Description">
            <summary>
            A display description for this messenger
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.ConfigurationUpdated(Loupe.Configuration.IMessengerConfiguration)">
            <summary>
            Called by the publisher every time the configuration has been updated.
            </summary>
            <param name="configuration">The unique name for this messenger.</param>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.
            </summary>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.Equals(Gibraltar.Messaging.IMessenger)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.Initialize(Gibraltar.Messaging.Publisher,Loupe.Configuration.IMessengerConfiguration)">
            <summary>
            Initialize the messenger so it is ready to accept packets.
            </summary>
            <param name="publisher">The publisher that owns the messenger</param>
            <param name="configuration">The unique name for this messenger.</param>
        </member>
        <member name="P:Gibraltar.Messaging.MessengerBase.Name">
            <summary>
            A name for this messenger
            </summary>
            <remarks>The name is unique and specified by the publisher during initialization.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.MessengerBase.Write(Gibraltar.Messaging.IMessengerPacket,System.Boolean)">
            <summary>
            Write the provided packet to this messenger.
            </summary>
            <remarks>The packet may depend on other packets.  If the messenger needs those packets they are available from the publisher's packet cache.</remarks>
            <param name="packet">The packet to write through the messenger.</param>
            <param name="writeThrough">True if the information contained in packet should be committed synchronously, false if the messenger should use write caching (if available).</param>
        </member>
        <member name="T:Gibraltar.Messaging.OverflowMode">
            <summary>
            The behavior of the messenger when there are too many messages in the queue.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.OverflowMode.Default">
            <summary>
            Do the default overflow behavior (OverflowQueueThenBlock)
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.OverflowMode.OverflowQueueThenBlock">
            <summary>
            Use the overflow queue then block if there are too many messages
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.OverflowMode.Drop">
            <summary>
            Drop the newest messages instead of using the overflow queue
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.NetworkMessenger.LogCategory">
            <summary>
            The log category to use for messages in this messenger
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkMessenger.#ctor">
            <summary>
            Create a new network messenger
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.NetworkMessenger.HeaderPackets">
            <summary>
            The list of cached packets that should be in every stream before any other packet.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkMessenger.StartLiveView(System.Guid,System.Guid,System.Int64)">
            <summary>
            Create a new outbound live viewer to the default server
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkMessenger.StartLiveView(Gibraltar.Server.Client.NetworkConnectionOptions,System.Guid,System.Guid,System.Int64)">
            <summary>
            Create a new outbound live viewer to the default server
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkMessenger.SendToServer(Gibraltar.Messaging.Net.SendSessionCommandMessage)">
            <summary>
            Send the matching sessions to the server
            </summary>
            <param name="sendSessionCommand"></param>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkMessenger.SendSummary">
            <summary>
            Send the latest summary to the server
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkMessenger.SendSummary(Gibraltar.Server.Client.LiveSessionPublisher)">
            <summary>
            Send the latest summary to the specified publisher
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkMessenger.ActivateWriter(Gibraltar.Messaging.NetworkWriter,System.Int64)">
            <summary>
            Register the network writer to receive information and get it in sync with the current packet stream
            </summary>
            <remarks>If the network writer was previously activated then it will be re-activated.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkMessenger.OnInitialize(Loupe.Configuration.IMessengerConfiguration)">
            <summary>
            Inheritors should override this method to implement custom initialize functionality.
            </summary>
            <remarks>This method will be called exactly once before any call to OnFlush or OnWrite is made.  
            Code in this method is protected by a Thread Lock.
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkMessenger.OnClose">
            <summary>
            Inheritors should override this method to implement custom Close functionality
            </summary>
            <remarks>Code in this method is protected by a Queue Lock.
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkMessenger.OnWrite(Gibraltar.Messaging.IMessengerPacket,System.Boolean,Gibraltar.Messaging.MessengerBase.MaintenanceModeRequest@)">
            <summary>
            Inheritors must override this method to implement their custom message writing functionality.
            </summary>
            <remarks>Code in this method is protected by a Queue Lock
            This method is called with the Message Dispatch thread exclusively.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkMessenger.AttemptRemoteConnectionAsync">
            <summary>
            Asynchronously verify that we are connected to a remote proxy if we should be.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkMessenger.AsyncEnsureRemoteConnection">
            <summary>
            Make sure we have an outbound proxy connection.
            </summary>
            <remarks>Intended for asynchronous execution from the thread pool.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkMessenger.CloseClient(Gibraltar.Server.Client.LiveSessionPublisher)">
            <summary>
            Closes all outbound connections related to the current live agent client
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkMessenger.DropDeadConnections">
            <summary>
            Dispose any connections that we discovered are no longer valid.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkMessenger.RegisterWriter(Gibraltar.Messaging.NetworkWriter)">
            <summary>
            Register a new writer for all events
            </summary>
            <param name="newWriter"></param>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkMessenger.UnregisterWriter(Gibraltar.Messaging.NetworkWriter)">
            <summary>
            Unregister the writer from all events and dispose it
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Gibraltar.Messaging.NetworkWriter">
            <summary>
            Used by the agent to write session data to a network socket
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkWriter.#ctor(Gibraltar.Messaging.NetworkMessenger,Gibraltar.Server.Client.NetworkConnectionOptions,System.Guid,System.Guid,System.Int64)">
            <summary>
            Create a new network writer for a remote server
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkWriter.#ctor(Gibraltar.Messaging.NetworkMessenger,Gibraltar.Server.Client.NetworkConnectionOptions,System.Guid,System.Guid,System.Int64,System.Int32,System.Int32)">
            <summary>
            Create a new network writer for a remote server
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkWriter.#ctor(Gibraltar.Messaging.NetworkMessenger,System.Net.Sockets.TcpClient,System.Guid,System.Guid,System.Int64)">
            <summary>
            Create a new network writer for a connected socket
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkWriter.#ctor(Gibraltar.Messaging.NetworkMessenger,System.Net.Sockets.TcpClient,System.Guid,System.Guid,System.Int64,System.Int32,System.Int32)">
            <summary>
            Create a new network writer for a connected socket
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkWriter.Write(Gibraltar.Messaging.IMessengerPacket[])">
            <summary>
            Write the provided packet to the client stream (synchronously)
            </summary>
            <param name="packets"></param>
            <remarks>Throws exceptions if there is a connection failure.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkWriter.Write(Gibraltar.Messaging.IMessengerPacket)">
            <summary>
            Write the provided packet to the client stream (synchronously)
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkWriter.CanWritePacket(Gibraltar.Messaging.IMessengerPacket)">
            <summary>
            Indicates if we can write the specified packet.
            </summary>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkWriter.Connect">
            <summary>
            Implemented to complete the protocol connection
            </summary>
            <returns>True if a connection was successfully established, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkWriter.TransferData">
            <summary>
            Implemented to transfer data on an established connection
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.NetworkEventArgs">
            <summary>
            Event arguments for NetworkWriter events
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.NetworkEventArgs.#ctor(System.String)">
            <summary>
            Create a new network event arguments object
            </summary>
            <param name="description"></param>
        </member>
        <member name="P:Gibraltar.Messaging.NetworkEventArgs.Description">
            <summary>
            An extended description of the cause of the event
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.NetworkEventHandler">
            <summary>
            Delegate for handling NetworkWriter events
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.Net.ClockDriftMessage">
            <summary>
            Used to determine the latency and relative clock drift of a connection
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.ClockDriftMessage.#ctor(System.Guid)">
            <summary>
            Create a new clock drift message for the specified agent
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Gibraltar.Messaging.Net.ClockDriftMessage.Id">
            <summary>
            The session Id of the endpoint we're identifying clock drift for
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.ClockDriftMessage.OriginatorTimestamp">
            <summary>
            The timestamp the original request was created on the source end
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.ClockDriftMessage.DestinationTimestamp">
            <summary>
            The timestamp of the destination when it received the message
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.ClockDriftMessage.ClockDrift">
            <summary>
            The clock drift between the agent and the server, discounting latency
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.ClockDriftMessage.Latency">
            <summary>
            The estimated latency in the connection (used to calculate true clock drift)
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.ClockDriftMessage.CalculateValues">
            <summary>
            Locks in the latency and drift calculations when called by the originator after a round trip.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.ClockDriftMessage.OnWrite(System.IO.Stream)">
            <summary>
            Write the packet to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.ClockDriftMessage.OnRead(System.IO.Stream)">
            <summary>
            Read packet data from the stream
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.Net.GetSessionHeadersCommandMessage">
            <summary>
            Command for retrieving the list of sesion headers
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.GetSessionHeadersCommandMessage.#ctor">
            <summary>
            create a new session headers command message
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.GetSessionHeadersCommandMessage.OnWrite(System.IO.Stream)">
            <summary>
            Write the packet to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.GetSessionHeadersCommandMessage.OnRead(System.IO.Stream)">
            <summary>
            Read packet data from the stream
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.Net.IRemoteViewerConnection">
            <summary>
            Provides an interface to send network packets to the remote computer
            </summary>
        </member>
        <member name="E:Gibraltar.Messaging.Net.IRemoteViewerConnection.MessageAvailable">
            <summary>
            Raised each time a new log message is available.
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.IRemoteViewerConnection.HasCorruptData">
            <summary>
            Indicates whether a session had errors during rehydration and has lost some packets.
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.IRemoteViewerConnection.PacketsLostCount">
            <summary>
            Indicates how many packets were lost due to errors in rehydration.
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.IRemoteViewerConnection.IsConnected">
            <summary>
            Indicates if the remote viewer is currently connected.
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.IRemoteViewerConnection.Id">
            <summary>
            The session id
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.IRemoteViewerConnection.Connect">
            <summary>
            Attempt to connect the live session data stream
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.IRemoteViewerConnection.SendToServer(Loupe.Extensibility.Data.SessionCriteria)">
            <summary>
            Sends a request to the remote agent to package and submit its data
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:Gibraltar.Messaging.Net.IRemoteViewerConnection.GetMessageBuffer">
            <summary>
            Load the set of log messages still in the connection buffer
            </summary>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Messaging.Net.MessageAvailableEventArgs">
            <summary>
            The event arguments for the RemoteCommandWriter MessageAvailable event
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.MessageAvailableEventArgs.#ctor(Loupe.Extensibility.Data.ILogMessage)">
            <summary>
            Create a new log message event
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Gibraltar.Messaging.Net.MessageAvailableEventArgs.Message">
            <summary>
            The message that is now available.
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.Net.MessageAvailableEventHandler">
            <summary>
            The delegate for the RemoteCommandWriter MessageAvailable event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Gibraltar.Messaging.Net.LiveViewStartCommandMessage">
            <summary>
            Requests a new live view stream
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.LiveViewStartCommandMessage.#ctor(System.Guid,System.Guid,System.Guid,System.Int64)">
            <summary>
            Create a new message with the specified session id and optionally sequence offset
            </summary>
            <param name="repositoryId">The unique Id of the client for all related activities</param>
            <param name="channelId">A unique id for this request to identify a conversation pair</param>
            <param name="sessionId">The session that is being requested to live view</param>
            <param name="sequenceOffset">The packet index to start at</param>
        </member>
        <member name="P:Gibraltar.Messaging.Net.LiveViewStartCommandMessage.ChannelId">
            <summary>
            A unique id for this request to identify a conversation pair
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.LiveViewStartCommandMessage.SequenceOffset">
            <summary>
            The last sequence number that was received previously to enable restart at the right point in the stream
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.LiveViewStartCommandMessage.SessionId">
            <summary>
            The Id of the session to be viewed
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.LiveViewStartCommandMessage.RepositoryId">
            <summary>
            The unique Id of the client for all related activities
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.LiveViewStartCommandMessage.Validate">
            <summary>
            Verify the command is fully populated and 
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.LiveViewStartCommandMessage.OnWrite(System.IO.Stream)">
            <summary>
            Write the packet to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.LiveViewStartCommandMessage.OnRead(System.IO.Stream)">
            <summary>
            Read packet data from the stream
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.Net.LiveViewStopCommandMessage">
            <summary>
            Indicates the live view session for the specified session Id be terminated
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.LiveViewStopCommandMessage.#ctor(System.Guid,System.Guid)">
            <summary>
            Create a command to stop the specified live view channel
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.LiveViewStopCommandMessage.ChannelId">
            <summary>
            The channel Id of the viewer
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.LiveViewStopCommandMessage.SessionId">
            <summary>
            The session Id that is being viewed
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.LiveViewStopCommandMessage.OnWrite(System.IO.Stream)">
            <summary>
            Write the packet to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.LiveViewStopCommandMessage.OnRead(System.IO.Stream)">
            <summary>
            Read packet data from the stream
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.Net.NetworkClient">
            <summary>
            The base class for different network clients that talk to a server.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.Net.NetworkClient.LogCategory">
            <summary>
            The log category used for network client operations
            </summary>
        </member>
        <member name="E:Gibraltar.Messaging.Net.NetworkClient.Connected">
            <summary>
            Event raised whenever the client establishes a connection to a server
            </summary>
        </member>
        <member name="E:Gibraltar.Messaging.Net.NetworkClient.Disconnected">
            <summary>
            Event raised whenever the client looses contact with the server
            </summary>
        </member>
        <member name="E:Gibraltar.Messaging.Net.NetworkClient.Closed">
            <summary>
            Raised when a connection closes normally
            </summary>
        </member>
        <member name="E:Gibraltar.Messaging.Net.NetworkClient.Failed">
            <summary>
            Raised when a connection that did open fails
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.#ctor(Gibraltar.Server.Client.NetworkConnectionOptions,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Create a new network client to the specified endpoint
            </summary>
            <param name="options"></param>
            <param name="retryConnections">If true then network connections will automatically be retried (instead of the client being considered failed)</param>
            <param name="majorVersion">Major version of the serialization protocol</param>
            <param name="minorVersion">Minor version of the serialization protocol</param>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.#ctor(System.Net.Sockets.TcpClient,System.Int32,System.Int32)">
            <summary>
            Create a new network client using the existing socket.
            </summary>
            <param name="tcpClient">Already connected TCP Socket</param>
            <param name="majorVersion">Major version of the serialization protocol</param>
            <param name="minorVersion">Minor version of the serialization protocol</param>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.Start">
            <summary>
            Start the network client
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.Close">
            <summary>
            Stop reading from the network and prepare to exit
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.NetworkClient.IsConnected">
            <summary>
            Indicates if the remote viewer is currently connected.
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.NetworkClient.IsFailed">
            <summary>
            Indicates if the writer experienced a network failure
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.NetworkClient.IsClosed">
            <summary>
            Indicates if the writer was explicitly closed.
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.NetworkClient.HasCorruptData">
            <summary>
            Indicates whether a session had errors during rehydration and has lost some packets.
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.NetworkClient.PacketsLostCount">
            <summary>
            Indicates how many packets were lost due to errors in rehydration.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.GetOptions">
            <summary>
            Get a copy of the network connection options used by this client
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.Dispose(System.Boolean)">
            <summary>
            Dispose managed objects
            </summary>
            <param name="releaseManaged"></param>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.Connect">
            <summary>
            Implemented to complete the protocol connection
            </summary>
            <returns>True if a connection was successfully established, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.TransferData">
            <summary>
            Implemented to transfer data on an established connection
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.OnClose">
            <summary>
            Called when a valid connection is being administratively closed
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.OnConnected">
            <summary>
            Called to raise the connected event when a connection has been established
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.OnDisconnected">
            <summary>
            Called to raise the disconnected event when a connection has been lost
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.OnClosed">
            <summary>
            Raise the closed event
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.OnFailed(System.String)">
            <summary>
            Raise the failed event
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.OnPacketFactoryRegister(Gibraltar.Serialization.PacketReader)">
            <summary>
            Allows derived classes to register all of the packet factories they need when creating a new packet reader.
            </summary>
            <param name="packetReader"></param>
        </member>
        <member name="P:Gibraltar.Messaging.Net.NetworkClient.Options">
            <summary>
            The network connection options used to connect to the server.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.SendMessage(Gibraltar.Messaging.Net.NetworkMessage)">
            <summary>
            Transmit the provided network message to the server.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.SendPacket(Gibraltar.Serialization.IPacket)">
            <summary>
            Transmit the provided serialized packet to the server.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.ReadNetworkMessage">
            <summary>
            Read the next network packet from the pipe.  Blocks until a packet is detected or the connection fails.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.ReadSerializedPacket">
            <summary>
            Read the next serialized packet from the pipe.  Blocks until a packet is detected or the connection fails.
            </summary>
            <returns>Null if the connection fails or an IPacket that is the next available packet</returns>
            <remarks>This will automatically handle transitions from the network reader to the packet reader, but you can't transition the other way.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.RemoteClose">
            <summary>
            Called to shut down the client due to a command from the server.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.RetryDelay(System.Int32@)">
            <summary>
            Allows a derived class to implement its own retry delay strategy
            </summary>
            <param name="defaultDelayMs">The number of Milliseconds to wait before retrying</param>
            <returns>true if any retry should be attempted</returns>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.AsyncNetworkStreamMain">
            <summary>
            The main method of the background thread for reading from the stream.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.DisposeMembers">
            <summary>
            Release and dispose all of the connection-specific resources
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.AppendToStream(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            Appends to our packet stream the provided buffer of data, preserving stream position
            </summary>
            <param name="seeekableStream"></param>
            <param name="buffer"></param>
            <param name="length"></param>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.ActionSocketFailed(System.Exception)">
            <summary>
            Handles terminal socket failures
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.ActionOnConnected">
            <summary>
            sets our status to connected and fires the appropriate event.
            </summary>
            <remarks>This is separate from the overrideable OnConnected to ensure our critical state management gets done even if inheritor messes up.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.ActionOnDisconnected">
            <summary>
            sets our status to disconnected and fires the appropriate event.
            </summary>
            <remarks>This is separate from the overrideable OnDisonnected to ensure our critical state management gets done even if inheritor messes up.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.ActionOnClosed">
            <summary>
            sets our status to disconnected and fires the appropriate event.
            </summary>
            <remarks>This is separate from the overrideable OnDisconnected to ensure our critical state management gets done even if inheritor messes up.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.ActionOnFailed(System.String)">
            <summary>
            sets our status to disconnected and fires the appropriate event.
            </summary>
            <remarks>This is separate from the overrideable OnDisonnected to ensure our critical state management gets done even if inheritor messes up.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.GetTcpClient">
            <summary>
            Get a new TCP Client,if possible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkClient.ReadSocket(System.Byte[]@)">
            <summary>
            Performs a blocking read on the network stream.  If the socket is closed, returns zero.  Other failures will throw exceptions.
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Messaging.Net.NetworkMessage">
            <summary>
            A packet of data that can be serialized across the network
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.NetworkMessage.Version">
            <summary>
            The protocol version
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.NetworkMessage.TypeCode">
            <summary>
            The specific packet type code
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.NetworkMessage.Length">
            <summary>
            The number of bytes for the packet.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkMessage.ReadHeader(System.IO.Stream,System.Int32@,Gibraltar.Messaging.Net.NetworkMessageTypeCode@,System.Version@)">
            <summary>
            Peek at the byte data and see if there's a full packet header
            </summary>
            <param name="stream">The raw data</param>
            <param name="packetLength">The length of the packet</param>
            <param name="typeCode">The type of the packet</param>
            <param name="version">The schema of the packet</param>
            <returns>True if the header could be read, false if there wasn't enough data</returns>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkMessage.Read(System.IO.Stream)">
            <summary>
            Read the provided stream to create the packet
            </summary>
            <returns>The length of the packet, which may be less or greater than the buffer</returns>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkMessage.Write(System.IO.Stream)">
            <summary>
            Write the packet to the stream.
            </summary>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkMessage.OnWrite(System.IO.Stream)">
            <summary>
            Write the packet to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkMessage.OnRead(System.IO.Stream)">
            <summary>
            Read packet data from the stream
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.NetworkMessage.BaseLength">
            <summary>
            Inheritors must implement this to reflect their packet length as they read a packet plus the base length that came before.
            </summary>
            <remarks>At any time the remaining length is the Length property minus the BaseLength property.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkMessage.ReadPacket(System.IO.Stream,Gibraltar.Messaging.Net.NetworkMessageTypeCode@,System.Version@,System.Int32@)">
            <summary>
            Read just this level from the stream.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.Net.NetworkMessageTypeCode.ClockDrift">
            <summary>
            Measures the clock drift and latency between two computers
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.Net.NetworkSerializer">
            <summary>
            Used to serialize network packets across a TCP socket
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.NetworkSerializer.UnusedData">
            <summary>
            The unused data that has been provided to the serializer
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.NetworkSerializer.HaveUnusedData">
            <summary>
            Indicates if there is any unused data in the network serializer
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.NetworkSerializer.BytesRequred">
            <summary>
            The number of additional bytes required to create the next packet.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkSerializer.AppendData(System.Byte[],System.Int32)">
            <summary>
            Add more information to the serializer stream
            </summary>
            <param name="buffer"></param>
            <param name="length"></param>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkSerializer.ReadNext">
            <summary>
            Read the next network packets in the buffer
            </summary>
            <returns>A complete packet or null if there isn't enough data to make a packet</returns>
            <remarks>Since packets may be spread across multiple packets the serializer
            keeps a buffer of any unused bytes for the next read.  This means a Read call
            may return zero or one network packets</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.Net.NetworkSerializer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Gibraltar.Messaging.Net.PacketStreamStartCommandMessage">
            <summary>
            Informs the receiver to start a new packet serializer for the subsequent data.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.PacketStreamStartCommandMessage.#ctor">
            <summary>
            Create a new packet stream start message
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.PacketStreamStartCommandMessage.OnWrite(System.IO.Stream)">
            <summary>
            Write the packet to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.PacketStreamStartCommandMessage.OnRead(System.IO.Stream)">
            <summary>
            Read packet data from the stream
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.Net.RegisterAgentCommandMessage">
            <summary>
            Sernt by an agent to register itself with the remote server or desktop
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.RegisterAgentCommandMessage.#ctor(System.Guid)">
            <summary>
            Create a new agent registration message for the specified session Id
            </summary>
            <param name="sessionId"></param>
        </member>
        <member name="P:Gibraltar.Messaging.Net.RegisterAgentCommandMessage.SessionId">
            <summary>
            The session Id identifying the agent
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.RegisterAgentCommandMessage.OnWrite(System.IO.Stream)">
            <summary>
            Write the packet to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.RegisterAgentCommandMessage.OnRead(System.IO.Stream)">
            <summary>
            Read packet data from the stream
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.Net.RegisterAnalystCommandMessage">
            <summary>
            Sent by a Desktop to register itself with the remote server
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.RegisterAnalystCommandMessage.#ctor(System.Guid,System.String)">
            <summary>
            Create a new registration for the specified client repository id and user name
            </summary>
            <param name="repositoryId"></param>
            <param name="userName"></param>
        </member>
        <member name="P:Gibraltar.Messaging.Net.RegisterAnalystCommandMessage.UserName">
            <summary>
            The user running Analyst
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.RegisterAnalystCommandMessage.RepositoryId">
            <summary>
            The unique client repository id of the Analyst
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.RegisterAnalystCommandMessage.OnWrite(System.IO.Stream)">
            <summary>
            Write the packet to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.RegisterAnalystCommandMessage.OnRead(System.IO.Stream)">
            <summary>
            Read packet data from the stream
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.Net.SendSessionCommandMessage">
            <summary>
            A command to have the agent send sessions to the server immediately
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.SendSessionCommandMessage.#ctor(System.Guid,Loupe.Extensibility.Data.SessionCriteria)">
            <summary>
            Create a new send session command for the specified session id and criteria
            </summary>
            <param name="sessionId"></param>
            <param name="criteria"></param>
        </member>
        <member name="P:Gibraltar.Messaging.Net.SendSessionCommandMessage.SessionId">
            <summary>
            The session Id to send
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.SendSessionCommandMessage.Criteria">
            <summary>
            The criteria to use to send the session
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.SendSessionCommandMessage.OnWrite(System.IO.Stream)">
            <summary>
            Write the packet to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.SendSessionCommandMessage.OnRead(System.IO.Stream)">
            <summary>
            Read packet data from the stream
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.Net.SessionClosedMessage">
            <summary>
            Indicates that the identified session has been closed.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.SessionClosedMessage.#ctor(System.Guid)">
            <summary>
            Create a new session closed message for the specified session id
            </summary>
            <param name="sessionId"></param>
        </member>
        <member name="M:Gibraltar.Messaging.Net.SessionClosedMessage.OnWrite(System.IO.Stream)">
            <summary>
            Write the packet to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.SessionClosedMessage.OnRead(System.IO.Stream)">
            <summary>
            Read packet data from the stream
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.Net.SessionHeaderMessage">
            <summary>
            Contains the session summary information for a remote session
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.SessionHeaderMessage.#ctor(Gibraltar.Data.SessionHeader)">
            <summary>
            Create a new session header message without any clock drift
            </summary>
            <param name="sessionHeader"></param>
        </member>
        <member name="M:Gibraltar.Messaging.Net.SessionHeaderMessage.#ctor(Gibraltar.Data.SessionHeader,System.TimeSpan)">
            <summary>
            Create a new session header message with the specified clock drift
            </summary>
            <param name="sessionHeader"></param>
            <param name="clockDrift"></param>
        </member>
        <member name="P:Gibraltar.Messaging.Net.SessionHeaderMessage.SessionHeader">
            <summary>
            The current session header
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.SessionHeaderMessage.Timestamp">
            <summary>
            The timestamp of when the message was generated
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Net.SessionHeaderMessage.ClockDrift">
            <summary>
            The total amount of 
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.SessionHeaderMessage.OnRead(System.IO.Stream)">
            <summary>
            Read packet data from the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Net.SessionHeaderMessage.OnWrite(System.IO.Stream)">
            <summary>
            Write the packet to the stream
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.NotificationEventArgs">
            <summary>
            EventArgs for Notification events.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.NotificationEventArgs.Messages">
            <summary>
            The set of one or more log messages for this notification event.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.NotificationEventArgs.TopSeverity">
            <summary>
            The strongest log message severity included in this notification event.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.NotificationEventArgs.TotalCount">
            <summary>
            The total number of log messages included in this notification event.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.NotificationEventArgs.CriticalCount">
            <summary>
            The number of Critical log messages included in this notification event.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.NotificationEventArgs.ErrorCount">
            <summary>
            The number of Error log messages included in this notification event.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.NotificationEventArgs.WarningCount">
            <summary>
            The number of Warning log messages included in this notification event.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.NotificationEventArgs.ExceptionCount">
            <summary>
            The number of log messages which have an attached Exception included in this notification event.
            </summary>
        </member>
        <member name="F:Gibraltar.Messaging.NotificationEventArgs.MinimumNotificationDelay">
            <summary>
            A minimum length of time to wait until another notification may be issued, requested by the client upon return.
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.NotificationEventArgs.SendSession">
            <summary>
            Set to automatically send the latest information on the current session when the event returns.
            </summary>
            <remarks>If there is insufficient configuration information to automatically send sessions this property
            will revert to false when set true.  To verify if there is sufficient configuration information, use CanSendSession</remarks>
        </member>
        <member name="T:Gibraltar.Messaging.Notifier">
            <summary>
            Generates notifications from scanning log messages
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Notifier.#ctor(Gibraltar.Messaging.Publisher,Loupe.Extensibility.Data.LogMessageSeverity,System.String,System.Boolean)">
            <summary>
            Create a Notifier looking for a given minimum LogMessageSeverity.
            </summary>
            <param name="publisher"></param>
            <param name="minimumSeverity">The minimum LogMessageSeverity to look for.</param>
            <param name="notifierName">A name for this notifier (may be null for generic).</param>
            <param name="groupMessages">True to delay and group messages together for more efficient processing</param>
        </member>
        <member name="E:Gibraltar.Messaging.Notifier.NotificationEvent">
            <summary>
            Notification event.
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Notifier.NotifierCategoryName">
            <summary>
            Get the CategoryName for this Notifier instance, as determined from the provided notifier name.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Notifier.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Gibraltar.Messaging.NotificationEventHandler">
            <summary>
            Handler type for a notification event.
            </summary>
            <param name="sender">The sender of this notification event.</param>
            <param name="e">The NotificationEventArgs.</param>
        </member>
        <member name="T:Gibraltar.Messaging.LogMessageNotifyEventHandler">
            <summary>
            Handler type for a LogMessage notify event.
            </summary>
            <param name="sender">The sender of this LogMessage notify event.</param>
            <param name="e">The LogMessageNotifyEventArgs.</param>
        </member>
        <member name="T:Gibraltar.Messaging.PacketEnvelope">
            <summary>
            Wraps a Gibraltar Packet for publishing
            </summary>
            <remarks>For thread safety, request a lock on this object directly.  This is necessary when accessing updateable properties.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.PacketEnvelope.IsCommand">
            <summary>
            True if the packet is a command packet, false otherwise.
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.PacketEnvelope.IsHeader">
            <summary>
            True if the packet is a header cached packet, false otherwise.
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.PacketEnvelope.IsCommitted">
            <summary>
            True if the packet has been commited, false otherwise
            </summary>
            <remarks>This property is thread safe and will pulse waiting threads when it is set to true.
            This property functions as a latch and can't be set false once it has been set to true.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.PacketEnvelope.IsPending">
            <summary>
            True if the packet is pending submission to the queue, false otherwise
            </summary>
            <remarks>This property is thread safe and will pulse waiting threads when changed.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.PacketEnvelope.Packet">
            <summary>
            The actual Gibraltar Packet
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.PacketEnvelope.WriteThrough">
            <summary>
            True if the client is waiting for the packet to be written before returning.
            </summary>
        </member>
        <member name="T:Gibraltar.Messaging.Publisher">
            <summary>
            The central publisher for messaging
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Gibraltar.Messaging.Publisher.t_ThreadMustNotResolvePrincipal">
            A thread-specific static flag so we can prevent recursion in an IPrincipalResolver
        </member>
        <member name="M:Gibraltar.Messaging.Publisher.#ctor(System.String,Loupe.Configuration.AgentConfiguration,Gibraltar.Monitor.SessionSummary,Gibraltar.Monitor.IPrincipalResolver,Gibraltar.Monitor.IApplicationUserProvider)">
            <summary>
            Create a new publisher
            </summary>
            <remarks>The publisher is a very central class; generally there should be only one per process.
            More specifically, there should be a one to one relationship between publisher, packet cache, and 
            messengers to ensure integrity of the message output.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.Publisher.ThreadMustNotBlock">
            <summary>
            Permanently disable blocking when queuing messages from this thread.
            </summary>
            <remarks>This allows threads to switch on their thread-specific blocking-disabled flag for our queue, to
            guard against deadlocks in threads which are responsible for consuming and processing items from our queue.
            WARNING: This setting can not be reversed.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.Publisher.QueryThreadMustNotBlock">
            <summary>
            Query whether waiting on our queue items has been permanently disabled for the current thread.
            </summary>
            <returns>This returns the thread-specific blocking-disabled flag.  This flag is false by default
            for each thread, unless Log.ThisThreadCannotLog() is called to set it to true.</returns>
        </member>
        <member name="M:Gibraltar.Messaging.Publisher.ThreadMustNotNotify">
            <summary>
            Permanently disable notification for messages issued from this thread.
            </summary>
            <remarks>This allows threads to switch on their thread-specific notification-disabled flag for our queue,
            to guard against indefinite loops in threads which are responsible for issuing notification events.
            WARNING: This setting can not be reversed.</remarks>
        </member>
        <member name="M:Gibraltar.Messaging.Publisher.QueryThreadMustNotNotify">
            <summary>
            Query whether notification alerts have been permanently disabled for messages issued by the current thread.
            </summary>
            <returns>This returns the thread-specific notification-disabled flag.  This flag is false by default
            for each thread, unless Log.ThisThreadCannotNotify() is called to set it to true.</returns>
        </member>
        <member name="M:Gibraltar.Messaging.Publisher.MessageDispatchMain">
            <summary>
            The main method of the message dispatch thread.  
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Publisher.DispatchPacket(Gibraltar.Messaging.PacketEnvelope)">
            <summary>
            Send the packet to every current messenger and add it to the packet cache if it's cachable
            </summary>
            <param name="envelope"></param>
        </member>
        <member name="M:Gibraltar.Messaging.Publisher.EnsureInitialized">
            <summary>
            Perform first-time initialization.  We presume we're in a thread-safe lock.
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Publisher.QueuePacket(Gibraltar.Messaging.IMessengerPacket,System.Boolean)">
            <summary>
            Perform the actual package queuing and wait for it to be committed.  
            </summary>
            <remarks>This must be done within the message queue lock.  This method may return a null envelope if called
            on a thread which must not block and the packet had to be discarded due to an overflow condition.</remarks>
            <param name="packet">The packet to be queued</param>
            <param name="writeThrough">True if the call should block the current thread until the packet has been committed,
            false otherwise.</param>
            <returns>The packet envelope for the packet that was queued, or null if the packet was discarded.</returns>
        </member>
        <member name="M:Gibraltar.Messaging.Publisher.WaitOnPacket(Gibraltar.Messaging.PacketEnvelope)">
            <summary>
            Suspends the calling thread until the provided packet is committed.
            </summary>
            <remarks>Even if the envelope is not set to write through the method will not return until
            the packet has been committed.  This method performs its own synchronization and should not be done within a lock.</remarks>
            <param name="packetEnvelope">The packet that must be committed</param>
        </member>
        <member name="M:Gibraltar.Messaging.Publisher.WaitOnPending(Gibraltar.Messaging.PacketEnvelope)">
            <summary>
            Suspends the calling thread until the provided packet is no longer pending.
            </summary>
            <remarks>This method performs its own synchronization and should not be done within a lock.</remarks>
            <param name="packetEnvelope">The packet that must be submitted</param>
        </member>
        <member name="P:Gibraltar.Messaging.Publisher.Configuration">
            <summary>
            The central configuration of the publisher
            </summary>
        </member>
        <member name="M:Gibraltar.Messaging.Publisher.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Messaging.Publisher.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.
            </summary>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="P:Gibraltar.Messaging.Publisher.PacketCache">
            <summary>
            The cache of packets that have already been published
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Gibraltar.Messaging.Publisher.Publish(Gibraltar.Messaging.IMessengerPacket[],System.Boolean)">
            <summary>
            Publish the provided batch of packets.
            </summary>
            <param name="packetArray">An array of packets to publish as a batch.</param>
            <param name="writeThrough">True if the information contained in packet should be committed synchronously,
            false if the publisher can use write caching (when available).</param>
        </member>
        <member name="P:Gibraltar.Messaging.Publisher.SessionName">
            <summary>
            A generally unique name for this session
            </summary>
            <remarks>The session name consists of the application name and version and the session start date.  
            It will generally be unique except in the case where a user starts two instances of the same application in 
            the same second.</remarks>
        </member>
        <member name="P:Gibraltar.Messaging.Publisher.SessionSummary">
            <summary>
            The session summary for the session being published
            </summary>
        </member>
        <member name="P:Gibraltar.Messaging.Publisher.HeaderPackets">
            <summary>
            The list of cached packets that should be in every stream before any other packet.
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.ApplicationUser">
            <summary>
            Extended information for a single application user
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ApplicationUser.Id">
            <summary>
            The unique id of this application user in this session
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ApplicationUser.Key">
            <summary>
            Optional. An absolute, unique key for the user to use as a primary match
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ApplicationUser.FullyQualifiedUserName">
            <summary>
            The fully qualified user name
            </summary>
            <remarks>If Key isn't specified this value is used as the alternate key</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.ApplicationUser.Caption">
            <summary>
            A display label for the user (such as their full name)
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ApplicationUser.Title">
            <summary>
            Optional.  A title for the user (e.g. job title)
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ApplicationUser.EmailAddress">
            <summary>
            Optional.  A primary email address for the user
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ApplicationUser.Phone">
            <summary>
            Optional.  A phone number or other telecommunication alias
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ApplicationUser.Organization">
            <summary>
            Optional.  A label for the organization this user is a part of
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ApplicationUser.Role">
            <summary>
            Optional.  A primary role for this user with respect to this application
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ApplicationUser.Tenant">
            <summary>
            Optional.  The primary tenant this user is a part of.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ApplicationUser.TimeZoneCode">
            <summary>
            Optional.  The time zone the user is associated with
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ApplicationUser.Properties">
            <summary>
            Application provided properties 
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUser.CompareTo(Gibraltar.Monitor.ApplicationUser)">
            <summary>
            Compares this ApplicationUser object to another to determine sorting order.
            </summary>
            <remarks>ApplicationUser instances are sorted by their Domain then User Name properties.</remarks>
            <param name="other">The other ApplicationUser object to compare this object to.</param>
            <returns>An int which is less than zero, equal to zero, or greater than zero to reflect whether
            this ApplicationUser should sort as being less-than, equal to, or greater-than the other
            ApplicationUser, respectively.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUser.Equals(Gibraltar.Monitor.ApplicationUser)">
            <summary>
            Determines if the provided ApplicationUser object is identical to this object.
            </summary>
            <param name="other">The ApplicationUser object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUser.Equals(System.Object)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="obj">The object to compare this object to</param>
            <returns>True if the other object is also a ApplicationUser and represents the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUser.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            An int representing the hash code calculated for the contents of this object.
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUser.op_Equality(Gibraltar.Monitor.ApplicationUser,Gibraltar.Monitor.ApplicationUser)">
            <summary>
            Compares two ApplicationUser instances for equality.
            </summary>
            <param name="left">The ApplicationUser to the left of the operator</param>
            <param name="right">The ApplicationUser to the right of the operator</param>
            <returns>True if the two ApplicationUser are equal.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUser.op_Inequality(Gibraltar.Monitor.ApplicationUser,Gibraltar.Monitor.ApplicationUser)">
            <summary>
            Compares two ApplicationUser instances for inequality.
            </summary>
            <param name="left">The ApplicationUser to the left of the operator</param>
            <param name="right">The ApplicationUser to the right of the operator</param>
            <returns>True if the two ApplicationUser are not equal.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUser.op_LessThan(Gibraltar.Monitor.ApplicationUser,Gibraltar.Monitor.ApplicationUser)">
            <summary>
            Compares if one ApplicationUser instance should sort less than another.
            </summary>
            <param name="left">The ApplicationUser to the left of the operator</param>
            <param name="right">The ApplicationUser to the right of the operator</param>
            <returns>True if the ApplicationUser to the left should sort less than the ThreadInfo to the right.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUser.op_GreaterThan(Gibraltar.Monitor.ApplicationUser,Gibraltar.Monitor.ApplicationUser)">
            <summary>
            Compares if one ApplicationUser instance should sort greater than another.
            </summary>
            <param name="left">The ApplicationUser to the left of the operator</param>
            <param name="right">The ApplicationUser to the right of the operator</param>
            <returns>True if the ApplicationUser to the left should sort greater than the ApplicationUser to the right.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.ApplicationUserCollection">
            <summary>
            A (sorted) collection of Application User objects
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.#ctor">
            <summary>
            Create a new empty ApplicationUserCollection.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.EnsureSorted">
            <summary>
            Makes sure any new ApplicationUser items added to the collection have been re-sorted.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.Add(Gibraltar.Monitor.ApplicationUser)">
            <summary>
            Adds an item to the ApplicationUserCollection.
            </summary>
            <param name="item">The ApplicationUser item to add.</param>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.Clear">
            <summary>
            Clear the ApplicationUserCollection.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.Contains(Gibraltar.Monitor.ApplicationUser)">
            <summary>
            Determines whether a given ApplicationUser item is already present in the ApplicationUserCollection.
            </summary>
            <param name="item">The ApplicationUser item of interest.</param>
            <returns>True if present, false if not.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.ContainsKey(System.Guid)">
            <summary>
            Determines whether the ApplicationUserCollection contains a ApplicationUser with a specified Guid ID.
            </summary>
            <param name="id">The Guid ID of the ApplicationUser of interest.</param>
            <returns>True if present, false if not.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the ApplicationUserCollection contains a ApplicationUser with a specified Key.
            </summary>
            <param name="key">The unique key of the ApplicationUser of interest.</param>
            <returns>True if present, false if not.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.ContainsUserName(System.String)">
            <summary>
            Determines whether the ApplicationUserCollection contains a ApplicationUser with a specified user name.
            </summary>
            <param name="userName">The fully qualified user name of the ApplicationUser of interest.</param>
            <returns>True if present, false if not.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.CopyTo(Gibraltar.Monitor.ApplicationUser[],System.Int32)">
            <summary>
            Copy the collected ApplicationUser objects to a target array, in sorted order.
            </summary>
            <param name="array">The target array (must be large enough to hold the Count of items starting at arrayIndex).</param>
            <param name="arrayIndex">The starting index in the target array at which to begin copying.</param>
        </member>
        <member name="P:Gibraltar.Monitor.ApplicationUserCollection.Count">
            <summary>
            Gets the number of ApplicationUser items in the ApplicationUserCollection.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ApplicationUserCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the ApplicationUserCollection is read-only.
            </summary>
            <returns>
            False because a ApplicationUserCollection is never read-only.
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.Remove(Gibraltar.Monitor.ApplicationUser)">
            <summary>
            Removes a specified ApplicationUser item from the ApplicationUserCollection.
            </summary>
            <param name="item">The ApplicationUser item to remove.</param>
            <returns>True if item was found and removed from the ApplicationUserCollection, false if not found.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.Remove(System.Guid)">
            <summary>
            Removes any ApplicationUser item with the specified Guid ID from the ApplicationUserCollection.
            </summary>
            <param name="id">The Guid ID of the ApplicationUser to remove.</param>
            <returns>True if an item was found and removed from the ApplicationUserCollection, false if not found.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.IndexOf(Gibraltar.Monitor.ApplicationUser)">
            <summary>
            Determines the index of a specific ApplicationUser in the ApplicationUserCollection (in sorted order).
            </summary>
            <param name="item">The ApplicationUser item to locate in the ApplicationUserCollection.</param>
            <returns>
            The index of the ApplicationUser item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.Insert(System.Int32,Gibraltar.Monitor.ApplicationUser)">
            <summary>
            ApplicationUserCollection is sorted and does not support direct modification.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the ApplicationUser item found at a specified index in the ApplicationUserCollection (in sorted order). (Supported but not recommended.)
            </summary>
            <param name="index">The index (in the sorted order) of a ApplicationUser item to remove.</param>
        </member>
        <member name="P:Gibraltar.Monitor.ApplicationUserCollection.System#Collections#Generic#IList{Gibraltar#Monitor#ApplicationUser}#Item(System.Int32)">
            <summary>
            Gets the element at the specified index. (Setting by index is not supported in ApplicationUserCollection.)
            </summary>
            <param name="sortIndex">The index (in the sorted order) of a ApplicationUser item to extract.</param>
            <returns>The ApplicationUser item at that index in the sorted order of this ApplicationUserCollection.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.ApplicationUserCollection.Item(System.Int32)">
            <summary>
            Gets a ApplicationUser item at a specified index (in the sorted order). (NOT BY ThreadId or ThreadIndex!
            Use TryGetValue to lookup by ThreadIndex or TryFindThreadId to lookup by ThreadId.)
            </summary>
            <param name="sortIndex">The index (in the sorted order) of a ApplicationUser item to extract.</param>
            <returns>The ApplicationUser item at that index in the sorted order of this ApplicationUserCollection.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.ApplicationUserCollection.Item(System.Guid)">
            <summary>
            Gets a ApplicationUser item with a specified Guid ID.
            </summary>
            <param name="id">The Guid ID of the desired ApplicationUser.</param>
            <returns>The ApplicationUser item with the specified Guid ID.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.TryGetValue(System.Guid,Gibraltar.Monitor.ApplicationUser@)">
            <summary>
            Get the ApplicationUser with a specified Guid ID.
            </summary>
            <param name="id">The Guid ID of the desired ApplicationUser.</param>
            <param name="applicationUser">Gets the ApplicationUser with the specified Guid ID if it exists in the ApplicationUserCollection.</param>
            <returns>True if found, false if not found.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.TryGetValue(System.String,Gibraltar.Monitor.ApplicationUser@)">
            <summary>
            Get the ApplicationUser with a specified Key. (Use TryFindUserName() to look up by fully qualified user name.)
            </summary>
            <param name="key">The unique key of the desired ApplicationUser.</param>
            <param name="applicationUser">Gets the ApplicationUser with the specified key if it exists in the ApplicationUserCollection.</param>
            <returns>True if found, false if not found.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.TryFindUserName(System.String,Gibraltar.Monitor.ApplicationUser@)">
            <summary>
            Get the ApplicationUser with a specified fully qualified user name.
            </summary>
            <param name="userName">The fully qualified user name of the desired ApplicationUser.</param>
            <param name="applicationUser">Gets the ApplicationUser with the specified user name if it exists in the ApplicationUserCollection.</param>
            <returns>True if found, false if not found.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.TrySetValue(Gibraltar.Monitor.ApplicationUser)">
            <summary>
            Set the specified value as a cached user if that user isn't present, returning the correct user from the collection
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the ApplicationUserCollection (in sorted order).
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.ApplicationUserCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the ApplicationUserCollection (in sorted order).
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Gibraltar.Monitor.BasicLogMessage">
            <summary>
            An intermediary class to log a basic log message for the Gibraltar API. 
            </summary>
            <remarks>This class knows how to formulate a log message for the basic Gibraltar API, including a caption and
            formatted description.  Importantly, it knows how to acquire information about the source of a log message
            from the current call stack, and acts as its own IMessageSourceProvider when handing it off to the central Log.
            Thus, this object must be created while still within the same call stack as the origination of the log message.
            It can also scan the format args for the first Exception object, or an Exception object to attach (or null) may be
            specified directly.  Used by our external Gibraltar log API.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.BasicLogMessage.#ctor(Loupe.Extensibility.Data.LogMessageSeverity,System.String,System.String,System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Creates a BasicLogMessage object with default LogWriteMode behavior and no attached Exception.
            </summary>
            <remarks>This constructor creates a BasicLogMessage with the default LogWriteMode behavior (Queued)
            and will also automatically look for any Exception passed among the params args and attach the first
            one found as the Exception object for this log message (if any).</remarks>
            <param name="severity">The severity of the log message.</param>
            <param name="logSystem">The name of the logging system the message was issued through, such as "Trace" or
            "Gibraltar".</param>
            <param name="categoryName">The logging category or application subsystem category that the log message
            is associated with, such as "Trace", "Console", "Exception", or the logger name in Log4Net.</param>
            <param name="skipFrames">The number of stack frames to skip over to find the first candidate to be
            identified as the source of the log message.</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Monitor.BasicLogMessage.#ctor(Loupe.Extensibility.Data.LogMessageSeverity,Gibraltar.Monitor.LogWriteMode,System.String,System.String,System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Creates a BasicLogMessage object with specified LogWriteMode behavior and no attached Exception.
            </summary>
            <remarks>This constructor creates a BasicLogMessage with a specified LogWriteMode behavior (queue-and-return
            or wait-for-commit) and will also automatically look for any Exception passed among the params args
            and attach the first one found as the Exception object for this log message (if any).</remarks>
            <param name="severity">The severity of the log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="logSystem">The name of the logging system the message was issued through, such as "Trace" or
            "Gibraltar".</param>
            <param name="categoryName">The logging category or application subsystem category that the log message
            is associated with, such as "Trace", "Console", "Exception", or the logger name in Log4Net.</param>
            <param name="skipFrames">The number of stack frames to skip over to find the first candidate to be
            identified as the source of the log message.</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Monitor.BasicLogMessage.#ctor(Loupe.Extensibility.Data.LogMessageSeverity,Gibraltar.Monitor.LogWriteMode,System.String,System.String,System.Int32,System.Exception,System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Creates a BasicLogMessage object with specified LogWriteMode behavior and specified Exception object to attach.
            </summary>
            <remarks>This constructor creates a BasicLogMessage with a specified LogWriteMode behavior (queue-and-return
            or wait-for-commit) and with a specified Exception object (which may be null) to attach to this log message.
            The format args will not be scanned for an Exception object by this overload.</remarks>
            <param name="severity">The severity of the log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="logSystem">The name of the logging system the message was issued through, such as "Trace" or
            "Gibraltar".</param>
            <param name="categoryName">The logging category or application subsystem category that the log message
            is associated with, such as "Trace", "Console", "Exception", or the logger name in Log4Net.</param>
            <param name="skipFrames">The number of stack frames to skip over to find the first candidate to be
            identified as the source of the log message.</param>
            <param name="exception">An exception associated with this log message (or null for none).</param>
            <param name="attributeToException">True if the call stack from where the exception was thrown should be used for log message attribution</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="T:Gibraltar.Monitor.CollectionAction">
            <summary>
            The different possible actions that were performed on a collection
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.CollectionAction.NoChange">
            <summary>
            No changes were made.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.CollectionAction.Added">
            <summary>
            An item was added to the collection.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.CollectionAction.Removed">
            <summary>
            An item was removed from the collection.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.CollectionAction.Updated">
            <summary>
            An item was updated in the collection.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.CollectionAction.Cleared">
            <summary>
            The entire collection was cleared.
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.CollectionChangedEventArgs`2">
            <summary>
            The event arguments for a collection change event, indicating what change was made to which collection.
            </summary>
            <remarks>For add, remove, and update events the specific object in the collection that was added, removed, or updated is provided.</remarks>
            <typeparam name="CollectionType"></typeparam>
            <typeparam name="CollectedObjectType"></typeparam>
        </member>
        <member name="M:Gibraltar.Monitor.CollectionChangedEventArgs`2.#ctor(`0,`1,Gibraltar.Monitor.CollectionAction)">
            <summary>
            Create a new object with the provided collection object, subject, and action
            </summary>
            <param name="collection">The collection object affected</param>
            <param name="subject">Optional.  The specific object in the collection that was affected</param>
            <param name="action">The action that was performed on the collection</param>
        </member>
        <member name="P:Gibraltar.Monitor.CollectionChangedEventArgs`2.Subject">
            <summary>
            The object that was just added, removed, or updated.  May be null in the case of No Change and Clear.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.CollectionChangedEventArgs`2.Collection">
            <summary>
            The collection that was changed
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.CollectionChangedEventArgs`2.Action">
            <summary>
            The action performed on the collection
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.CustomSampledMetric">
            <summary>
            A user defined sampled metric.
            </summary>
            <remarks>Custom Sampled Metrics are the simplest form of Sampled Metrics, not requiring the developer
            to derive their own classes to encapsulate a sampled metric.  Review if this class can serve your needs before
            you create your own custom set of classes derived from SampledMetric (or derive from this class)</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetric.#ctor(Gibraltar.Monitor.MetricDefinitionCollection,System.String,System.String,System.String,System.String)">
            <summary>Creates a new custom sampled metric object from the metric definition looked up with the provided key information.</summary>
            <remarks>The metric definition must already exist or an exception will be raised.</remarks>
            <param name="definitions">The definitions dictionary this definition is a part of</param>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="instanceName">The unique name of this instance within the metric's collection.</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetric.#ctor(Gibraltar.Monitor.CustomSampledMetricDefinition,System.String)">
            <summary>
            Create a new custom sampled metric object from the provided metric definition
            </summary>
            <remarks>The new metric will automatically be added to the metric definition's metrics collection.</remarks>
            <param name="definition">The metric definition for the metric instance</param>
            <param name="instanceName">The unique name of this instance within the metric's collection.</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetric.#ctor(Gibraltar.Monitor.CustomSampledMetricDefinition,Gibraltar.Monitor.Serialization.CustomSampledMetricPacket)">
            <summary>
            Create a new custom sampled metric object from the provided raw data packet
            </summary>
            <remarks>The new metric will automatically be added to the metric definition's metrics collection.</remarks>
            <param name="definition">The metric definition for the metric instance</param>
            <param name="packet">The raw data packet</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetric.AddOrGet(Gibraltar.Monitor.MetricDefinitionCollection,System.String,System.String,System.String,Gibraltar.Monitor.MetricSampleType,System.String)">
            <summary>Creates a new metric instance from the provided definition information, or returns any existing instance if found.</summary>
            <remarks>If the metric definition doesn't exist, it will be created.  If the metric doesn't exist, it will be created.
            If the metric definition does exist, but is not a Custom Sampled Metric (or a derived class) an exception will be thrown.</remarks>
            <param name="definitions">The definitions dictionary this definition is a part of</param>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="metricSampleType">The type of data captured for each metric under this definition.</param>
            <param name="instanceName">The unique name of this instance within the metric's collection.</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetric.AddOrGet(System.String,System.String,System.String,Gibraltar.Monitor.MetricSampleType,System.String)">
            <summary>Creates a new metric instance from the provided definition information, or returns any existing instance if found.</summary>
            <remarks>If the metric definition doesn't exist, it will be created.  If the metric doesn't exist, it will be created.
            If the metric definition does exist, but is not a Custom Sampled Metric (or a derived class) an exception will be thrown.
            Definitions are looked up and added to the active logging metrics collection (Log.Metrics)</remarks>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="metricSampleType">The type of data captured for each metric under this definition.</param>
            <param name="instanceName">The unique name of this instance within the metric's collection.</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetric.CreateSample(System.Double)">
            <summary>
            Create a complete metric sample from the provided data.  The caller must write this sample for it to be recorded.
            </summary>
            <remarks>To write this sample out to the log, use Log.Write.  If you are sampling multiple metrics at the same time,
            it is faster to create each of the samples and write them with one call to Log.Write instead of writing them out
            individually.</remarks>
            <para>Custom metrics using a sample type of AverageFraction and DeltaFraction should not use this method because
            they require a base value as well as a raw value.</para>
            <param name="rawValue">The raw data value</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetric.CreateSample(System.Double,System.DateTimeOffset)">
            <summary>
            Create a complete metric sample from the provided data.  The caller must write this sample for it to be recorded.
            </summary>
            <remarks>To write this sample out to the log, use Log.Write.  If you are sampling multiple metrics at the same time,
            it is faster to create each of the samples and write them with one call to Log.Write instead of writing them out
            individually.</remarks>
            <param name="rawValue">The raw data value</param>
            <param name="rawTimeStamp">The exact date and time the raw value was determined</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetric.CreateSample(System.Double,System.Double)">
            <summary>
            Create a complete metric sample from the provided data.  The caller must write this sample for it to be recorded.
            </summary>
            <remarks>To write this sample out to the log, use Log.Write.  If you are sampling multiple metrics at the same time,
            it is faster to create each of the samples and write them with one call to Log.Write instead of writing them out
            individually.</remarks>
            <para>Custom metrics using a sample type of AverageFraction and DeltaFraction should not use this method because
            they require a base value as well as a raw value.</para>
            <param name="rawValue">The raw data value</param>
            <param name="baseValue">The reference value to compare against for come counter types</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetric.CreateSample(System.Double,System.Double,System.DateTimeOffset)">
            <summary>
            Create a complete metric sample from the provided data.  The caller must write this sample for it to be recorded.
            </summary>
            <remarks>To write this sample out to the log, use Log.Write.  If you are sampling multiple metrics at the same time,
            it is faster to create each of the samples and write them with one call to Log.Write instead of writing them out
            individually.</remarks>
            <param name="rawValue">The raw data value</param>
            <param name="baseValue">The reference value to compare against for come counter types</param>
            <param name="rawTimeStamp">The exact date and time the raw value was determined</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetric.WriteSample(System.Double)">
            <summary>
            Write a metric sample with the provided data immediately.
            </summary>
            <remarks>
            <para>The sample is immediately written to the log. If you are sampling multiple metrics at the same time,
            it is faster to create each of the samples and write them with one call to Log.Write instead of writing them out
            individually.  To do this, you can use CreateMetricSample.</para>
            <para>Custom metrics using a sample type of AverageFraction and DeltaFraction should not use this method because
            they require a base value as well as a raw value.</para>
            </remarks>
            <param name="rawValue">The raw data value</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetric.WriteSample(System.Double,System.DateTimeOffset)">
            <summary>
            Write a metric sample with the provided data immediately.
            </summary>
            <remarks>
            <para>The sample is immediately written to the log. If you are sampling multiple metrics at the same time,
            it is faster to create each of the samples and write them with one call to Log.Write instead of writing them out
            individually.  To do this, you can use CreateMetricSample.</para>
            <para>Custom metrics using a sample type of AverageFraction and DeltaFraction should not use this method because
            they require a base value as well as a raw value.</para>
            </remarks>
            <param name="rawValue">The raw data value</param>
            <param name="rawTimeStamp">The exact date and time the raw value was determined</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetric.WriteSample(System.Double,System.Double)">
            <summary>
            Write a metric sample with the provided data immediately.
            </summary>
            <remarks>The sample is immediately written to the log. If you are sampling multiple metrics at the same time,
            it is faster to create each of the samples and write them with one call to Log.Write instead of writing them out
            individually.  To do this, you can use CreateMetricSample</remarks>
            <param name="rawValue">The raw data value</param>
            <param name="baseValue">The reference value to compare against for come counter types</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetric.WriteSample(System.Double,System.Double,System.DateTimeOffset)">
            <summary>
            Write a metric sample with the provided data immediately.
            </summary>
            <remarks>The sample is immediately written to the log. If you are sampling multiple metrics at the same time,
            it is faster to create each of the samples and write them with one call to Log.Write instead of writing them out
            individually.  To do this, you can use CreateMetricSample</remarks>
            <param name="rawValue">The raw data value</param>
            <param name="rawTimeStamp">The exact date and time the raw value was determined</param>
            <param name="baseValue">The reference value to compare against for come counter types</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetric.CompareTo(Gibraltar.Monitor.CustomSampledMetric)">
            <summary>
            Compare this custom sampled metric to another custom sampled metric.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetric.Equals(Gibraltar.Monitor.CustomSampledMetric)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetric.Definition">
            <summary>
            The definition of this metric object.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetric.Packet">
            <summary>
            The underlying packet 
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetric.Samples">
            <summary>
            The set of raw samples for this metric
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetric.OnMetricSampleRead(Gibraltar.Monitor.Serialization.MetricSamplePacket)">
            <summary>
            Invoked when deserializing a metric sample to allow inheritors to provide derived implementations
            </summary>
            <remarks>If you wish to provide a derived class for metric samples in your derived metric, use this
            method to create and return your derived object to support the deserialization process.
            This is used during object construction, so implementations should treat it as a static method.</remarks>
            <param name="packet">The metric sample packet being deserialized</param>
            <returns>The metric sample-compatible object.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetric.OnSampleCollectionCreate">
            <summary>
            Invoked by the base class to allow inheritors to provide derived implementations
            </summary>
            <remarks>If you wish to provide a derived class for metric sample collection in your derived metric, use this
            method to create and return your derived object. 
            This is used during object construction, so implementations should treat it as a static method.</remarks>
            <returns>The MetricSampleCollection-compatible object.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.MetricSampleType">
            <summary>
            Determines what the raw data for a given sampled metric is, and how it has to be processed to produce final values.
            </summary>
            <remarks>In many cases it is necessary to store raw facts that are translated into the final display value during
            the display process so that they work regardless of time resolution.  For example, to determine the percentage of processor time
            used for an activity, you need to know a time interval to look across (say per second, per hour, etc.), how many units of work
            were possible during that interval (time slices of the processor) and how many were used by the process.  By specifying
            the TotalFraction type, the metric display system will automatically inspect the raw and baseline values then translate them into 
            a percentage.
            This enumeration is conceptually similar to the Performance Counter Type enumeration provided by the runtime, but has been 
            simplified for easier use.</remarks>
        </member>
        <member name="F:Gibraltar.Monitor.MetricSampleType.RawCount">
            <summary>
            Each sample value is in final form for display as of the timestamp of the sample.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.MetricSampleType.RawFraction">
            <summary>
            Each sample value has the numerator and denominator of a fraction for display as of the timestamp of the sample. 
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.MetricSampleType.IncrementalCount">
            <summary>
            Each sample is the incremental change since the prior sample as of the timestamp of the sample.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.MetricSampleType.IncrementalFraction">
            <summary>
            Each sample has the numerator and denominator expressed as the incremental change since the prior sample as of the timestamp of the sample.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.MetricSampleType.TotalCount">
            <summary>
            Each sample value is the cumulative total up to the timestamp of the sample
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.MetricSampleType.TotalFraction">
            <summary>
            Each sample value has the numerator and denominator expressed as the total up to the timestamp of the sample.
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.CustomSampledMetricDefinition">
            <summary>
            The definition of a user-defined sampled metric
            </summary>
            <remarks>Custom Sampled Metrics are the simplest form of Sampled Metrics, not requiring the developer
            to derive their own classes to encapsulate a sampled metric.  Review if this class can serve your needs before
            you create your own custom set of classes derived from SampledMetric (or derive from this class)</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDefinition.#ctor(System.String,System.String,System.String,Gibraltar.Monitor.MetricSampleType)">
            <summary>
            Create a new metric definition for the active log.
            </summary>
            <remarks>At any one time there should only be one metric definition with a given combination of 
            metric type, category, and counter name.  These values together are used to correlate metrics
            between sessions.  The metric definition will automatically be added to the provided collection.</remarks>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="metricSampleType">The type of data captured for each metric under this definition.</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDefinition.#ctor(System.String,System.String,System.String,Gibraltar.Monitor.MetricSampleType,System.String,System.String)">
            <summary>
            Create a new metric definition for the active log.
            </summary>
            <remarks>At any one time there should only be one metric definition with a given combination of 
            metric type, category, and counter name.  These values together are used to correlate metrics
            between sessions.  The metric definition will automatically be added to the provided collection.</remarks>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="metricSampleType">The type of data captured for each metric under this definition.</param>
            <param name="unitCaption">The display caption for the calculated values captured under this metric.</param>
            <param name="description">A description of what is tracked by this metric, suitable for end-user display.</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDefinition.#ctor(Gibraltar.Monitor.MetricDefinitionCollection,System.String,System.String,System.String,Gibraltar.Monitor.MetricSampleType)">
            <summary>
            Create a new metric definition.
            </summary>
            <remarks>At any one time there should only be one metric definition with a given combination of 
            metric type, category, and counter name.  These values together are used to correlate metrics
            between sessions.  The metric definition will automatically be added to the provided collection.</remarks>
            <param name="definitions">The definitions dictionary this definition is a part of</param>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="metricSampleType">The type of data captured for each metric under this definition.</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDefinition.#ctor(Gibraltar.Monitor.MetricDefinitionCollection,System.String,System.String,System.String,Gibraltar.Monitor.MetricSampleType,System.String,System.String)">
            <summary>
            Create a new metric definition.
            </summary>
            <remarks>At any one time there should only be one metric definition with a given combination of 
            metric type, category, and counter name.  These values together are used to correlate metrics
            between sessions.  The metric definition will automatically be added to the provided collection.</remarks>
            <param name="definitions">The definitions dictionary this definition is a part of</param>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="metricSampleType">The type of data captured for each metric under this definition.</param>
            <param name="unitCaption">The display caption for the calculated values captured under this metric.</param>
            <param name="description">A description of what is tracked by this metric, suitable for end-user display.</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDefinition.#ctor(Gibraltar.Monitor.MetricDefinitionCollection,Gibraltar.Monitor.Serialization.CustomSampledMetricDefinitionPacket)">
            <summary>
            Create a new custom sampled metric object from the provided raw data packet
            </summary>
            <remarks>The metric definition will automatically be added to the provided collection.</remarks>
            <param name="definitions">The definitions dictionary this definition is a part of</param>
            <param name="packet">The raw data packet</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDefinition.AddOrGet(Gibraltar.Monitor.MetricDefinitionCollection,System.String,System.String,System.String,Gibraltar.Monitor.MetricSampleType,System.String,System.String)">
            <summary>Creates a new metric definition from the provided information, or returns an existing matching definition if found.</summary>
            <remarks>If the metric definition doesn't exist, it will be created.
            If the metric definition does exist, but is not a Custom Sampled Metric (or a derived class) an exception will be thrown.
            Definitions are looked up and added to the provided definitions dictionary.</remarks>
            <param name="definitions">The definitions dictionary this definition is a part of</param>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="metricSampleType">The type of data captured for each metric under this definition.</param>
            <param name="unitCaption">The display caption for the calculated values captured under this metric.</param>
            <param name="description">A description of what is tracked by this metric, suitable for end-user display.</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDefinition.AddOrGet(System.String,System.String,System.String,Gibraltar.Monitor.MetricSampleType,System.String,System.String)">
            <summary>Creates a new metric definition from the provided information, or returns an existing matching definition if found.</summary>
            <remarks>If the metric definition doesn't exist, it will be created.
            If the metric definition does exist, but is not a Custom Sampled Metric (or a derived class) an exception will be thrown.
            Definitions are looked up and added to the active logging metrics collection (Log.Metrics)</remarks>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="metricSampleType">The type of data captured for each metric under this definition.</param>
            <param name="unitCaption">The display caption for the calculated values captured under this metric.</param>
            <param name="description">A description of what is tracked by this metric, suitable for end-user display.</param>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricDefinition.MetricSampleType">
            <summary>
            The intended method of interpreting the sampled counter value.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricDefinition.RequiresMultipleSamples">
            <summary>
            Indicates whether a final value can be determined from just one sample or if two comparable samples are required.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricDefinition.IsBound">
            <summary>
            Indicates if this definition is configured to retrieve its information directly from an object.
            </summary>
            <remarks>When true, metric instances and samples can be defined from a live object of the same type that was used 
            to generate the data binding.  It isn't necessary that the same object be used, just that it be a compatible
            type to the original type used to establish the binding.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricDefinition.BoundType">
            <summary>
            When bound, indicates the exact interface or object type that was bound.
            </summary>
            <remarks>When creating new metrics or metric samples, this data type must be provided in bound mode.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDefinition.CompareTo(Gibraltar.Monitor.CustomSampledMetricDefinition)">
            <summary>
            Compare this custom sampled metric definition with another to determine if they are identical.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDefinition.Equals(Gibraltar.Monitor.CustomSampledMetricDefinition)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricDefinition.Metrics">
            <summary>
            The set of metrics that use this definition.
            </summary>
            <remarks>All metrics with the same definition are of the same object type.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDefinition.WriteSample(System.String,System.Double)">
            <summary>
            Write a metric sample to the specified metric instance with the provided data immediately, creating the metric if it doesn't exist.
            </summary>
            <remarks>
            <para>The sample is immediately written to the log. If you are sampling multiple metrics at the same time,
            it is faster to create each of the samples and write them with one call to Log.Write instead of writing them out
            individually.  To do this, you can use CreateMetricSample.</para>
            <para>Custom metrics using a sample type of AverageFraction and DeltaFraction should not use this method because
            they require a base value as well as a raw value.</para>
            </remarks>
            <param name="instanceName">The instance name to use, or blank or null for the default metric.</param>
            <param name="rawValue">The raw data value</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDefinition.WriteSample(System.String,System.Double,System.DateTimeOffset)">
            <summary>
            Write a metric sample to the specified metric instance with the provided data immediately, creating the metric if it doesn't exist.
            </summary>
            <remarks>
            <para>The sample is immediately written to the log. If you are sampling multiple metrics at the same time,
            it is faster to create each of the samples and write them with one call to Log.Write instead of writing them out
            individually.  To do this, you can use CreateMetricSample.</para>
            <para>Custom metrics using a sample type of AverageFraction and DeltaFraction should not use this method because
            they require a base value as well as a raw value.</para>
            </remarks>
            <param name="instanceName">The instance name to use, or blank or null for the default metric.</param>
            <param name="rawValue">The raw data value</param>
            <param name="rawTimeStamp">The exact date and time the raw value was determined</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDefinition.WriteSample(System.String,System.Double,System.Double)">
            <summary>
            Write a metric sample to the specified metric instance with the provided data immediately, creating the metric if it doesn't exist.
            </summary>
            <remarks>The sample is immediately written to the log. If you are sampling multiple metrics at the same time,
            it is faster to create each of the samples and write them with one call to Log.Write instead of writing them out
            individually.  To do this, you can use CreateMetricSample</remarks>
            <param name="instanceName">The instance name to use, or blank or null for the default metric.</param>
            <param name="rawValue">The raw data value</param>
            <param name="baseValue">The reference value to compare against for come counter types</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDefinition.WriteSample(System.String,System.Double,System.Double,System.DateTimeOffset)">
            <summary>
            Write a metric sample to the specified metric instance with the provided data immediately, creating the metric if it doesn't exist.
            </summary>
            <remarks>The sample is immediately written to the log. If you are sampling multiple metrics at the same time,
            it is faster to create each of the samples and write them with one call to Log.Write instead of writing them out
            individually.  To do this, you can use CreateMetricSample</remarks>
            <param name="instanceName">The instance name to use, or blank or null for the default metric.</param>
            <param name="rawValue">The raw data value</param>
            <param name="rawTimeStamp">The exact date and time the raw value was determined</param>
            <param name="baseValue">The reference value to compare against for come counter types</param>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricDefinition.NameBound">
            <summary>
            Indicates if there is a binding for metric instance name.
            </summary>
            <remarks>When true, the Name Member Name and Name Member Type properties are available.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricDefinition.NameMemberName">
            <summary>
            The name of the member to invoke to determine the metric instance name.
            </summary>
            <remarks>This property is only valid when NameBound is true.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricDefinition.NameMemberType">
            <summary>
            The type of the member to be invoked to determine the metric instance name (field, method, or property)
            </summary>
            <remarks>This property is only valid when NameBound is true.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDefinition.OnMetricDictionaryCreate">
            <summary>
            Invoked by the base class to allow inheritors to provide derived implementations
            </summary>
            <remarks>If you wish to provide a derived class for the metric dictionary in your derived metric, use this
            method to create and return your derived object. 
            This is used during object construction, so implementations should treat it as a static method.</remarks>
            <returns>The MetricCollection-compatible object.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDefinition.SampledMetricTypeRequiresMultipleSamples(Gibraltar.Monitor.MetricSampleType)">
            <summary>
            Indicates whether two samples are required to calculate a metric value or not. 
            </summary>
            <remarks>
            Many sample types require multiple samples to determine an output value because they work with 
            the change between two points.
            </remarks>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricDefinition.Packet">
            <summary>
            The underlying packet 
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDefinition.EnsureMetricExists(System.String)">
            <summary>
            Retrieves the specified metric instance, or creates it if it doesn't exist
            </summary>
            <param name="instanceName"></param>
            <returns>The custom sampled metric object.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.CustomSampledMetricDictionary">
            <summary>
            The collection of custom sampled metrics for a given sampled metric definition.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDictionary.#ctor(Gibraltar.Monitor.CustomSampledMetricDefinition)">
            <summary>
            Create a new custom sampled metric dictionary for the provided definition.
            </summary>
            <remarks>This dictionary is created automatically by the Custom Sampled Metric Definition during its initialization.</remarks>
            <param name="metricDefinition">The definition of the custom sampled metric to create a metric dictionary for</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDictionary.Add(System.String)">
            <summary>
            Create a new metric object with the provided instance name and add it to the collection
            </summary>
            <param name="instanceName">The instance name to use, or blank or null for the default metric.</param>
            <returns>The new metric object that was added to the collection</returns>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricDictionary.Definition">
            <summary>
            The definition of all of the metrics in this collection.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDictionary.TryGetValue(System.Guid,Gibraltar.Monitor.CustomSampledMetric@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricDictionary.TryGetValue(System.String,Gibraltar.Monitor.CustomSampledMetric@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The metric name to locate in the collection</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricDictionary.Item(System.Int32)">
            <summary>
            Retrieve the custom sampled metric by its zero-based index in collection. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricDictionary.Item(System.Guid)">
            <summary>
            Retrieve custom sampled metric object by its Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricDictionary.Item(System.String)">
            <summary>
            Retrieve custom sampled metric object by its name
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Monitor.CustomSampledMetricSample">
            <summary>
            A single sample of a custom sampled metric.  Sampled metrics generally require calculation to produce data, see ComputeValue.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricSample.#ctor(Gibraltar.Monitor.CustomSampledMetric,Gibraltar.Monitor.Serialization.CustomSampledMetricSamplePacket)">
            <summary>
            Create a new sample object for the provided metric and raw sample packet.
            </summary>
            <remarks>The metric sample is automatically added to the samples collection of the provided metric object.</remarks>
            <param name="metric">The metric object this sample applies to.</param>
            <param name="metricSamplePacket">The raw sample data packet.</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricSample.ComputeValue(Gibraltar.Monitor.SampledMetricSample)">
            <summary>
            Compute the counter value for this sample compared with the provided baseline sample (if any)
            </summary>
            <remarks>
            A baseline sample is required when the current metric requires multiple samples to determine results.
            The baseline sample must be for a date and time prior to this sample for correct results.
            </remarks>
            <param name="baselineSample">The previous baseline sample to calculate a difference for</param>
            <returns>The calculated counter value</returns>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricSample.Metric">
            <summary>
            The custom sampled metric this sample is for.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricSample.CompareTo(Gibraltar.Monitor.CustomSampledMetricSample)">
            <summary>
            Compares this sample to another sample to determine if they are the same or how to sort them. 
            </summary>
            <remarks>This comparison guarantees absolute sorting of samples in order.</remarks>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricSample.Equals(Gibraltar.Monitor.CustomSampledMetricSample)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricSample.BaseValue">
            <summary>
            The base value for this sample if the metric sample type is a fraction.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricSample.Value">
            <summary>
            The value for this sample.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricSample.Packet">
            <summary>
            Get the raw sampled metric packet for this sample.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricSample.WeightedAverage(System.Double[],System.TimeSpan[])">
            <summary>
            Calculate the weighted average of the basis values based on the amount of time they apply (the weights)
            </summary>
            <param name="basis">An array of basis values</param>
            <param name="weight">An array of timespan values</param>
            <returns>The weighted average</returns>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricSample.SampleRange(Gibraltar.Monitor.CustomSampledMetricSample)">
            <summary>
            Create an ordered array of all of the samples between the baseline sample and this one, inclusive
            </summary>
            <param name="baselineSample"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricSample.CalculateWeightedAverageValue(Gibraltar.Monitor.CustomSampledMetricSample[])">
            <summary>
            Used by the total sampling type to average all of the raw values to extrapolate the right value between baseline and this sample.
            </summary>
            <param name="sampleRange">The range of samples that includes the timespan we're looking for</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricSample.CalculateWeightedAverageBaseValue(Gibraltar.Monitor.CustomSampledMetricSample[])">
            <summary>
            Used by the total sampling type to average all of the raw values to extrapolate the right value between baseline and this sample.
            </summary>
            <param name="sampleRange">The range of samples that includes the timespan we're looking for</param>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Monitor.CustomSampledMetricSampleCollection">
            <summary>
            The collection of metric samples for a custom sampled metric.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricSampleCollection.#ctor(Gibraltar.Monitor.CustomSampledMetric)">
            <summary>
            Create a new sample collection for the specified metric object
            </summary>
            <param name="metric"></param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricSampleCollection.Add(Gibraltar.Monitor.CustomSampledMetricSample)">
            <summary>
            Add the specified custom sampled metric sample object to the collection
            </summary>
            <param name="newMetricSample">The new custom sampled metric object to add</param>
        </member>
        <member name="M:Gibraltar.Monitor.CustomSampledMetricSampleCollection.Add(Gibraltar.Monitor.Serialization.CustomSampledMetricSamplePacket)">
            <summary>
            Add a new custom sampled metric sample from the specified sample packet
            </summary>
            <param name="newMetricSamplePacket">The sample packet to create a new metric sample object from</param>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricSampleCollection.Item(System.Int32)">
            <summary>
            Select a metric sample by its numerical index
            </summary>
            <remarks>Setting a metric sample to a particular index is not supported and will result in an exception being thrown.</remarks>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricSampleCollection.Metric">
            <summary>
            The metric this sample is for.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricSampleCollection.First">
            <summary>
            The first object in the collection
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.CustomSampledMetricSampleCollection.Last">
            <summary>
            The last object in the collection
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.DefaultPrincipalResolver">
            <summary>
            A simple default principal resolver
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.DefaultPrincipalResolver.#ctor">
            <summary>
            Create a new default principal resolver
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.DefaultPrincipalResolver.TryResolveCurrentPrincipal(System.Security.Principal.IPrincipal@)">
            <inheritdoc />
        </member>
        <member name="T:Gibraltar.Monitor.DelegateLoupeFilter">
            <summary>
            Creates a Loupe Filter out of the provided delegate function
            </summary>
            <remarks>Adapts simple lambda functions and other delegates to be used as a Loupe Filter.
            </remarks>
        </member>
        <member name="M:Gibraltar.Monitor.DelegateLoupeFilter.#ctor(System.Action{Gibraltar.Messaging.IMessengerPacket})">
            <summary>
            Create a new loupe filter for the specified action
            </summary>
            <param name="action">The action to apply to each packet</param>
            <remarks>The provided action can modify the packet but can't prevent the packet from being written;
            to have the option to cancel the packet specify a Func&lt;IMessengerPacket, bool&gt; instead.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.DelegateLoupeFilter.#ctor(System.Func{Gibraltar.Messaging.IMessengerPacket,System.Boolean})">
            <summary>
            Create a new Loupe filter for the specified function
            </summary>
            <param name="func">The function to apply to each packet</param>
            <remarks>The function can cancel the packet from being written by returning false.  Return true to allow
            the (possibly modified) packet to be written.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.DelegateLoupeFilter.Process(Gibraltar.Messaging.IMessengerPacket,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="T:Gibraltar.Monitor.DetailLogMessage">
            <summary>
            An intermediary class to log a Gibraltar log message including an XML details string. 
            </summary>
            <remarks>This class knows how to formulate our most advanced log message format including an XML details string.
            Importantly, it knows how to acquire information about the source of a log message from the current call stack,
            and acts as its own IMessageSourceProvider when handing it off to the central Log.  Thus, this object must be
            created while still within the same call stack as the origination of the log message.
            Used internally by our external Gibraltar log API.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.DetailLogMessage.#ctor(Loupe.Extensibility.Data.LogMessageSeverity,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Object[])">
            <summary>
            Creates a DetailLogMessage object with default LogWriteMode behavior and an XML details string.
            </summary>
            <remarks>This constructor creates a DetailLogMessage with the default LogWriteMode behavior (Queued)
            and a specified XML details string (which may be null).</remarks>
            <param name="severity">The severity of the log message.</param>
            <param name="logSystem">The name of the logging system the message was issued through, such as "Trace" or
            "Gibraltar".</param>
            <param name="categoryName">The logging category or application subsystem category that the log message
            is associated with, such as "Trace", "Console", "Exception", or the logger name in Log4Net.</param>
            <param name="skipFrames">The number of stack frames to skip over to find the first candidate to be
            identified as the source of the log message.</param>
            <param name="detailsXml">Optional.  An XML document with extended details about the message.  Can be null.</param>
            <param name="caption">A single line display caption.</param>
            <param name="description">Optional.  A multi-line description to use which can be a format string for the arguments.  Can be null.</param>
            <param name="args">Optional additional args to match up with the formatting string.</param>
        </member>
        <member name="M:Gibraltar.Monitor.DetailLogMessage.#ctor(Loupe.Extensibility.Data.LogMessageSeverity,Gibraltar.Monitor.LogWriteMode,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Object[])">
            <summary>
            Creates a DetailLogMessage object with specified LogWriteMode behavior and an XML details string.
            </summary>
            <remarks>This constructor creates a DetailLogMessage with specified LogWriteMode behavior (queue-and-return
            or wait-for-commit) and XML details string (which may be null).</remarks>
            <param name="severity">The severity of the log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="logSystem">The name of the logging system the message was issued through, such as "Trace" or
            "Gibraltar".</param>
            <param name="categoryName">The logging category or application subsystem category that the log message
            is associated with, such as "Trace", "Console", "Exception", or the logger name in Log4Net.</param>
            <param name="skipFrames">The number of stack frames to skip over to find the first candidate to be
            identified as the source of the log message.</param>
            <param name="detailsXml">Optional.  An XML document with extended details about the message.  Can be null.</param>
            <param name="caption">A single line display caption.</param>
            <param name="description">Optional.  A multi-line description to use which can be a format string for the arguments.  Can be null.</param>
            <param name="args">Optional additional args to match up with the formatting string.</param>
        </member>
        <member name="M:Gibraltar.Monitor.DetailLogMessage.#ctor(Loupe.Extensibility.Data.LogMessageSeverity,Gibraltar.Monitor.LogWriteMode,System.String,System.String,System.Int32,System.Exception,System.Boolean,System.String,System.String,System.String,System.Object[])">
            <summary>
            Creates a DetailLogMessage object with specified LogWriteMode behavior, Exception object, and XML details string.
            </summary>
            <remarks>This constructor creates a DetailLogMessage with specified LogWriteMode behavior (queue-and-return
            or wait-for-commit), a specified Exception object to attach, and XML details string (which may be null).</remarks>
            <param name="severity">The severity of the log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="logSystem">The name of the logging system the message was issued through, such as "Trace" or
            "Gibraltar".</param>
            <param name="categoryName">The logging category or application subsystem category that the log message
            is associated with, such as "Trace", "Console", "Exception", or the logger name in Log4Net.</param>
            <param name="skipFrames">The number of stack frames to skip over to find the first candidate to be
            identified as the source of the log message.</param>
            <param name="detailsXml">Optional.  An XML document with extended details about the message.  Can be null.</param>
            <param name="exception">An exception associated with this log message (or null for none).</param>
            <param name="attributeToException">True if the call stack from where the exception was thrown should be used for log message attribution</param>
            <param name="caption">A single line display caption.</param>
            <param name="description">Optional.  A multi-line description to use which can be a format string for the arguments.  Can be null.</param>
            <param name="args">Optional additional args to match up with the formatting string.</param>
        </member>
        <member name="T:Gibraltar.Monitor.EventMetric">
            <summary>
            A single event metric instance object, representing one instance of an event metric definition.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetric.#ctor(Gibraltar.Monitor.MetricDefinitionCollection,System.String,System.String,System.String,System.String)">
            <summary>Creates a new event metric object from the metric definition looked up with the provided key information.</summary>
            <remarks>The metric definition must already exist or an exception will be raised.</remarks>
            <param name="definitions">The definitions dictionary this definition is a part of</param>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="instanceName">The unique name of this instance within the metric's collection.</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetric.#ctor(Gibraltar.Monitor.EventMetricDefinition,System.String)">
            <summary>
            Create a new event metric object from the provided metric definition
            </summary>
            <remarks>The new metric will automatically be added to the metric definition's metrics collection.</remarks>
            <param name="definition">The metric definition for the metric instance</param>
            <param name="instanceName">The unique name of this instance within the metric's collection.</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetric.#ctor(Gibraltar.Monitor.EventMetricDefinition,Gibraltar.Monitor.Serialization.EventMetricPacket)">
            <summary>
            Create a new event metric object from the provided raw data packet
            </summary>
            <remarks>The new metric will automatically be added to the metric definition's metrics collection.</remarks>
            <param name="definition">The object that defines this metric</param>
            <param name="packet">The raw data packet</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetric.AddOrGet(Gibraltar.Monitor.MetricDefinitionCollection,System.String,System.String,System.String,System.String)">
            <summary>Creates a new metric instance or returns an existing one from the provided definition information, or returns any existing instance if found.</summary>
            <remarks>If the metric definition doesn't exist, it will be created.  If the metric doesn't exist, it will be created.
            If the metric definition does exist, but is not an Event Metric (or a derived class) an exception will be thrown.</remarks>
            <param name="definitions">The definitions dictionary this definition is a part of</param>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="instanceName">The unique name of this instance within the metric's collection.</param>
            <returns>The event metric object for the specified event metric instance.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetric.AddOrGet(System.String,System.String,System.String,System.String)">
            <summary>Creates a new metric instance or returns an existing one from the provided definition information, or returns any existing instance if found.</summary>
            <remarks>If the metric definition doesn't exist, it will be created.  If the metric doesn't exist, it will be created.
            If the metric definition does exist, but is not an Event Metric (or a derived class) an exception will be thrown.
            Definitions are looked up and added to the active logging metrics collection (Log.Metrics)</remarks>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="instanceName">The unique name of this instance within the metric's collection.</param>
            <returns>The event metric object for the specified event metric instance.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetric.AddOrGet(Gibraltar.Monitor.EventMetricDefinition,System.String)">
            <summary>Creates a new metric instance or returns an existing one from the provided definition information, or returns any existing instance if found.</summary>
            <remarks>If the metric definition doesn't exist, it will be created.  If the metric doesn't exist, it will be created.
            If the metric definition does exist, but is not an Event Metric (or a derived class) an exception will be thrown.
            Definitions are looked up and added to the active logging metrics collection (Log.Metrics)</remarks>
            <param name="definition">The metric definition for the metric instance</param>
            <param name="instanceName">The unique name of this instance within the metric's collection.</param>
            <returns>The event metric object for the specified event metric instance.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetric.CreateSample">
            <summary>
            Create a new metric sample.  The caller must write this sample for it to be recorded.
            </summary>
            <remarks>To write this sample out to the log, use Log.Write.  If you are sampling multiple metrics at the same time,
            it is faster to create each of the samples and write them with one call to Log.Write instead of writing them out
            individually.</remarks>
            <returns>The new metric sample packet object</returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetric.CompareTo(Gibraltar.Monitor.EventMetric)">
            <summary>
            Indicates the relative sort order of this object to another of the same type.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetric.Equals(Gibraltar.Monitor.EventMetric)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetric.Definition">
            <summary>
            The definition of this metric object.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetric.Samples">
            <summary>
            The set of raw samples for this metric
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetric.CalculateValues(Loupe.Extensibility.Data.MetricSampleInterval,System.Int32,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},Loupe.Extensibility.Data.IEventMetricValueDefinition)">
            <summary>
            Calculate displayable values based on the full information captured for this metric
            </summary>
            <remarks>
            The raw values may not be suitable for display depending on the unit the values are captured in, and
            depending on how the data was sampled it may not display well because of uneven sampling if processed
            directly.
            </remarks>
            <param name="interval">The requested data sample size</param>
            <param name="intervals">The number of intervals to have between each value exactly.</param>
            <param name="startDateTime">The earliest date to retrieve data for</param>
            <param name="endDateTime">The last date to retrieve data for</param>
            <param name="trendValue">The specific event metric value to trend</param>
            <returns>A metric value set suitable for display</returns>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetric.Packet">
            <summary>
            The underlying packet 
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetric.OnMetricSampleRead(Gibraltar.Monitor.Serialization.MetricSamplePacket)">
            <summary>
            Invoked when deserializing a metric sample to allow inheritors to provide derived implementations
            </summary>
            <remarks>If you wish to provide a derived class for metric samples in your derived metric, use this
            method to create and return your derived object to support the deserialization process.
            This is used during object construction, so implementations should treat it as a static method.</remarks>
            <param name="packet">The metric sample packet being deserialized</param>
            <returns>The metric sample-compatible object.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetric.OnSampleCollectionCreate">
            <summary>
            Invoked by the base class to allow inheritors to provide derived implementations
            </summary>
            <remarks>If you wish to provide a derived class for metric sample collection in your derived metric, use this
            method to create and return your derived object. 
            This is used during object construction, so implementations should treat it as a static method.</remarks>
            <returns>The MetricSampleCollection-compatible object.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetric.OnCalculateValues(Loupe.Extensibility.Data.MetricSampleInterval,System.Int32,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Determines what specific samples to use and then calculates the effective values for each sample, returning the results in the provided
            new metric value set
            </summary>
            <remarks>Data covering the provided start and end date will be returned when possible with the goal being that the first metric value returned
            will coincide with the start date, and the last sample will be less than or equal to the end date.  Even if there are raw samples available coincident
            with the start date it may not be possible to provide a metric value for that date due to the need to have multiple samples to calculate most
            metrics.</remarks>
            <param name="interval">The interval to bias to.</param>
            <param name="intervals">The number of intervals to have between each value exactly.</param>
            <param name="startDateTime">The exact date and time desired to start the value set.</param>
            <param name="endDateTime">The exact end date and time to not exceed.</param>
            <returns>A new metric value set with all calculated values.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetric.CalculateSample(Gibraltar.Monitor.MetricValueCollection,System.Collections.Generic.IList{Gibraltar.Monitor.EventMetricSample},System.Double,System.Int32,System.DateTimeOffset,Gibraltar.Monitor.EventMetricValueDefinition)">
            <summary>
            Calculate one effective value from the provided objects
            </summary>
            <param name="metricValueCollection">Optional.  The value set to add the new value to</param>
            <param name="samples">The set of samples to put in this value</param>
            <param name="previousValue">The value of the prior sample in time.</param>
            <param name="previousCount">The number of event metric samples previously used (for running average)</param>
            <param name="timeStamp">The timestamp to use for the sample</param>
            <param name="trendValue">The specific event metric value to trend</param>
        </member>
        <member name="T:Gibraltar.Monitor.EventMetricCollection">
            <summary>
            The collection of event metrics for a given event metric definition.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricCollection.#ctor(Gibraltar.Monitor.EventMetricDefinition)">
            <summary>
            Create a new event metric dictionary for the provided definition.
            </summary>
            <remarks>This dictionary is created automatically by the Custom Sampled Metric Definition during its initialization.</remarks>
            <param name="metricDefinition">The definition of the custom sampled metric to create a metric dictionary for</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricCollection.Add(System.String)">
            <summary>
            Create a new metric object with the provided instance name and add it to the collection
            </summary>
            <param name="instanceName">The instance name to use, or blank or null for the default metric.</param>
            <returns>The new metric object that was added to the collection</returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricCollection.AddOrGet(System.Object)">
            <summary>Creates a new metric instance or returns an existing one by inspecting the provided object for EventMetricDefinition attributes.</summary>
            <remarks>If the metric doesn't exist, it will be created.
            If the metric definition does exist, but is not an Event Metric (or a derived class) an exception will be thrown.
            If the metric definition isn't bound to an object type, the default metric will be returned.
            The provided object must not be null and must be of the type the metric definition owning this dictionary is bound to.</remarks>
            <param name="userDataObject">The object to create a metric from.</param>
            <returns>The event metric object for the specified event metric instance.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricCollection.Definition">
            <summary>
            The definition of all of the metrics in this collection.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricCollection.TryGetValue(System.Guid,Gibraltar.Monitor.EventMetric@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricCollection.TryGetValue(System.String,Gibraltar.Monitor.EventMetric@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The metric name to locate in the collection</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricCollection.Item(System.Int32)">
            <summary>
            Retrieve the event metric by its zero-based index in collection. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricCollection.Item(System.Guid)">
            <summary>
            Retrieve event metric object by its Id
            </summary>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricCollection.Item(System.String)">
            <summary>
            Retrieve event metric object by its name
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Monitor.EventMetricDefinition">
            <summary>
            The definition of an event metric, necessary before any specific metric can be created.
            </summary>
            <remarks>
            A sampled metric always has a value for any timestamp between its start and end timestamps.
            It presumes any interim value by looking at the best fit sampling of the real world value
            and assuming it covers the timestamp in question.  It is therefore said to be contiguous for 
            the range of start and end.  Event metrics are only defined at the instant they are timestamped, 
            and imply nothing for other timestamps.  
            For sampled metrics, use the SampledMetric base class.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricDefinition.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new event metric definition for the active log.
            </summary>
            <remarks>At any one time there should only be one metric definition with a given combination of 
            metric type, category, and counter name.  These values together are used to correlate metrics
            between sessions.  The metric definition will <b>not</b> be automatically added to the provided collection.</remarks>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricDefinition.#ctor(Gibraltar.Monitor.MetricDefinitionCollection,System.String,System.String,System.String)">
            <summary>
            Create a new event metric definition.
            </summary>
            <remarks>At any one time there should only be one metric definition with a given combination of 
            metric type, category, and counter name.  These values together are used to correlate metrics
            between sessions.  The metric definition will <b>not</b> be automatically added to the provided collection.</remarks>
            <param name="definitions">The definitions dictionary this definition is a part of</param>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricDefinition.#ctor(Gibraltar.Monitor.MetricDefinitionCollection,Gibraltar.Monitor.Serialization.MetricDefinitionPacket)">
            <summary>
            Create a new event metric object from the provided raw data packet
            </summary>
            <param name="definitions">The definitions dictionary this definition is a part of</param>
            <param name="packet">The packet to create a definition from.</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricDefinition.AddOrGet(Gibraltar.Monitor.MetricDefinitionCollection,System.String,System.String,System.String)">
            <summary>Creates a new metric definition from the provided information, or returns an existing matching definition if found.</summary>
            <remarks>If the metric definition doesn't exist, it will be created.
            If the metric definition does exist, but is not a Custom Sampled Metric (or a derived class) an exception will be thrown.
            Definitions are looked up and added to the provided definitions dictionary.</remarks>
            <param name="definitions">The definitions dictionary this definition is a part of</param>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricDefinition.AddOrGet(System.String,System.String,System.String)">
            <summary>Creates a new metric definition from the provided information, or returns an existing matching definition if found.</summary>
            <remarks>If the metric definition doesn't exist, it will be created.
            If the metric definition does exist, but is not an Event Metric an exception will be thrown.
            Definitions are looked up and added to the active logging metrics collection (Log.Metrics)</remarks>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricDefinition.Register">
            <summary>
            Register this instance as a completed definition and return the valid usable definition for this event metric.
            </summary>
            <remarks>This call is necessary to complete a new event metric definition (created by calls to AddValue) before
            it can be used, and it signifies that all desired value columns have been added to the definition.  Only the
            first registration of a metric definition with a given Key (metrics system, category name, and counter name)
            will be effective and return the same definition object; subsequent calls (perhaps by another thread) will
            instead return the existing definition already registered.  If a definition already registered with that Key
            can not be an event metric (e.g. a sampled metric is defined with that Key) or if this instance defined value
            columns not present as compatible value columns in the existing registered definition with that Key, then an
            ArgumentException will be thrown to signal your programming mistake.</remarks>
            <returns>The actual usable definition with the same metrics system, category name, and counter name as this instance.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricDefinition.IsBound">
            <summary>
            Indicates if this definition is configured to retrieve its information directly from an object.
            </summary>
            <remarks>When true, metric instances and samples can be defined from a live object of the same type that was used 
            to generate the data binding.  It isn't necessary that the same object be used, just that it be a compatible
            type to the original type used to establish the binding.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricDefinition.BoundType">
            <summary>
            When bound, indicates the exact interface or object type that was bound.
            </summary>
            <remarks>When creating new metrics or metric samples, this data type must be provided in bound mode.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricDefinition.CompareTo(Loupe.Extensibility.Data.IEventMetricDefinition)">
            <summary>
            Indicates the relative sort order of this object to another of the same type.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricDefinition.Equals(Loupe.Extensibility.Data.IEventMetricDefinition)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricDefinition.Metrics">
            <summary>
            The set of metrics that use this definition.
            </summary>
            <remarks>All metrics with the same definition are of the same object type.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricDefinition.Values">
            <summary>
            The set of values defined for this metric definition
            </summary>
            <remarks>Any number of different values can be recorded along with each event to provide additional trends and filtering ability
            for later client analysis.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricDefinition.IsTrendableValueType(System.Type)">
            <summary>
            Indicates whether the provided object can be graphed as a trend.
            </summary>
            <param name="type">The type to be verified</param>
            <returns>True if the supplied type is trendable, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricDefinition.IsSupportedValueType(System.Type)">
            <summary>
            Indicates whether the provided type can be stored as a value or not.
            </summary>
            <remarks>Most types can be stored, with the value being the string representation of the type.
            Collections, arrays, and other such sets can't be stored as a single value.</remarks>
            <param name="type">The type to be verified</param>
            <returns>True if the supplied type is supported, false otherwise.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricDefinition.DefaultValue">
            <summary>
            The default value to display for this event metric.  Typically this should be a trendable value.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricDefinition.NameBound">
            <summary>
            Indicates if there is a binding for metric instance name.
            </summary>
            <remarks>When true, the Name Member Name and Name Member Type properties are available.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricDefinition.NameMemberName">
            <summary>
            The name of the member to invoke to determine the metric instance name.
            </summary>
            <remarks>This property is only valid when NameBound is true.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricDefinition.NameMemberType">
            <summary>
            The type of the member to be invoked to deterine the metric instance name (field, method, or property)
            </summary>
            <remarks>This property is only valid when NameBound is true.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricDefinition.SetReadOnly">
            <summary>
            Set this metric definition to be read-only and lock out further changes, allowing it to be instantiated and sampled.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricDefinition.Packet">
            <summary>
            The internal event metric definition packet
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricDefinition.OnMetricDictionaryCreate">
            <summary>
            Create a metric dictionary in our derived type for highest type fidelity.
            </summary>
            <returns>An event metric dictionary object for this event metric definition.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.EventMetricSample">
            <summary>
            One sample of a Event metric
            </summary>
            <remarks>Specific Event metrics will have a derived implementation of this class, however
            clients should work with this interface when feasible to ensure compatibility with any Event
            metric implementation.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricSample.#ctor(Gibraltar.Monitor.EventMetric,Gibraltar.Monitor.Serialization.EventMetricSamplePacket)">
            <summary>
            Create a new Event metric sample object for the provided metric and raw sample packet.
            </summary>
            <remarks>The metric sample is automatically added to the samples collection of the provided metric object.</remarks>
            <param name="metric">The metric object this sample applies to.</param>
            <param name="metricSamplePacket">The raw sample data packet.</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricSample.SetValue(System.String,System.Object)">
            <summary>
            Add a value to the values array of this sample by name.  
            </summary>
            <remarks>The value must be defined as part of the event metric definition associated with this sample
            or an exception will be thrown.  The data type must also be compatible with the data type configured
            on the event metric definition or no data will be recorded.</remarks>
            <param name="name">The unique name of the value being recorded (must match a value name in the metric definition)</param>
            <param name="value">The value to be recorded.</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricSample.SetValue(Gibraltar.Monitor.EventMetricValueDefinition,System.Object)">
            <summary>
            Records a value to the values array of this sample given its value definition.  
            </summary>
            <remarks>The value must be defined as part of the event metric definition associated with this sample
            or an exception will be thrown.  The data type must also be compatible with the data type configured
            on the event metric definition or no data will be recorded.
            If called more than once for the same value, the prior value will be replaced.</remarks>
            <param name="valueDefinition">The metric value definition object of the value to be recorded.</param>
            <param name="value">The value to be recorded.</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricSample.SetValue(System.Int32,System.Object)">
            <summary>
            Records a value to the values array of this sample given the zero-based index of the value definition to be used.  
            </summary>
            <remarks>The value must be defined as part of the event metric definition associated with this sample
            or an exception will be thrown.  The data type must also be compatible with the data type configured
            on the event metric definition or no data will be recorded.
            If called more than once for the same value, the prior value will be replaced.</remarks>
            <param name="valueIndex">The zero-based index within the value definition of the value to be recorded.</param>
            <param name="value">The value to be recorded.</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricSample.GetEffectiveValue(System.Int32)">
            <summary>
            Get the effective value, substituting zero for null.
            </summary>
            <param name="valueIndex">The numeric index of the value to retrieve</param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricSample.Metric">
            <summary>
            The Event metric this sample is for.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricSample.Packet">
            <summary>
            The raw packet for this event metric sample.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricSample.Value">
            <summary>
            The raw value of this metric.  Depending on the metric definition, this may be meaningless and instead a 
            calculation may need to be performed.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricSample.ComputeValue(Loupe.Extensibility.Data.IEventMetricSample,Loupe.Extensibility.Data.IEventMetricValueDefinition)">
            <summary>
            Compute the resultant value for this sample compared with the provided baseline sample.
            </summary>
            <remarks>
            <para>The baseline sample must be for a date and time prior to this sample for correct results.</para>
            <para>If the supplied trendValue isn't trendable, the number of samples with a non-null value will be counted.</para>
            <para>If the supplied trendValue is trendable, the Default Trend (average or sum) will be calculated for all
            samples between the supplied baseline sample and this sample, inclusive.</para>
            </remarks>
            <param name="baselineSample">The previous baseline sample to calculate a difference for</param>
            <param name="trendValue">The definition of the value from this event metric to trend.</param>
            <returns>The calculated counter value</returns>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricSample.Values">
            <summary>
            The array of values associated with this sample.  Any value may be a null object.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricSample.CompareTo(Gibraltar.Monitor.EventMetricSample)">
            <summary>
            Compare this object to another to determine sort order
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricSample.Equals(Gibraltar.Monitor.EventMetricSample)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.EventMetricSampleCollection">
            <summary>
            The collection of metric samples for a custom sampled metric.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricSampleCollection.#ctor(Gibraltar.Monitor.EventMetric)">
            <summary>
            Create a new sample collection for the specified metric object
            </summary>
            <param name="metric"></param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricSampleCollection.Add(Gibraltar.Monitor.EventMetricSample)">
            <summary>
            Add the specified custom sampled metric sample object to the collection
            </summary>
            <param name="newMetricSample">The new custom sampled metric object to add</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricSampleCollection.Add(Gibraltar.Monitor.Serialization.EventMetricSamplePacket)">
            <summary>
            Add a new custom sampled metric sample from the specified sample packet
            </summary>
            <param name="newMetricSamplePacket">The sample packet to create a new metric sample object from</param>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricSampleCollection.Item(System.Int32)">
            <summary>
            Select a metric sample by its numerical index
            </summary>
            <remarks>Setting a metric sample to a particular index is not supported and will result in an exception being thrown.</remarks>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricSampleCollection.Metric">
            <summary>
            The Event metric this sample is for.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricSampleCollection.First">
            <summary>
            The first object in the collection
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricSampleCollection.Last">
            <summary>
            The last object in the collection
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.EventMetricValueDefinition">
            <summary>
            Defines one value that can be associated with an event metric.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinition.#ctor(Gibraltar.Monitor.EventMetricDefinition,Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket)">
            <summary>
            Create a new value definition from the provided information.
            </summary>
            <param name="definition">The metric definition that owns this value definition</param>
            <param name="packet">The prepopulated value definition packet.</param>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinition.DefaultTrend">
            <summary>
            The default way that individual samples will be aggregated to create a graphable trend.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinition.Definition">
            <summary>
            The metric definition this value is associated with.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinition.Name">
            <summary>
            The unique name for this value within the event definition.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinition.Caption">
            <summary>
            The end-user display caption for this value.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinition.Description">
            <summary>
            The end-user description for this value.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinition.Type">
            <summary>
            The simple type of all data recorded for this value.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinition.SerializedType">
            <summary>
            The simple type that all data recorded for this value will be serialized as.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinition.IsTrendable">
            <summary>
            Indicates whether the metric value can be graphed as a trend.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinition.UnitCaption">
            <summary>
            The units of measure for the data captured with this value (if numeric)
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinition.Index">
            <summary>
            The index of this value definition (and related values) within the values collection.
            </summary>
            <remarks>Since sample values are provided as an object array it is useful to cache the 
            index of an individual value to rapidly retrieve specific values from each sample.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinition.Equals(Loupe.Extensibility.Data.IEventMetricValueDefinition)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinition.Bound">
            <summary>
            Indicates whether the value is configured for automatic collection through binding
            </summary>
            <remarks>If true, the other binding-related properties are available.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinition.MemberType">
            <summary>
            The type of member that this value is bound to (field, property or method)
            </summary>
            <remarks>This property is only valid if Bound is true.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinition.MemberName">
            <summary>
            The name of the member that this value is bound to.
            </summary>
            <remarks>This property is only valid if Bound is true.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinition.Packet">
            <summary>
            Conversion to the inner packet object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinition.MyIndex">
            <summary>
            The index of this value in the arrays, once the definition is read-only.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinition.AddField(Gibraltar.Serialization.PacketDefinition)">
            <summary>
            Add a definition for this value to the packet definition
            </summary>
            <param name="definition">The packet definition to add our value definition to</param>
        </member>
        <member name="T:Gibraltar.Monitor.EventMetricValueDefinitionCollection">
            <summary>
            A collection of event values for the parent metric definition.
            </summary>
            <remarks>This object is automatically created by the Event Metric Definition and is accessible through the Values property.</remarks>
        </member>
        <member name="E:Gibraltar.Monitor.EventMetricValueDefinitionCollection.CollectionChanged">
            <summary>
            Raised every time the collection's contents are changed to allow subscribers to automatically track changes.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinitionCollection.#ctor(Gibraltar.Monitor.EventMetricDefinition)">
            <summary>
            Create a new values dictionary for the specified metric definition
            </summary>
            <param name="definition">The parent metric definition object that will own this dictionary.</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinitionCollection.Add(System.String,System.Type)">
            <summary>
            Create a new value definition with the supplied name and type.  The name must be unique in this collection
            </summary>
            <remarks>Internally, only simple type are supported.  Any non-numeric, non-DateTimeOffset type will be converted to a string
            using the default ToString capability when it is recorded.</remarks>
            <param name="name">The unique name for this value definition</param>
            <param name="type">The simple type of this value</param>
            <returns>The newly created value definition</returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinitionCollection.Add(System.String,System.Type,System.String,System.String)">
            <summary>
            Create a new value definition with the supplied name and type.  The name must be unique in this collection
            </summary>
            <remarks>Internally, only simple type are supported.  Any non-numeric, non-DateTimeOffset type will be converted to a string
            using the default ToString capability when it is recorded.</remarks>
            <param name="name">The unique name for this value definition</param>
            <param name="type">The simple type of this value</param>
            <param name="caption">The end-user display caption for this value</param>
            <param name="description">The end-user description for this value.</param>
            <returns>The newly created value definition</returns>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinitionCollection.Definition">
            <summary>
            The metric definition this value is associated with.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinitionCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="name">The value name to locate in the collection</param>
            <returns>True if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinitionCollection.TryGetValue(System.String,Loupe.Extensibility.Data.IEventMetricValueDefinition@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="name">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinitionCollection.IndexOf(System.String)">
            <summary>
            Retrieve the index of a metric value definition by its name
            </summary>
            <param name="name">The value name to locate in the collection</param>
            <remarks>Items are identified using ordinal, case insensitive string comparisons.  If no value exists with the provided name an exception will be thrown.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if no value exists with the provided name.</exception>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinitionCollection.IndexOf(Loupe.Extensibility.Data.IEventMetricValueDefinition)">
            <summary>
            Searches for the specified object and returns the zero-based index of it within the dictionary if it is found.
            </summary>
            <param name="item">The object to search for</param>
            <returns>The zero based index of the object within the dictionary or -1 if not found.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinitionCollection.Insert(System.Int32,Loupe.Extensibility.Data.IEventMetricValueDefinition)">
            <summary>Inserting objects by index is not supported because the collection is sorted.</summary>
            <remarks>This method is implemented only for IList interface support and will throw an exception if called.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinitionCollection.RemoveAt(System.Int32)">
            <summary>Removing objects by index is not supported.</summary>
            <remarks>This method is implemented only for IList interface support and will throw an exception if called.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinitionCollection.Item(System.Int32)">
            <summary>
            Retrieve the metric definition by numeric index in collection. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinitionCollection.Item(System.String)">
            <summary>
            Retrieve metric object by its name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinitionCollection.Add(Loupe.Extensibility.Data.IEventMetricValueDefinition)">
            <summary>
            Add an existing value definition item to this collection
            </summary>
            <param name="item">An existing value definition item associated with our metric definition</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinitionCollection.Clear">
            <summary>
            Clearing objects is not supported.
            </summary>
            <remarks>This method is implemented only for ICollection interface support and will throw an exception if called.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinitionCollection.Contains(Loupe.Extensibility.Data.IEventMetricValueDefinition)">
            <summary>
            Indicates whether the collection already contains the specified definition object
            </summary>
            <remarks>Even if the object doesn't exist in the collection, if another object with the same key exists then 
            an exception will be thrown if the supplied object is added to the collection.  See Add for more information.</remarks>
            <param name="item">The event metric value definition object to look for</param>
            <returns>True if the object already exists in the collection, false otherwise</returns>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinitionCollection.CopyTo(Loupe.Extensibility.Data.IEventMetricValueDefinition[],System.Int32)">
            <summary>
            Copy the current list of event metric value definitions into the provided array starting at the specified index.
            </summary>
            <remarks>The array must be large enough to handle the entire contents of this dictionary starting at the provided array index.</remarks>
            <param name="array">The array to copy into</param>
            <param name="arrayIndex">The index to start inserting at</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinitionCollection.ToArray">
            <summary>
            Copy the current list of event metric value definitions into a new array.
            </summary>
            <returns>A new array containing all of the event metric value definitions in this collection.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinitionCollection.Count">
            <summary>
            The number of items currently in the dictionary.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.EventMetricValueDefinitionCollection.IsReadOnly">
            <summary>
            Indicates if the definition is considered read only.  
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinitionCollection.Remove(Loupe.Extensibility.Data.IEventMetricValueDefinition)">
            <summary>
            Removing objects is not supported.
            </summary>
            <remarks>This method is implemented only for ICollection interface support and will throw an exception if called.</remarks>
            <param name="item">The EventMetricValueDefinition item to remove.</param>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinitionCollection.SetAllIndex">
            <summary>
            Scan the collection and mark each value with its index (only once IsReadOnly is true).
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.EventMetricValueDefinitionCollection.OnCollectionChanged(Gibraltar.Monitor.CollectionChangedEventArgs{Loupe.Extensibility.Data.IEventMetricValueDefinitionCollection,Loupe.Extensibility.Data.IEventMetricValueDefinition})">
            <summary>
            This method is called every time a collection change event occurs to allow inheritors to override the change event.
            </summary>
            <remarks>If overridden, it is important to call this base implementation to actually fire the event.</remarks>
            <param name="e"></param>
        </member>
        <member name="T:Gibraltar.Monitor.IApplicationUserProvider">
            <summary>
            Implemented to translate an <see cref="T:System.Security.Principal.IPrincipal">IPrincipal</see> to a Loupe <see cref="T:Gibraltar.Monitor.ApplicationUser">ApplicationUser</see>.
            </summary>
            <remarks><para>Loupe stores extended information about each application user in an <see cref="T:Gibraltar.Monitor.ApplicationUser">ApplicationUser</see>
            object.  This application user is associated with a single IPrincipal based on the name of that principal (from the Identity).
            Each time a data packet is recorded that has an IPrincipal specified the name is checked.  If no ApplicationUser has been
            provided then the TryGetApplicationUser method is invoked.  Once a valid application user is provided it is cached for
            the remainder of the session and won't be requested again.</para>
            <para>If the application user can't be determined for any reason the provider should return false.  The
            provider can query databases and other information if necessary to get a complete set of information for
            the application user.  Any messages logged by the provider directly or indirectly will be non-blocking,
            possibly being dropped if necessary, to ensure the Loupe agent doesn't deadlock.</para>
            <para>If the application is running in anonymous mode the ApplicationUserProvider won't be invoked.</para></remarks>
        </member>
        <member name="M:Gibraltar.Monitor.IApplicationUserProvider.TryGetApplicationUser(System.Security.Principal.IPrincipal,System.Lazy{Gibraltar.Monitor.ApplicationUser})">
            <summary>
            Determine the application user for the provided principal
            </summary>
            <param name="principal">The Principal being resolved</param>
            <param name="applicationUser">The application user if it could be provided</param>
            <remarks>Application Users are lazily initialized when the Value property is invoked, but the ApplicationUser
            object will be ignored if the method returns false.</remarks>
            <returns>True if the application user could be provided, false otherwise.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.ILoupeFilter">
            <summary>
            Inline filter for packets evaluated for each packet
            </summary>
            <remarks>Implementations can rewrite or suppress packets.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.ILoupeFilter.Process(Gibraltar.Messaging.IMessengerPacket,System.Boolean@)">
            <summary>
            Process the packet
            </summary>
            <param name="packet">The packet to process</param>
            <param name="cancel">Set to true to suppress writing this packet</param>
        </member>
        <member name="T:Gibraltar.Monitor.ILoupeMonitor">
            <summary>
            Extends Loupe to monitor external data sources in the background
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ILoupeMonitor.Caption">
            <summary>
            A display caption for this monitor
            </summary>
            <remarks>End-user display caption for this monitor.  Captions are typically
            not unique to a given instance of a monitor.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.ILoupeMonitor.Initialize(Gibraltar.Messaging.Publisher)">
            <summary>
            Initialize the monitor so it is ready to be polled.
            </summary>
            <param name="publisher">The publisher that owns the monitor</param>
        </member>
        <member name="M:Gibraltar.Monitor.ILoupeMonitor.Poll">
            <summary>
            Poll external data sources and record information
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.IMessageSourceProvider">
            <summary>
            An interface by which conversion classes can provide the details of the source of a log message.
            </summary>
            <remarks>Unavailable fields may return null.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.IMessageSourceProvider.MethodName">
            <summary>
            Should return the simple name of the method which issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.IMessageSourceProvider.ClassName">
            <summary>
            Should return the full name of the class (with namespace) whose method issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.IMessageSourceProvider.FileName">
            <summary>
            Should return the name of the file containing the method which issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.IMessageSourceProvider.LineNumber">
            <summary>
            Should return the line within the file at which the log message was issued.
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.IPrincipalResolver">
            <summary>
            Resolves the user principle for the current thread
            </summary>
            <remarks>The resolver is invoked every time user-related data is recorded
            to associate an <see cref="T:System.Security.Principal.IPrincipal">IPrincipal</see> with the data.  It is invoked on the thread that
            is recording the data so it can reference the current activity context to determine
            the IPrincipal, however this means any implementation should be as fast as
            feasible and should not make blocking calls - like to a network, file system,
            or database.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.IPrincipalResolver.TryResolveCurrentPrincipal(System.Security.Principal.IPrincipal@)">
            <summary>
            Resolve the user principal for the current activity
            </summary>
            <param name="principal">The <see cref="T:System.Security.Principal.IPrincipal">principal</see> that was resolved, if any.</param>
            <returns>True if the <see cref="T:System.Security.Principal.IPrincipal">IPrincipal</see> was resolved.</returns>
            <remarks><para>Implementations should be optimized to not throw
            exceptions but instead return false if no principal could be resolved.  Since
            this method is called on each logging thread before queuing data it is
            important to have a high performance, non-blocking implementation.</para>
            <para>To avoid deadlocks and infinite loops, any attempt to log
            within this method (directly or indirectly through a dependency) will
            be ignored.</para></remarks>
        </member>
        <member name="T:Gibraltar.Monitor.LocalLogMessage">
            <summary>
            An intermediary class to log a Gibraltar log message from within Gibraltar libraries. 
            </summary>
            <remarks>This class knows how to formulate a Gibraltar log message including an optional XML details string and
            optionally including an associated Exception object.  Importantly, it knows how to acquire information about the
            source of a log message from the current call stack without filtering out stack frames to attribute the message
            within Gibraltar libraries, and acts as its own IMessageSourceProvider when handing it off to the central Log.
            Thus, this object must be created while still within the same call stack as the origination of the log message.
            Used internally by our CLR listener (etc).</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.LocalLogMessage.#ctor(Loupe.Extensibility.Data.LogMessageSeverity,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Object[])">
            <summary>
            Creates a LocalLogMessage object with default LogWriteMode behavior and an XML details string.
            </summary>
            <remarks>This constructor creates a LocalLogMessage with the default LogWriteMode behavior (Queued)
            and a specified XML details string (which may be null).  This constructor also allows the log message
            to be of local origin, so Gibraltar stack frames will not be automatically skipped over when determining
            the originator for internally-issued log messages.</remarks>
            <param name="severity">The severity of the log message.</param>
            <param name="logSystem">The name of the logging system the message was issued through, such as "Trace" or
            "Gibraltar".</param>
            <param name="categoryName">The logging category or application subsystem category that the log message
            is associated with, such as "Trace", "Console", "Exception", or the logger name in Log4Net.</param>
            <param name="skipFrames">The number of stack frames to skip over to find the first candidate to be
            identified as the source of the log message.</param>
            <param name="detailsXml">Optional.  An XML document with extended details about the message.  Can be null.</param>
            <param name="caption">A single line display caption.</param>
            <param name="description">Optional.  A multiline description to use which can be a format string for for the arguments.  Can be null.</param>
            <param name="args">Optional additional args to match up with the formatting string.</param>
        </member>
        <member name="M:Gibraltar.Monitor.LocalLogMessage.#ctor(Loupe.Extensibility.Data.LogMessageSeverity,Gibraltar.Monitor.LogWriteMode,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Object[])">
            <summary>
            Creates a LocalLogMessage object with specified LogWriteMode behavior and an XML details string.
            </summary>
            <remarks>This constructor creates a LocalLogMessage with specified LogWriteMode behavior (queue-and-return
            or wait-for-commit) and XML details string (which may be null).  This constructor also allows the log message
            to be of local origin, so Gibraltar stack frames will not be automatically skipped over when determining
            the originator for internally-issued log messages.</remarks>
            <param name="severity">The severity of the log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="logSystem">The name of the logging system the message was issued through, such as "Trace" or
            "Gibraltar".</param>
            <param name="categoryName">The logging category or application subsystem category that the log message
            is associated with, such as "Trace", "Console", "Exception", or the logger name in Log4Net.</param>
            <param name="skipFrames">The number of stack frames to skip over to find the first candidate to be
            identified as the source of the log message.</param>
            <param name="detailsXml">Optional.  An XML document with extended details about the message.  Can be null.</param>
            <param name="caption">A single line display caption.</param>
            <param name="description">Optional.  A multiline description to use which can be a format string for for the arguments.  Can be null.</param>
            <param name="args">Optional additional args to match up with the formatting string.</param>
        </member>
        <member name="M:Gibraltar.Monitor.LocalLogMessage.#ctor(Loupe.Extensibility.Data.LogMessageSeverity,Gibraltar.Monitor.LogWriteMode,System.String,System.String,System.Int32,System.Exception,System.Boolean,System.String,System.String,System.String,System.Object[])">
            <summary>
            Creates a LocalLogMessage object with specified LogWriteMode behavior, Exception object, and XML details string.
            </summary>
            <remarks>This constructor creates a LocalLogMessage with specified LogWriteMode behavior (queue-and-return
            or wait-for-commit), a specified Exception object to attach, and XML details string (which may be null).
            This constructor also allows the log message to be of local origin, so Gibraltar stack frames will not be
            automatically skipped over when determining the originator for internally-issued log messages.</remarks>
            <param name="severity">The severity of the log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="logSystem">The name of the logging system the message was issued through, such as "Trace" or
            "Gibraltar".</param>
            <param name="categoryName">The logging category or application subsystem category that the log message
            is associated with, such as "Trace", "Console", "Exception", or the logger name in Log4Net.</param>
            <param name="skipFrames">The number of stack frames to skip over to find the first candidate to be
            identified as the source of the log message.</param>
            <param name="exception">An exception associated with this log message (or null for none).</param>
            <param name="attributeToException">True if the call stack from where the exception was thrown should be used for log message attribution</param>
            <param name="detailsXml">Optional.  An XML document with extended details about the message.  Can be null.</param>
            <param name="caption">A single line display caption.</param>
            <param name="description">Optional.  A multiline description to use which can be a format string for for the arguments.  Can be null.</param>
            <param name="args">Optional additional args to match up with the formatting string.</param>
        </member>
        <member name="T:Gibraltar.Monitor.LocalRepository">
            <summary>
            The local collection repository, a minimalistic repository
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.LocalRepository.LogCategory">
            <summary>
            The log category
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.LocalRepository.RefreshRequest">
            <summary>
            A single request to refresh our local cache of file information
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.RefreshRequest.Timestamp">
            <summary>
            When the request was made
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.RefreshRequest.Criteria">
            <summary>
            What sessions should be covered by the request
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.RefreshRequest.Force">
            <summary>
            If a refresh should be forced even if we don't think the data is dirty
            </summary>
        </member>
        <member name="E:Gibraltar.Monitor.LocalRepository.CollectionChanged">
            <summary>
            Raised every time the sessions collection changes.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.#ctor(System.String,System.String)">
            <summary>
            Open a specific local repository
            </summary>
            <param name="productName">The product name for operations in this repository</param>
            <param name="overridePath">The path to use instead of the default path for the repository</param>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.CalculateRepositoryPath(System.String,System.String)">
            <summary>
            Calculate the best path for the log folder and the repository
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.DefaultRepositoryPath">
            <summary>
            Calculate the best path for the default 
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.Id">
            <summary>
            A unique id for this repository.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.IsDirty">
            <summary>
            Indicates if there are unsaved changes.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.IsReadOnly">
            <summary>
            Indicates if the repository is read only (sessions can't be added or removed).
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.Name">
            <summary>
            The unique name for this repository (typically the file name or URI).
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.Caption">
            <summary>
            A short end-user caption to display for the repository.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.Description">
            <summary>
            An extended end-user description of the repository.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.SupportsFragments">
            <summary>
            Indicates if the repository supports fragment files or not.  Most do.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.Products">
            <summary>
            The set of products, applications, and versions loaded into the repository
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.AddSession(System.IO.Stream)">
            <summary>
            Add a session (full file stream or fragment of a session) to the repository
            </summary>
            <param name="sessionStream">A stream of the session data (full file or fragment) to add</param>
            <remarks><para>If the session already exists in the repository its information will be 
            merged with the provided session and the result saved in the repository</para>
            <para>If the stream is to a session file fragment then it will either be added
            to the set of fragments (if it doesn't exist) or ignored (if it does).</para>
            <para>The stream will be disposed of by the repository, potentially some time after
            the call is completed.  It must remain valid and unmodified for that time to ensure
            that the session can be processed correctly and efficiently.</para></remarks>
            <returns>True if the session was added, false if it already existed</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.GetSession(System.Guid,System.Guid[])">
            <summary>
            Load a session by its Id
            </summary>
            <returns>A session object representing the specified session.  If no session can be
            found with the provided Id an exception will be thrown.</returns>
            <exception cref="T:System.IO.FileNotFoundException" caption="FileNotFoundException">Thrown if no session exists with the specified Id</exception>
            <param name="sessionId">The unique Id of the session to be loaded.</param>
            <param name="fragmentIds">Optional.  The unique ids of the files to load</param>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.GetSessionFileIds(System.Guid)">
            <summary>
            Retrieve the ids of the sessions files known locally for the specified session
            </summary>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.LoadSession(System.Guid)">
            <summary>
            Load a session by its Id
            </summary>
            <param name="sessionId">The unique Id of the session to be loaded.</param>
            <returns>A session object representing the specified session.  If no session can be
            found with the provided Id an exception will be thrown.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.IsLoggingEnabled">
            <summary>
            Indicates if the database should log operations to Gibraltar or not.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.LoadSessionStream(System.Guid)">
            <summary>
            Get a generic stream for the contents of a session
            </summary>
            <param name="sessionId">The unique Id of the session to retrieve the stream for.</param>
            <returns>A stream that should be immediately copied and then disposed.  If no session could be found with the provided Id an exception will be thrown.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.LoadSessionFileStream(System.Guid,System.Guid)">
            <summary>
            Get a generic stream for the contents of a session file
            </summary>
            <param name="sessionId">The unique Id of the session to retrieve the stream for.</param>
            <param name="fileId">The unique Id of the session file to retrieve the stream for.</param>
            <returns>A stream that should be immediately copied and then disposed.  If no file could be found with the provided Id an exception will be thrown.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.TryLoadSessionFileStream(System.Guid,System.Guid,System.IO.Stream@)">
            <summary>
            Try to get a stream pointing to a live file
            </summary>
            <returns>True if a file stream was found, false otherwise</returns>
            <returns>A stream that should be immediately copied and then disposed.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.LoadSessionFiles(System.Guid,Gibraltar.Data.SessionHeader@,System.Collections.Generic.IList{System.IO.FileInfo}@)">
            <summary>
            Find the session fragments in our local repository for the specified session Id.
            </summary>
            <param name="sessionId"></param>
            <param name="sessionHeader"></param>
            <param name="sessionFragments"></param>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.Refresh">
            <summary>
            Perform an immediate, synchronous refresh
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.Refresh(System.Boolean,System.Boolean)">
            <summary>
            Update the local repository with the latest information from the file system
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.Refresh(System.Boolean,System.Boolean,Loupe.Extensibility.Data.SessionCriteria)">
            <summary>
            Update the local repository with the latest information from the file system
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.Remove(System.Guid)">
            <summary>
            Remove a session from the repository and all folders by its Id
            </summary>
            <param name="sessionId">The unique Id of the session to be removed</param>
            <returns>True if a session existed and was removed, false otherwise.</returns>
            <remarks>If no session is found with the specified Id then no exception is thrown.  Instead,
            false is returned.  If a session is found and removed True is returned.  If there is a problem
            removing the specified session (and it exists) then an exception is thrown.  The session will
            be removed from all folders that may reference it as well as user history and preferences.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.Remove(System.Collections.Generic.IList{System.Guid})">
            <summary>
            Remove sessions from the repository and all folders by its Id
            </summary>
            <param name="sessionIds">An array of the unique Ids of the sessions to be removed</param>
            <returns>True if a session existed and was removed, false otherwise.</returns>
            <remarks>If no sessions are found with the specified Ids then no exception is thrown.  Instead,
            false is returned.  If at least one session is found and removed True is returned.  If there is a problem
            removing one or more of the specified sessions (and it exists) then an exception is thrown.  The sessions will
            be removed from all folders that may reference it as well as user history and preferences.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.Remove(System.Guid,System.Guid)">
            <summary>
            Remove a session from the repository and all folders by its Id
            </summary>
            <param name="sessionId">The unique Id of the session to be removed</param>
            <param name="fileId">The unique Id of the session fragment to be removed</param>
            <returns>True if a session existed and was removed, false otherwise.</returns>
            <remarks>If no session is found with the specified Id then no exception is thrown.  Instead,
            false is returned.  If a session is found and removed True is returned.  If there is a problem
            removing the specified session (and it exists) then an exception is thrown.  The session will
            be removed from all folders that may reference it as well as user history and preferences.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.SessionDataExists(System.Guid)">
            <summary>
            Find if session data (more than just the header information) exists for a session with the provided Id
            </summary>
            <param name="sessionId">The unique Id of the session to be checked.</param>
            <returns>True if the repository has at least some session data in the repository, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.SessionDataExists(System.Guid,System.Guid)">
            <summary>
            Find if session data (more than just the header information) exists for a session with the provided Id
            </summary>
            <param name="sessionId">The unique Id of the session to be checked.</param>
            <param name="fileId">The unique Id of the session fragment to be checked.</param>
            <returns>True if the repository has the indicated session fragment in the repository, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.SessionExists(System.Guid)">
            <summary>
            Find if a session exists with the provided Id
            </summary>
            <param name="sessionId">The unique Id of the session to be checked.</param>
            <returns>True if the session exists in the repository, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.SessionIsRunning(System.Guid)">
            <summary>
            Find if the session is running with the provided Id
            </summary>
            <param name="sessionId">The unique Id of the session to be checked.</param>
            <returns>True if the session exists in the repository and is running, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.SetSessionNew(System.Guid,System.Boolean)">
            <summary>
            Set or clear the New flag for a sessions
            </summary>
            <param name="sessionId">The session to affect</param>
            <param name="isNew">True to mark the sessions as new, false to mark them as not new.</param>
            <returns>True if a session was changed, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.SetSessionsNew(System.Collections.Generic.IList{System.Guid},System.Boolean)">
            <summary>
            Set or clear the New flag for a list of sessions
            </summary>
            <param name="sessionIds">The sessions to affect</param>
            <param name="isNew">True to mark the sessions as new, false to mark them as not new.</param>
            <returns>True if a session was changed, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.Find(System.Predicate{Loupe.Extensibility.Data.ISessionSummary})">
            <summary>
            Retrieves all the sessions that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1">Predicate</see> delegate that defines the conditions of the sessions to search for.</param>
            <remarks>
            The <see cref="T:System.Predicate`1">Predicate</see> is a delegate to a method that returns true if the object passed to it matches the
            conditions defined in the delegate. The sessions of the repository are individually passed to the <see cref="T:System.Predicate`1">Predicate</see> delegate, moving forward in the List, starting with the first session and ending with the last session.
            </remarks>
            <returns>A List containing all the sessions that match the conditions defined by the specified predicate, if found; otherwise, an empty List.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.Sessions">
            <summary>
            The set of all sessions in the repository.
            </summary>
            <remarks><para>This contains the summary information. To load the full contents of a
            a session where local data files are available use the LoadSession method.</para>
            <para>The supplied collection is a binding list and supports update events for the 
            individual sessions and contents of the repository.</para></remarks>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.TempPath">
            <summary>
            A temporary path within the repository that can be used to store working data
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.LoadSessionHeader(System.String)">
            <summary>
            Attempt to load the session header from the specified file, returning null if it can't be loaded
            </summary>
            <param name="sessionFileNamePath">The full file name &amp; path</param>
            <returns>The session header, or null if it can't be loaded</returns>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.RepositoryPath">
            <summary>
            The path on disk to the repository
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.RepositoryLockPath">
            <summary>
            The path on disk to the repository session locks
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Called whenever the collection changes.
            </summary>
            <param name="e"></param>
            <remarks>Note to inheritors:  If overriding this method, you must call the base implementation to ensure
            that the appropriate events are raised.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.OnRefresh(System.Boolean)">
            <summary>
            Called by the base class to refresh cached data
            </summary>
            <param name="force"></param>
        </member>
        <member name="P:Gibraltar.Monitor.LocalRepository.SessionCache">
            <summary>
            The current session cache
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.FindFragment(Gibraltar.Monitor.SessionFileInfo{System.IO.FileInfo},System.Guid)">
            <summary>
            Finds the specified file fragment in the provided session if it exists.
            </summary>
            <param name="fileId"></param>
            <param name="sessionFileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.UpdateCache(Loupe.Extensibility.Data.SessionCriteria)">
            <summary>
            Immediately update the cache from disk
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.LoadSessions(Loupe.Extensibility.Data.SessionCriteria)">
            <summary>
            Scan the repository directory for all of the log files for this repository an build an index on the fly
            </summary>
            <returns>A new index of the sessions in the folder</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.LoadSessionsFromDirectory(System.String,System.Collections.Generic.Dictionary{System.Guid,Gibraltar.Monitor.SessionFileInfo{System.IO.FileInfo}},System.Collections.Generic.Dictionary{System.Guid,Gibraltar.Monitor.SessionFileInfo{System.IO.FileInfo}},System.Boolean)">
            <summary>
            
            </summary>
            <param name="directory"></param>
            <param name="sessions"></param>
            <param name="crashConversionCandidates"></param>
            <param name="isNew"></param>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.IsSessionRunning(System.Guid)">
            <summary>
            Indicates if the current session is running
            </summary>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.CheckAndPerformCrashedSessionConversion(Gibraltar.Monitor.SessionFileInfo{System.IO.FileInfo})">
            <summary>
            Checks a running session to see if it should be converted to a crashed session, and if so converts it.
            </summary>
            <param name="session">The full set of session information</param>
            <returns>True if it was changed, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.GetRunningSessionLock(System.Guid)">
            <summary>
            Get the current running session lock
            </summary>
            <param name="sessionId"></param>
            <returns>Null if the lock couldn't be acquired, the InterprocessLock otherwise</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.GenerateConsentFileName(System.String,System.String)">
            <summary>
            Create a consistent, sanitized file name for an auto send consent specification
            </summary>
            <param name="product"></param>
            <param name="applicationName"></param>
            <returns>The file name</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LocalRepository.SetSessionNew(System.String,System.Guid,System.Boolean)">
            <summary>
            Changes the new status of a single session
            </summary>
            <param name="destinationDirectory"></param>
            <param name="sessionId"></param>
            <param name="isNew"></param>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Monitor.Log">
            <summary>
            Handles interfacing with a single log file for the purpose of writing log messages.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.Log.LogExtension">
            <summary>
            The file extension (without period) for a Gibraltar Log File.  Used internally to Gibraltar.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.Log.PackageExtension">
            <summary>
            The file extension (without period) for a Gibraltar Package File.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.Log.FileFilter">
            <summary>
            A standard file filter for standard file dialogs that allows selection of packages and logs.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.Log.FileFilterLogsOnly">
            <summary>
            A standard file filter for standard file dialogs that allows selection of logs.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.Log.FileFilterPackagesOnly">
            <summary>
            A standard file filter for standard file dialogs that allows selection of packages.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.Log.ThisLogSystem">
            <summary>
            The log system name for Gibraltar
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.Log.Category">
            <summary>
            The category for trace messages
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.Log.GeneralCategory">
            <summary>
            The default category name, replacing a null or empty category.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.Log.ExceptionCategory">
            <summary>
            The default category name for a dedicated Exception message.
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.Log.InitializingEventHandler">
            <summary>
            Handler for the Initialize event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Gibraltar.Monitor.Log.Initializing">
            <summary>
            Raised whenever the log system is being started to enable programmatic configuration.
            </summary>
            <remarks>You can cancel initialization by setting the cancel property to true in the event arguments. 
            If canceled, the log system will not record any information but allow all calls to be made.
            Even if canceled it is possible for the logging system to attempt to reinitialize if a call 
            is explicitly made to start a session.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Log.BreakPointEnable">
            <summary>
            A temporary flag to tell us whether to invoke a Debugger.Break() when Log.DebugBreak() is called.
            </summary>
            <remarks>True enables breakpointing, false disables.  This should probably be replaced with an enum
            to support multiple modes, assuming the basic usage works out.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Log.DebugBreak">
            <summary>
            Automatically stop debugger like a breakpoint, if enabled.
            </summary>
            <remarks>This will check the state of Log.BreakPointEnable and whether a debugger is attached,
            and will breakpoint only if both are true.  This should probably be extended to handle additional
            configuration options using an enum, assuming the basic usage works out.  This method is conditional
            upon a DEBUG build and will be safely ignored in release builds, so it is not necessary to wrap calls
            to this method in #if DEBUG (acts much like Debug class methods).</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Log.SilentMode">
            <summary>
            Indicates if the logging system should be running in silent mode (for example when running in the agent).
            </summary>
            <remarks>Pass-through to the setting in CommonFileTools.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Log.IsLoggingActive">
            <summary>
            Indicates if logging is active, performing initialization if necessary
            </summary>
            <returns>True if logging is active, false if it isn't at this time.</returns>
            <remarks>The very first time this is used it will attempt to start the logging system even if 
            it hasn't already been started.  If that call is canceled through our Initializing event then 
            it will return false.  After the first call it will indicate if logging is currently initialized
            and not attempt to initialize.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Log.Initialized">
            <summary>
            Indicates if the log system has been initialized and is operational
            </summary>
            <remarks>Once true it will never go false, however if false it may go true at any time.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Log.Initialize(Loupe.Configuration.AgentConfiguration)">
            <summary>
            Attempt to initialize the log system.  If it is already initialized it will return immediately.
            </summary>
            <param name="configuration">Optional.  A default configuration to start with instead of the configuration file.</param>
            <returns>True if the initialization has completed (on this call or prior),
            false if a re-entrant call returns to avoid deadlocks and infinite recursion.</returns>
            <remarks>If calling initialization from a path that may have started with the trace listener,
            you must set suppressTraceInitialize to true to guarantee that the application will not deadlock
            or throw an unexpected exception.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Log.Configuration">
            <summary>
            The running publisher configuration.  This is always safe even when logging is disabled.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Log.SessionSummary">
            <summary>
            The common information about the active log session.  This is always safe even when logging is disabled.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Log.MessageAlertNotifier">
            <summary>
            Get the official Error Alert Notifier instance.  Will create it if it doesn't already exist.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Log.MessageNotifier">
            <summary>
            Get the official Notifier instance that returns all messages.  Will create it if it doesn't already exist.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Log.ApplicationUserProvider">
            <summary>
            An implementation of IApplicationUserProvider to capture Application User details from an IPrinciple
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Log.PrincipalResolver">
            <summary>
            An implementation of IPrincipalResolver to determine the IPrinciple for each log message and metric sample
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Log.RegisterFilter(Gibraltar.Monitor.ILoupeFilter)">
            <summary>
            Add an implementation of IFilter to inspect and modify data recorded by Loupe.
            </summary>
            <param name="filter">A new filter</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.UnregisterFilter(Gibraltar.Monitor.ILoupeFilter)">
            <summary>
            Remove the specified IFilter implementation from the set of filters.
            </summary>
            <param name="filter">The filter to remove</param>
        </member>
        <member name="P:Gibraltar.Monitor.Log.Repository">
            <summary>
            The current process's collection repository
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Log.CanSendSessions(System.String@)">
            <summary>
            Indicates if we have sufficient configuration information to automatically send packages while running (via email or server).
            </summary>
            <remarks>This checks whether there is sufficient configuration to submit sessions using the current configuration.</remarks>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Log.CanSendSessionsOnExit(System.String@)">
            <summary>
            Indicates if we have sufficient configuration information to automatically send packages upon exit (via email or server).
            </summary>
            <remarks>This checks whether there is sufficient configuration to submit sessions through the packager upon exit.
            It also checks that the packager executable can be found.</remarks>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Log.Flush">
            <summary>
            Ensure all messages have been written completely
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Log.IsEmailSubmissionConfigured(System.String@)">
            <summary>
            Indicates if we have sufficient configuration information to automatically send packages by email submission.
            </summary>
            <returns></returns>
            <remarks>Does not check if email submission is allowed</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Log.IsHubSubmissionConfigured(System.String@)">
            <summary>
            Indicates if we have sufficient configuration information to automatically send packages to a Loupe Server.
            </summary>
            <remarks>This checks whether there is sufficient configuration to submit sessions through a server.
            It does NOT check whether the packager is configured to allow submission through a server, because
            they may also be sent directly from Agent without using the packager.</remarks>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Log.CanFindPackager(System.String@)">
            <summary>
            Indicates if the packager executable is available where this process can find it.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Log.SendSessionsOnExit">
            <summary>
            Indicates if the agent should package &amp; send sessions for the current application after this session exits.
            </summary>
            <remarks>When true the system will automatically </remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Log.ExplicitStartSessionCalled">
            <summary>
            Indicates if the StartSession API method was ever explicitly called.
            </summary>
            <remarks>If StartSession was not explicitly called then an ApplicationExit event will implicitly call
            EndSession for easy Gibraltar drop-in support.  If StartSession was explicitly called then we expect
            the client to make a corresponding explicit EndSession call, and the Agent's ApplicationExit handler
            will not call EndSession.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Log.Metrics">
            <summary>
            Our one metric definition collection for capturing metrics in this process
            </summary>
            <remarks>
            For performance reasons, it is important that there is only a single instance of a particular metric
            for any given process.  This is managed automatically provided only this metrics collection is used.
            If there is a duplicate metric in the data stream, that information will be discarded when the log 
            file is read (but there is no effect at runtime).
            </remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Log.IsSessionEnding">
            <summary>
            Reports whether EndSession() has been called to formally end the session.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Log.IsSessionEnded">
            <summary>
            Reports whether EndSession() has completed flushing the end-session command to the log.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Log.Write(System.Collections.Generic.List{Gibraltar.Monitor.MetricSample})">
            <summary>
            Record the provided set of metric samples to the log.
            </summary>
            <remarks>When sampling multiple metrics at the same time, it is faster to make a single write call
            than multiple calls.</remarks>
            <param name="samples">A list of metric samples to record.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.Write(Gibraltar.Monitor.MetricSample)">
            <summary>
            Record the provided metric sample to the log.
            </summary>
            <remarks>Most applications should use another object or the appropriate log method on this object to
            create log information instead of manually creating log packets and writing them here.  This functionality
            is primarily for internal support of the various log listeners that support third party log systems.</remarks>
            <param name="sample"></param>
        </member>
        <member name="P:Gibraltar.Monitor.Log.AgentVersion">
            <summary>
            The version information for the Gibraltar Agent.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Log.Write(Loupe.Extensibility.Data.LogMessageSeverity,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a trace message directly to the Gibraltar log.
            </summary>
            <remarks>The log message will be attributed to the caller of this method.  Wrapper methods should
            instead call the WriteMessage() method in order to attribute the log message to their own outer
            callers.</remarks>
            <param name="severity">The log message severity.</param>
            <param name="category">The category for this log message.</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.Write(Loupe.Extensibility.Data.LogMessageSeverity,Gibraltar.Monitor.LogWriteMode,System.Exception,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a log message directly to the Gibraltar log with an attached Exception and specifying
            Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>The log message will be attributed to the caller of this method.  Wrapper methods should
            instead call the WriteMessage() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="severity">The log message severity.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="category">The category for this log message.</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.Write(Loupe.Extensibility.Data.LogMessageSeverity,Gibraltar.Monitor.LogWriteMode,System.Exception,System.Int32,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a log message directly to the Gibraltar log with an attached Exception and specifying
            Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>The log message will be attributed to the caller of this method.  Wrapper methods should
            instead call the WriteMessage() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="severity">The log message severity.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="skipFrames">The number of stack frames to skip back over to determine the original caller.</param>
            <param name="category">The category for this log message.</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.Write(Loupe.Extensibility.Data.LogMessageSeverity,Gibraltar.Monitor.LogWriteMode,System.Exception,System.Boolean,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a log message directly to the Gibraltar log with an attached Exception and specifying
            Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>The log message will be attributed to the caller of this method.  Wrapper methods should
            instead call the WriteMessage() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="severity">The log message severity.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="attributeToException">True if the call stack from where the exception was thrown should be used for log message attribution</param>
            <param name="category">The category for this log message.</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.WriteMessage(Loupe.Extensibility.Data.LogMessageSeverity,Gibraltar.Monitor.LogWriteMode,System.Int32,System.Exception,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a trace message directly to the Gibraltar log with an optional attached Exception and specifying
            Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This overload of WriteMessage() is provided as an API hook for simple wrapping methods
            which need to attribute a log message to their own outer callers.  Passing a skipFrames of 0 would
            designate the caller of this method as the originator; a skipFrames of 1 would designate the caller
            of the caller of this method as the originator, and so on.  It will then extract information about
            the originator automatically based on the indicated stack frame.  Bridge logic adapting from a logging
            system which already determines and provides information about the originator (such as log4net) into
            Gibraltar should use the other overload of WriteMessage(), passing a customized IMessageSourceProvider.</para>
            <para>This method also requires explicitly selecting the LogWriteMode between Queued (the normal default,
            for optimal performance) and WaitForCommit (to help ensure critical information makes it to disk, e.g. before
            exiting the application upon return from this call).  See the LogWriteMode enum for more information.</para>
            <para>This method also allows an optional Exception object to be attached to the log message (null for
            none).  And the message may be a simple message string, or a format string followed by arguments.</para></remarks>
            <param name="severity">The log message severity.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="skipFrames">The number of stack frames to skip back over to determine the original caller.</param>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="detailsXml">Optional.  An XML document with extended details about the message.  Can be null.</param>
            <param name="caption">A single line display caption.</param>
            <param name="description">Optional.  A multi-line description to use which can be a format string for the arguments.  Can be null.</param>
            <param name="args">Optional.  A variable number of arguments to insert into the formatted description string.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.WriteMessage(Loupe.Extensibility.Data.LogMessageSeverity,Gibraltar.Monitor.LogWriteMode,System.Int32,System.Exception,System.Boolean,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a trace message directly to the Gibraltar log with an optional attached Exception and specifying
            Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This overload of WriteMessage() is provided as an API hook for simple wrapping methods
            which need to attribute a log message to their own outer callers.  Passing a skipFrames of 0 would
            designate the caller of this method as the originator; a skipFrames of 1 would designate the caller
            of the caller of this method as the originator, and so on.  It will then extract information about
            the originator automatically based on the indicated stack frame.  Bridge logic adapting from a logging
            system which already determines and provides information about the originator (such as log4net) into
            Gibraltar should use the other overload of WriteMessage(), passing a customized IMessageSourceProvider.</para>
            <para>This method also requires explicitly selecting the LogWriteMode between Queued (the normal default,
            for optimal performance) and WaitForCommit (to help ensure critical information makes it to disk, e.g. before
            exiting the application upon return from this call).  See the LogWriteMode enum for more information.</para>
            <para>This method also allows an optional Exception object to be attached to the log message (null for
            none).  And the message may be a simple message string, or a format string followed by arguments.</para></remarks>
            <param name="severity">The log message severity.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="skipFrames">The number of stack frames to skip back over to determine the original caller.</param>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="attributeToException">True if the call stack from where the exception was thrown should be used for log message attribution</param>
            <param name="detailsXml">Optional.  An XML document with extended details about the message.  Can be null.</param>
            <param name="caption">A single line display caption.</param>
            <param name="description">Optional.  A multi-line description to use which can be a format string for the arguments.  Can be null.</param>
            <param name="args">Optional.  A variable number of arguments to insert into the formatted description string.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.Trace(System.String,System.Object[])">
            <summary>
            Write a Verbose trace message directly to the Gibraltar log.
            </summary>
            <remarks>Information about the current thread and calling method is automatically captured.
            The log message will be attributed to the immediate caller of this method.  Wrapper implementations
            should instead use the Log.Write(...) overloads.</remarks>
            <param name="format">The string message to use, or a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments to insert into the formatted message string.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Write a Verbose trace message directly to the Gibraltar log.
            </summary>
            <remarks><para>Information about the current thread and calling method is automatically captured.
            The log message will be attributed to the immediate caller of this method.  Wrapper implementations
            should instead use the Log.Write(...) overloads.</para>
            <para>This method also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="format">The string message to use, or a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments to insert into the formatted message string.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.RecordException(System.Int32,System.Exception,System.String,System.String,System.Boolean)">
            <summary>
            Record an unexpected Exception to the Gibraltar central log, formatted automatically.
            </summary>
            <remarks><para>This method provides an easy way to record an Exception as a separate message which will be
            attributed to the code location which threw the Exception rather than where this method was called from.
            The category will default to "Exception" if null, and the message will be formatted automatically based on the
            Exception.  The severity will be determined by the canContinue parameter:  Critical for fatal errors (canContinue
            is false), Error for non-fatal errors (canContinue is true).</para>
            <para>This method is intended for use with top-level exception catching for errors not anticipated in a
            specific operation, but when it is not appropriate to alert the user because the error does not impact their
            work flow or will be otherwise handled gracefully within the application.  For unanticipated errors which
            disrupt a user activity, see the <see CREF="ReportException">ReportException</see> method.</para></remarks>
            <param name="skipFrames">The number of stack frames to skip back over to determine the original caller.</param>
            <param name="exception">An Exception object to record as a log message.  This call is ignored if null.</param>
            <param name="detailsXml">Optional.  An XML document with extended details about the exception.  Can be null.</param>
            <param name="category">The application subsystem or logging category that the message will be associated with.</param>
            <param name="canContinue">True if the application can continue after this call, false if this is a fatal error
            and the application can not continue after this call.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.RecordException(Gibraltar.Monitor.IMessageSourceProvider,System.Exception,System.String,System.String,System.Boolean)">
            <summary>
            Record an unexpected Exception to the Gibraltar central log, formatted automatically.
            </summary>
            <remarks><para>This method provides an easy way to record an Exception as a separate message which will be
            attributed to the code location which threw the Exception rather than where this method was called from.
            The category will default to "Exception" if null, and the message will be formatted automatically based on the
            Exception.  The severity will be determined by the canContinue parameter:  Critical for fatal errors (canContinue
            is false), Error for non-fatal errors (canContinue is true).</para>
            <para>This method is intended for use with top-level exception catching for errors not anticipated in a
            specific operation, but when it is not appropriate to alert the user because the error does not impact their
            work flow or will be otherwise handled gracefully within the application.  For unanticipated errors which
            disrupt a user activity, see the <see CREF="ReportException">ReportException</see> method.</para></remarks>
            <param name="sourceProvider">An IMessageSourceProvider object which supplies the source information
            about this log message (NOT the exception source information).</param>
            <param name="exception">An Exception object to record as a log message.  This call is ignored if null.</param>
            <param name="detailsXml">Optional.  An XML document with extended details about the exception.  Can be null.</param>
            <param name="category">The application subsystem or logging category that the message will be associated with.</param>
            <param name="canContinue">True if the application can continue after this call, false if this is a fatal error
            and the application can not continue after this call.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.RecordException(Gibraltar.Monitor.IMessageSourceProvider,System.Exception,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Record an unexpected Exception to the Gibraltar central log, formatted automatically.
            </summary>
            <remarks><para>This method provides an easy way to record an Exception as a separate message which will be
            attributed to the code location which threw the Exception rather than where this method was called from.
            The category will default to "Exception" if null, and the message will be formatted automatically based on the
            Exception.  The severity will be determined by the canContinue parameter:  Critical for fatal errors (canContinue
            is false), Error for non-fatal errors (canContinue is true).</para>
            <para>This method is intended for use with top-level exception catching for errors not anticipated in a
            specific operation, but when it is not appropriate to alert the user because the error does not impact their
            work flow or will be otherwise handled gracefully within the application.  For unanticipated errors which
            disrupt a user activity, see the <see CREF="ReportException">ReportException</see> method.</para></remarks>
            <param name="sourceProvider">An IMessageSourceProvider object which supplies the source information
            about this log message (NOT the exception source information).</param>
            <param name="exception">An Exception object to record as a log message.  This call is ignored if null.</param>
            <param name="detailsXml">Optional.  An XML document with extended details about the exception.  Can be null.</param>
            <param name="category">The application subsystem or logging category that the message will be associated with.</param>
            <param name="canContinue">True if the application can continue after this call, false if this is a fatal error
            and the application can not continue after this call.</param>
            <param name="reporting">True if the error will also be reported to the user. (private use)</param>
            <param name="blocking">True if reporting to user and waiting for user response; otherwise should be false. (private use)</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.WriteMessage(Loupe.Extensibility.Data.LogMessageSeverity,Gibraltar.Monitor.LogWriteMode,System.String,System.String,Gibraltar.Monitor.IMessageSourceProvider,System.Security.Principal.IPrincipal,System.Exception,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a complete log message to the Gibraltar central log.
            </summary>
            <remarks>Used as an API entry point for interfaces for other logging systems to hand off log messages
            into Gibraltar.  This method ONLY supports being invoked on the same thread which originated the log
            message.</remarks>
            <param name="severity">The severity enum value of the log message.</param>
            <param name="writeMode">A LogWriteMode enum value indicating whether to simply queue the log message
            and return quickly, or to wait for the log message to be committed to disk before returning.</param>
            <param name="logSystem">The name of the originating log system, such as "Trace", "Log4Net",
            or "Gibraltar".</param>
            <param name="categoryName">The logging category or application subsystem category that the log message
            is associated with, such as "Trace", "Console", "Exception", or the logger name in Log4Net.</param>
            <param name="sourceProvider">An IMessageSourceProvider object which supplies the source information
            about this log message.</param>
            <param name="principal">The effective user principal associated with the execution task which
            issued the log message.</param>
            <param name="exception">An Exception object attached to this log message, or null if none.</param>
            <param name="detailsXml">Optional.  An XML document with extended details about the message.  Can be null.</param>
            <param name="caption">A single line display caption.</param>
            <param name="description">Optional.  A multi-line description to use which can be a format string for the arguments.  Can be null.</param>
            <param name="args">Optional.  A variable number of arguments to insert into the formatted description string.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.EndFile">
            <summary>
            End the current log file (but not the session) and open a new file to continue logging.
            </summary>
            <remarks>This method is provided to support user-initiated roll-over to a new log file
            (instead of waiting for an automatic maintenance roll-over) in order to allow the logs of
            an ongoing session up to that point to be collected and submitted (or opened in the viewer)
            for analysis without shutting down the subject application.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Log.EndFile(System.String)">
            <summary>
            End the current log file (but not the session) and open a new file to continue logging.
            </summary>
            <remarks>This method is provided to support user-initiated roll-over to a new log file
            (instead of waiting for an automatic maintenance roll-over) in order to allow the logs of
            an ongoing session up to that point to be collected and submitted (or opened in the viewer)
            for analysis without shutting down the subject application.</remarks>
            <param name="reason">An optionally-declared reason for invoking this operation (may be null or empty).</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.EndFile(System.Int32,System.String)">
            <summary>
            End the current log file (but not the session) and open a new file to continue logging.
            </summary>
            <remarks>This method is provided to support user-initiated roll-over to a new log file
            (instead of waiting for an automatic maintenance roll-over) in order to allow the logs of
            an ongoing session up to that point to be collected and submitted (or opened in the viewer)
            for analysis without shutting down the subject application.</remarks>
            <param name="skipFrames">The number of stack frames to skip out to find the original caller.</param>
            <param name="reason">An optionally-declared reason for invoking this operation (may be null or empty).</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.EndSession(Loupe.Extensibility.Data.SessionStatus,Gibraltar.Monitor.IMessageSourceProvider,System.String)">
            <summary>
            Called at the end of the process execution cycle to indicate that the process shut down normally or explicitly crashed.
            </summary>
            <remarks><para>This will put the Gibraltar log into an ending state in which it will flush everything still
            in its queue and then switch to a background thread to process any further log messages.  All log messages
            submitted after this call will block the submitting thread until they are committed to disk, so that any
            foreground thread still logging final items will be sure to get them through before they exit.  This is
            called automatically when an ApplicationExit event is received, and can also be called directly (such as
            if that event would not function).</para>
            <para>If EndSession is never called, the log will reflect that the session must have crashed.</para></remarks>
            <param name="endingStatus">The explicit ending status to declare for this session, <see cref="F:Loupe.Extensibility.Data.SessionStatus.Normal">Normal</see>
            or <see cref="F:Loupe.Extensibility.Data.SessionStatus.Crashed">Crashed</see>.</param>
            <param name="sourceProvider">An IMessageSourceProvider object which supplies the source information
            about this log message.</param>
            <param name="reason">A simple reason to declare why the application is ending as Normal or as Crashed, or may be null.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.EndSession(Loupe.Extensibility.Data.SessionStatus,System.Int32,System.String)">
            <summary>
            Called at the end of the process execution cycle to indicate that the process shut down normally or explicitly crashed.
            </summary>
            <remarks><para>This will put the Gibraltar log into an ending state in which it will flush everything still
            in its queue and then switch to a background thread to process any further log messages.  All log messages
            submitted after this call will block the submitting thread until they are committed to disk, so that any
            foreground thread still logging final items will be sure to get them through before they exit.  This is
            called automatically when an ApplicationExit event is received, and can also be called directly (such as
            if that event would not function).</para>
            <para>If EndSession is never called, the log will reflect that the session must have crashed.</para></remarks>
            <param name="endingStatus">The explicit ending status to declare for this session, <see cref="F:Loupe.Extensibility.Data.SessionStatus.Normal">Normal</see>
            or <see cref="F:Loupe.Extensibility.Data.SessionStatus.Crashed">Crashed</see>.</param>
            <param name="skipFrames">The number of stack frames to skip out to find the original caller.</param>
            <param name="reason">A simple reason to declare why the application is ending as Normal or as Crashed, or may be null.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.StartSession(Loupe.Configuration.AgentConfiguration,System.Int32,System.String)">
            <summary>
            Called to activate the logging system.  If it is already active then this has no effect.
            </summary>
            <param name="configuration">Optional.  An initial default configuration to use instead of the configuration file.</param>
            <param name="skipFrames"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.StartSession(Loupe.Configuration.AgentConfiguration,Gibraltar.Monitor.IMessageSourceProvider,System.String)">
            <summary>
            Called to activate the logging system.  If it is already active then this has no effect.
            </summary>
            <param name="configuration">Optional.  An initial default configuration to use instead of the configuration file.</param>
            <param name="sourceProvider"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.SendSessions(System.Nullable{Loupe.Extensibility.Data.SessionCriteria},System.Predicate{Loupe.Extensibility.Data.ISessionSummary},System.Boolean)">
            <summary>
            Send sessions using packager
            </summary>
            <param name="criteria">Optional.  A session criteria to use</param>
            <param name="sessionMatchPredicate">Optional.  A session match predicate to use</param>
            <param name="asyncSend"></param>
            <returns>True if the send was processed, false if it was not due to configuration or another active send</returns>
            <remarks>Either a criteria or sessionMatchPredicate must be provided</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Log.SetSendSessionsOnExit(System.Boolean)">
            <summary>
            Set the SendSessionsOnExit setting.  (Should only be called through the SendSessionsOnExit property in Monitor.Log or Agent.Log.)
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.Write(Gibraltar.Messaging.IMessengerPacket)">
            <summary>
            Publish the provided raw packet to the stream.
            </summary>
            <remarks>This functionality is primarily for internal support of the various log listeners that support
            third party log systems.  This overload uses the default LogWriteMode.Queued.  To specify wait-for-commit
            behavior, use the overload with a LogWriteMode argument.</remarks>
            <param name="packet">The log packet to write</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.Write(Gibraltar.Messaging.IMessengerPacket[],Gibraltar.Monitor.LogWriteMode)">
            <summary>
            Publish a batch of raw packets to the stream, specifying the LogWriteMode to use.
            </summary>
            <remarks>This functionality is primarily for internal support of the various log listeners that support
            third party log systems.</remarks>
            <param name="packetArray">An array of the log packets to write.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.MakeLogPacket(Loupe.Extensibility.Data.LogMessageSeverity,System.String,System.String,Gibraltar.Monitor.IMessageSourceProvider,System.Security.Principal.IPrincipal,System.Exception,System.String,System.String,System.String,System.Object[])">
            <summary>
            Create a complete log message WITHOUT sending it to the Gibraltar central log.
            </summary>
            <remarks>This method is used internally to construct a complete LogMessagePacket, which can then be
            bundled with other packets (in an array) to be submitted to the log as a batch.  This method ONLY
            supports being invoked on the same thread which is originating the log message.</remarks>
            <param name="severity">The severity enum value of the log message.</param>
            <param name="logSystem">The name of the originating log system, such as "Trace", "Log4Net",
            or "Gibraltar".</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which can be a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="sourceProvider">An IMessageSourceProvider object which supplies the source information
            about this log message.</param>
            <param name="principal">Optional.  The IPrincipal responsible for the log message.</param>
            <param name="exception">An Exception object attached to this log message, or null if none.</param>
            <param name="detailsXml">Optional.  An XML document with extended details about the message.  Can be null.</param>
            <param name="caption">A single line display caption.</param>
            <param name="description">Optional.  A multi-line description to use which can be a format string for the arguments.  Can be null.</param>
            <param name="args">A variable number of arguments to insert into the formatted description string.</param>
        </member>
        <member name="P:Gibraltar.Monitor.Log.ThreadIsInitializer">
            <summary>
            Indicates if the calling thread is part of the log initialization process
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Log.GetPackagerFileNamePath">
            <summary>
            Get the full file name and path to where the packager would need to be for us to use it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Log.SendSessionData">
            <summary>
            Attempt to create a process to send the data for the current application using the packager.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Log.OnInitialize(Loupe.Configuration.AgentConfiguration)">
            <summary>
            Perform the critical central initialization and indicate if we should be active or not
            </summary>
            <returns>True if initialization was completed and logging can now commence, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Log.GetConsentScope(System.String@,System.String@)">
            <summary>
            Determines the correct Auto Send Consent scope for the current configuration
            </summary>
            <param name="productName"></param>
            <param name="applicationName"></param>
        </member>
        <member name="M:Gibraltar.Monitor.Log.StartPublishEngine">
            <summary>
            If the configuration allows publishing then starts our one publish engine, creating it if necessary
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Log.ShutdownPublishEngine">
            <summary>
            Shutdown the publish engine if it exists without waiting for it to complete.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Log.Packager_EndSend(System.Object,Gibraltar.Data.PackageSendEventArgs)">
            <summary>
            Used to get rid of our active packager handle when it's done.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Gibraltar.Monitor.LogInitializingEventArgs">
            <summary>
            Event arguments for the Log.Initializing event of the Gibraltar Agent Logging class.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogInitializingEventArgs.Cancel">
            <summary>
            If set to true the initialization process will not complete and the agent will stay dormant.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogInitializingEventArgs.Configuration">
            <summary>
            The configuration for the agent to start with
            </summary>
            <remarks>The configuration will reflect the effect of the current application configuration file and Agent default values.</remarks>
        </member>
        <member name="T:Gibraltar.Monitor.LogMessage">
            <summary>
            A Loupe log message.
            </summary>
            <remarks>This class pulls together references to a Session, ThreadInfo, and DataExtension associated
            with a specific LogMessagePacket.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.Id">
            <summary>
            A globally unique ID for this message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.IndexOf">
            <summary>
            The index of this log message in the messages collection.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.Sequence">
            <summary>
            The underlying packet sequence number that ensures absolute, but non-monotonic, ordering of messages.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.Timestamp">
            <summary>
            The exact timestamp of this message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.LogSystem">
            <summary>
            The system that logged the message
            </summary>
            <remarks>Commonly Trace, Gibraltar, or Log4Net but can also be a user-specified system.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.ThreadInfo">
            <summary>
            Our ThreadInfo for the thread which issued this log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.User">
            <summary>
            Optional.  The application user associated with this message
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.UserName">
            <summary>
            The short name of the user that generated this message
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.ThreadId">
            <summary>
            The numeric ID of the thread this message was logged on.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.ThreadName">
            <summary>
            The display caption of the thread this message was logged on.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.HasMethodInfo">
            <summary>
            Indicates if the class name and method name are available.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.ClassName">
            <summary>
            If available, the full class name with namespace.  May be null.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.ClassNames">
            <summary>
            An array of the individual elements of the class and namespace hierarchy.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.MethodName">
            <summary>
            If available, the method where this message was logged.  May be null.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.HasSourceLocation">
            <summary>
            Indicates if the file name and line number are available.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.HasThreadInfo">
            <summary>
            Indicates if the log message has related thread information.  If false, some calls to thread information may throw exceptions.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.FileName">
            <summary>
            If available, the source file for the class and method of this message.  May be null.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.LineNumber">
            <summary>
            If available, the line number for the class and method of this message.  May be zero.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.Caption">
            <summary>
            A display caption for this message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.Description">
            <summary>
            A multi-line description included with the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.Details">
            <summary>
            An XML description document that goes along with the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.Severity">
            <summary>
            The severity level of this message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.CategoryName">
            <summary>
            The subsystem category under which this log message was issued.
            </summary>
            <remarks>For example, the logger name in log4net.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.CategoryNames">
            <summary>
            An array of the individual category names within the specified category name which is period delimited.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.TimestampDateTime">
            <summary>
             Provide TimeStamp as DateTime for GLV (SourceGrid doesn't do DateTimeOffset)
            </summary>
            <remarks>Added for GLV support</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.Message">
            <summary>A combined caption &amp; description</summary>
            <remarks>Added for GLV support</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.MethodFullName">
            <summary>
            A display string for the full class and method if available, otherwise an empty string.
            </summary>
            <remarks>Added for GLV support</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.SourceCodeLocation">
            <summary>
            A display string for the full file name and line number if available, otherwise an empty string.
            </summary>
            <remarks>Added for GLV support</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.Session">
            <summary>
            The session this message is related to.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.HasException">
            <summary>
            True if there is an exception array associated with this message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.Exception">
            <summary>
            The outermost exception
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessage.Exceptions">
            <summary>
            The array of exceptions associated with this log message.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessage.CompareTo(Gibraltar.Monitor.LogMessage)">
            <summary>
            Compare this log message with another to determine if they are the same or how they should be sorted relative to each other.
            </summary>
            <remarks>LogMessage instances are sorted by the Sequence number property of the MessagePacket they encompass.</remarks>
            <param name="other"></param>
            <returns>0 for an exact match, otherwise the relationship between the two for sorting.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessage.Equals(Gibraltar.Monitor.LogMessage)">
            <summary>
            Determines if the provided LogMessage object is identical to this object.
            </summary>
            <param name="other">The LogMessage object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessage.Equals(System.Object)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="obj">The object to compare this object to</param>
            <returns>True if the other object is also a LogMessage and represents the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessage.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            An int representing the hash code calculated for the contents of this object.
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessage.op_Equality(Gibraltar.Monitor.LogMessage,Gibraltar.Monitor.LogMessage)">
            <summary>
            Compares two LogMessage instances for equality.
            </summary>
            <param name="left">The LogMessage to the left of the operator</param>
            <param name="right">The LogMessage to the right of the operator</param>
            <returns>True if the two LogMessages are equal.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessage.op_Inequality(Gibraltar.Monitor.LogMessage,Gibraltar.Monitor.LogMessage)">
            <summary>
            Compares two LogMessage instances for inequality.
            </summary>
            <param name="left">The LogMessage to the left of the operator</param>
            <param name="right">The LogMessage to the right of the operator</param>
            <returns>True if the two LogMessages are not equal.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessage.op_LessThan(Gibraltar.Monitor.LogMessage,Gibraltar.Monitor.LogMessage)">
            <summary>
            Compares if one LogMessage instance should sort less than another.
            </summary>
            <param name="left">The LogMessage to the left of the operator</param>
            <param name="right">The LogMessage to the right of the operator</param>
            <returns>True if the LogMessage to the left should sort less than the LogMessage to the right.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessage.op_GreaterThan(Gibraltar.Monitor.LogMessage,Gibraltar.Monitor.LogMessage)">
            <summary>
            Compares if one LogMessage instance should sort greater than another.
            </summary>
            <param name="left">The LogMessage to the left of the operator</param>
            <param name="right">The LogMessage to the right of the operator</param>
            <returns>True if the LogMessage to the left should sort greater than the LogMessage to the right.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Gibraltar.Monitor.LogMessageBase">
            <summary>
            Base class for log message template classes. 
            </summary>
            <remarks>This class knows how to translate from a simple logging API like Trace into our more all-encompassing
            Gibraltar Log collector.  Importantly, it knows how to acquire information about the source of a log message
            from the current call stack, and acts as its own IMessageSourceProvider when handing it off to the central Log.
            Thus, this object must be created while still within the same call stack as the origination of the log message.
            Used internally by our Trace Listener and external Gibraltar log API.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageBase.#ctor(Loupe.Extensibility.Data.LogMessageSeverity,System.String,System.String)">
            <summary>
            Base constructor for log message template classes.
            </summary>
            <param name="severity">The severity of the log message.</param>
            <param name="logSystem">The name of the logging system the message was issued through, such as "Trace" or
            "Gibraltar".</param>
            <param name="categoryName">The logging category or application subsystem category that the log message
            is associated with, such as "Trace", "Console", "Exception", or the logger name in Log4Net.</param>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageBase.#ctor(Loupe.Extensibility.Data.LogMessageSeverity,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Exception)">
            <summary>
            Base constructor for log message template classes where the message should be attributed to the exception.
            </summary>
            <param name="severity">The severity of the log message.</param>
            <param name="logSystem">The name of the logging system the message was issued through, such as "Trace" or
            "Gibraltar".</param>
            <param name="categoryName">The logging category or application subsystem category that the log message
            is associated with, such as "Trace", "Console", "Exception", or the logger name in Log4Net.</param>
            <param name="skipFrames">The number of stack frames to skip over to find the first candidate to be
            identified as the source of the log message.</param>
            <param name="localOrigin">True if logging a message originating in Gibraltar code.
            False if logging a message from the client application.</param>
            <param name="attributeToException">True if the call stack from where the exception was thrown should be used for log message attribution</param>
            <param name="exception">When attributeToException is used, this exception object is used to determine the calling location</param>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageBase.Severity">
            <summary>
            The severity of the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageBase.LogSystem">
            <summary>
            The name of the logging system the message was issued through, such as "Trace" or "Gibraltar".
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageBase.CategoryName">
            <summary>
            The logging category or application subsystem category that the log message is associated with,
            such as "Trace", "Console", "Exception", or the logger name in Log4Net.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageBase.Caption">
            <summary>
            A single line display caption.  It will not be format-expanded.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageBase.Description">
            <summary>
            Optional.  A multiline description to use which can be a format string for for the arguments.  Can be null.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageBase.MessageArgs">
            <summary>
            Optional additional args to match up with the formatting string.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageBase.DetailsXml">
            <summary>
            Optional.  An XML document with extended details about the message.  Can be null.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageBase.Exception">
            <summary>
            An exception associated with this log message (or null for none).
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageBase.AttributeToException">
            <summary>
            Record this log message based on where the exception was thrown, not where this method was called
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageBase.WriteMode">
            <summary>
            Whether to queue-and-return or wait-for-commit.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageBase.FirstException(System.Object[])">
            <summary>
            This static helper method looks through an array of objects (eg. the param args) for the first Exception.
            </summary>
            <param name="args">An array of objects which might or might not contain an Exception.</param>
            <returns>The first element of the array which is an Exception (or derived from Exception),
            or null if none is found.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageBase.PublishToLog">
            <summary>
            Publish this SimpleLogMessage to the Gibraltar central log.
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.LogMessageCollection">
            <summary>
            The sorted list of all log messages
            </summary>
        </member>
        <member name="E:Gibraltar.Monitor.LogMessageCollection.CollectionChanged">
            <summary>
            Raised every time the collection's contents are changed to allow subscribers to automatically track changes.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.#ctor(Gibraltar.Monitor.Session)">
            <summary>
            Create a new collection for the specified session
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.OnCollectionChanged(Gibraltar.Monitor.CollectionChangedEventArgs{Gibraltar.Monitor.LogMessageCollection,Gibraltar.Monitor.LogMessage})">
            <summary>
            This method is called every time a collection change event occurs to allow inheritors to override the change event.
            </summary>
            <remarks>If overriden, it is important to call this base implementation to actually fire the event.</remarks>
            <param name="e"></param>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.CalculateOffset(System.DateTimeOffset,Loupe.Extensibility.Data.MetricSampleInterval,System.Int32)">
            <summary>
            Calculates the offset date from the provided baseline for the specified interval
            </summary>
            <remarks>
            To calculate a backwards offset (the date that is the specified interval before the baseline) use a negative
            number of invervals. For example, -1 intervals will give you one interval before the baseline.
            </remarks>
            <param name="baseline">The date and time to calculate an offset date and time from</param>
            <param name="interval">The interval to add or subtract from the baseline</param>
            <param name="intervals">The number of intervals to go forward or (if negative) backwards</param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageCollection.Session">
            <summary>
            The session this collection of log messages is related to
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageCollection.CategoryTree">
            <summary>
            A tree of log message groups for the log messages by category.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageCollection.ClassTree">
            <summary>
            A tree of log message groups for messages by namespace and class.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageCollection.First">
            <summary>
            The first object in the collection
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageCollection.Last">
            <summary>
            The last object in the collection
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.CalculateValues">
            <summary>
            Calculate the number of messages per second present in the entire messages collection.
            </summary>
            <returns>A metric value set suitable for display</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.CalculateValues(Loupe.Extensibility.Data.MetricSampleInterval,System.Int32)">
            <summary>
            Calculate the number of messages per interval present in the entire messages collection.
            </summary>
            <param name="interval">The requested data sample size</param>
            <param name="intervals">The number of intervals to have between each value exactly.</param>
            <returns>A metric value set suitable for display</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.CalculateValues(Loupe.Extensibility.Data.MetricSampleInterval,System.Int32,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Calculate the number of messages per interval present in the specified time range.
            </summary>
            <param name="interval">The requested data sample size</param>
            <param name="intervals">The number of intervals to have between each value exactly.</param>
            <param name="startDateTime">The earliest date to retrieve data for</param>
            <param name="endDateTime">The last date to retrieve data for</param>
            <returns>A metric value set suitable for display</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.IndexOf(Gibraltar.Monitor.LogMessage)">
            <summary>
            Retrieves the numerical index of the specified item in the collection or -1 if not found.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.Insert(System.Int32,Gibraltar.Monitor.LogMessage)">
            <summary>
            Not supported.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />. </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.RemoveAt(System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList" /> is read-only. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <remarks>Setting a metric sample to a particular index is not supported and will result in an exception being thrown.</remarks>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList" />.
            </summary>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />. </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.
            </summary>
            <returns>
            true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.
            </returns>
            <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.ContainsKey(System.Int64)">
            <summary>
            Determines if the collection contains the specified sequence number key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.Clear">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.
            </summary>
            <returns>
            The index of <paramref name="value" /> if found in the list; otherwise, -1.
            </returns>
            <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value" /> should be inserted. </param>
            <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException"><paramref name="value" /> is null reference in the <see cref="T:System.Collections.IList" />.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.Add(Gibraltar.Monitor.LogMessage)">
            <summary>
            Add the specified LogMessage item to the collection
            </summary>
            <param name="item">The new LogMessage item to add</param>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageCollection.HasDetail">
            <summary>
            Indicates if any of the log messages in the collection have detailed xml data
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageCollection.HasExceptionInfo">
            <summary>
            Indicates if any of the log messages in the collection have exception information recorded
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageCollection.HasMultipleUsers">
            <summary>
            Indicates if there is more than one user associated with the log messages
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageCollection.HasMultipleLogSystems">
            <summary>
            Indicates if there is more than one log system associated with the log messages
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageCollection.HasSourceLocation">
            <summary>
            Indicates if any of the log messages have source code location information
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.Contains(Gibraltar.Monitor.LogMessage)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <remarks>This method determines equality using the default equality comparer for the type of values in the list.  It performs
            a linear search and therefore is an O(n) operation.</remarks>
            <param name="item">The object to locate in the collection.</param>
            <returns>true if the item is found in the collection; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.CopyTo(Gibraltar.Monitor.LogMessage[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <remarks>Elements are copied to the array in the same order in which the enumerator iterates them from the collection.  The provided array 
            must be large enough to contain the entire contents of this collection starting at the specified index.  This method is an O(n) operation.</remarks>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection.  The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero. </exception>
            <exception cref="T:System.ArgumentException"><paramref name="array" /> is multidimensional.-or- <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.-or- The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageCollection.Count">
            <summary>
            The number of items currently in the collection
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageCollection.IsReadOnly">
            <summary>
            Indicates if the collection is read only and therefore can't have items added or removed.
            </summary>
            <remarks>This collection is always read-only.  
            This property is required for ICollection compatibility</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageCollection.Remove(Gibraltar.Monitor.LogMessage)">
            <summary>
            Not supported, but no exception is returned.
            </summary>
            <param name="item">The LogMessage item to remove.</param>
        </member>
        <member name="T:Gibraltar.Monitor.LogMessageGroup">
            <summary>
            A group of log messages, typically 
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageGroup.Name">
            <summary>
            The name of this group (not fully qualified)
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageGroup.Parent">
            <summary>
            Optional. The parent of this group (null for top level groups)
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageGroup.MaxSeverityWithChildren">
            <summary>
            The worst-case severity of the log messages in this group or any group underneith it.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageGroup.MaxSeverity">
            <summary>
            The worst-case severity of the log messages in this group
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageGroup.MessageCountWithChildren">
            <summary>
            The number of messages contained in this group including its child groups
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageGroup.MessageCount">
            <summary>
            The number of messages contained in this group
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageGroup.FullName">
            <summary>
            The fully qualified name of this group.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageGroup.Groups">
            <summary>
            The collection of log message groups that are a child of this group.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageGroup.IsLeaf">
            <summary>
            True if this is a leaf node, false if it has child groups.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageGroup.AddMessage(Gibraltar.Monitor.LogMessage)">
            <summary>
            Record the message as part of this group (and its parent groups)
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageGroup.AddChildMessage(Gibraltar.Monitor.LogMessage)">
            <summary>
            Record the message as part of a child of this group.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageGroup.CompareTo(Gibraltar.Monitor.LogMessageGroup)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:Gibraltar.Monitor.LogMessageGroupCollection">
            <summary>
            A collection of logMessageGroups, ordered by date/time and accessible by unique ID or numerical index.
            </summary>
        </member>
        <member name="E:Gibraltar.Monitor.LogMessageGroupCollection.CollectionChanged">
            <summary>
            Raised every time the collection's contents are changed to allow subscribers to automatically track changes.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageGroupCollection.#ctor">
            <summary>
            Create a new log message group collection for the root log message group.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageGroupCollection.#ctor(Gibraltar.Monitor.LogMessageGroup)">
            <summary>
            Create a new log message group collection for child groups of the provided log message group
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageGroupCollection.Parent">
            <summary>
            The parent group that owns this group collection.  May be null in the case of the root message group collection.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageGroupCollection.OnCollectionChanged(Gibraltar.Monitor.CollectionChangedEventArgs{Gibraltar.Monitor.LogMessageGroupCollection,Gibraltar.Monitor.LogMessageGroup})">
            <summary>
            Called whenever the collection changes.
            </summary>
            <param name="e"></param>
            <remarks>Note to inheritors:  If overriding this method, you must call the base implmenetation to ensure
            that the appropriate events are raised.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageGroupCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the collection contaions an element with the specified key.
            </summary>
            <param name="key">The key to locate in the collection</param>
            <returns>true if the collection contains an element iwth the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageGroupCollection.TryGetValue(System.String,Gibraltar.Monitor.LogMessageGroup@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageGroupCollection.Add(Gibraltar.Monitor.LogMessageGroup)">
            <summary>
            Add the specified LogMessageGroup item to the collection
            </summary>
            <param name="item">The new LogMessageGroup item to add</param>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageGroupCollection.Add(System.String,Gibraltar.Monitor.LogMessage)">
            <summary>
            Add a new group to this group collection with the provided name and the provided initial log message
            </summary>
            <param name="groupName">The unique name of the group within this collection</param>
            <param name="message">The first message to add to the group</param>
            <returns>The new log message group that was added</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageGroupCollection.Clear">
            <summary>
            Clear the entire contents of the logMessageGroup collection
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageGroupCollection.Contains(Gibraltar.Monitor.LogMessageGroup)">
            <summary>
            Indicates if the supplied collection object is present in the collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageGroupCollection.Remove(Gibraltar.Monitor.LogMessageGroup)">
            <summary>
            Remove the specified LogMessageGroup item.  If the LogMessageGroup isn't in the collection, no exception is thrown.
            </summary>
            <param name="item">The LogMessageGroup item to remove.</param>
        </member>
        <member name="T:Gibraltar.Monitor.LogMessageTree">
            <summary>
            An acyclic tree graph of log message groups.
            </summary>
            <remarks>Used to create hierarchies of groups of log messages and collect statistics on them.</remarks>
        </member>
        <member name="T:Gibraltar.Monitor.LogMessageTree.LogMessageGroupFullNameDelegate">
            <summary>
            Delegate that can specify the fully qualified name for a single log message.
            </summary>
            <param name="message">The message being evaluated</param>
            <returns>The fully qualified name for the log message</returns>
        </member>
        <member name="T:Gibraltar.Monitor.LogMessageTree.LogMessageGroupDelegate">
            <summary>
            Delegate that can specify the hierarchy for a single log message.
            </summary>
            <param name="message">The message being evaluated</param>
            <returns>A string array with one element for every group in the hierarchy</returns>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageTree.#ctor(System.String,System.String,System.String,Gibraltar.Monitor.LogMessageTree.LogMessageGroupFullNameDelegate,Gibraltar.Monitor.LogMessageTree.LogMessageGroupDelegate)">
            <summary>
            Create a new log message tree.
            </summary>
            <param name="name"></param>
            <param name="caption"></param>
            <param name="description"></param>
            <param name="fullNameDelegate"></param>
            <param name="messageGroupDelegate"></param>
        </member>
        <member name="M:Gibraltar.Monitor.LogMessageTree.AddMessage(Gibraltar.Monitor.LogMessage)">
            <summary>
            Add the specified message to its group, calculated based on the data in the message as this call is made.
            </summary>
            <param name="message">The message being evaluated</param>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageTree.Name">
            <summary>
            A key name for this log message tree.  Names are file and path name safe.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageTree.Caption">
            <summary>
            An end user display caption for the log message tree.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageTree.Description">
            <summary>
            An end user description for the log message tree.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageTree.Groups">
            <summary>
            The root log message groups.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageTree.MaxSeverity">
            <summary>
            The worst-case severity of the log messages in this group (including its child groups)
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.LogMessageTree.MessageCount">
            <summary>
            The number of messages in this group (including its child groups)
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.LogWriteMode">
            <summary>
            Selects the performance trade-off for writing a given message to the log.
            </summary>
            <remarks><para>This enum selects the preferred trade-off between run-time performance and diagnostic data
            persistence for an individual log message being issued.  By default (in API calls which do not take an argument
            of this type) Gibraltar uses LogWriteMode.Queued under normal conditions but will automatically enforce
            a wait-for-commit mode under certain abnormal conditions or during normal application exit.  The
            LogWriteMode.WaitForCommit setting allows the issuer of a log message to specifically request that the
            call not return until the log message has been committed to disk, instead of the normal queue-and-return
            behavior.</para>
            <para>Queued<br/>
            This setting indicates that the caller prefers to continue execution as soon as possible
            and only cares that the message be placed on the queue to be eventually written into the log file
            on disk.  Messages written with this mode could be lost if the application crashes and Gibraltar
            is not able to flush its queue to the log file on disk.  Under certain unusual conditions and
            during normal application exit, even calls with this explicit setting may be forced to behave as
            WaitForCommit to provide better logging integrity in those scenarios.
            </para>
            <para>WaitForCommit<br/>
            This setting indicates that the caller needs to make sure this message makes it into the
            log file on disk because the application is exiting or may crash when it continues.  The call will
            force a flush of the queue and block until Gibraltar has committed the message to the log file on
            disk.  Messages written with this mode will not be lost--IF the call completes and returns--but
            will incur a significant performance hit, so it should generally only be used for critical information
            which needs to survive a crash scenario to help diagnose the cause of the crash.
            </para>
            <para>WaitForCommit mode still can not guarantee that the log message will make it to disk in pathological cases,
            but it designates this as a higher priority than performance for an individual log message for scenarios
            where the persistence of this information is expected to be important in diagnosing a condition which
            might prevent normal Queued messages from making it to disk--for example, when the caller will be causing
            the application to exit abruptly upon return and needs the log to reflect the reason why.</para></remarks>
        </member>
        <member name="F:Gibraltar.Monitor.LogWriteMode.Queued">
            <summary>
            Return after placing the message on the queue. (Normal operation)
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.LogWriteMode.WaitForCommit">
            <summary>
            Don't return until the message has been committed to disk.
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.MessageFilterEventArgs">
            <summary>
            EventArgs for Message Filter events.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.MessageFilterEventArgs.Message">
            <summary>
            A new log message received for possible display by the (LiveLogViewer) sender of this event.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.MessageFilterEventArgs.Cancel">
            <summary>
            Cancel (block) this message from being displayed to users by the (LiveLogViewer) sender of this event.
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.MessageSourceProvider">
            <summary>
            A basic class to determine the source of a log message and act as an IMessageSourceProvider. 
            </summary>
            <remarks>This class knows how to acquire information about the source of a log message from the current call stack,
            and acts as a IMessageSourceProvider to use when handing off a log message to the central Log.
            Thus, this object must be created while still within the same call stack as the origination of the log message.
            Used internally by our Log.EndFile() method and ExceptionListener (etc).</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.MessageSourceProvider.#ctor">
            <summary>
            Parameterless constructor for derived classes.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.MessageSourceProvider.#ctor(System.String,System.String)">
            <summary>
            Creates a MessageSourceProvider object to be used as an IMessageSourceProvider.
            </summary>
            <param name="className">The full name of the class (with namespace) whose method issued the log message.</param>
            <param name="methodName">The simple name of the method which issued the log message.</param>
            <remarks>This constructor is used only for the convenience of the Log class when it needs to generate
            an IMessageSoruceProvider for construction of internally-generated packets without going through the
            usual direct PublishToLog() mechanism.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.MessageSourceProvider.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a MessageSourceProvider object to be used as an IMessageSourceProvider.
            </summary>
            <param name="className">The full name of the class (with namespace) whose method issued the log message.</param>
            <param name="methodName">The simple name of the method which issued the log message.</param>
            <param name="fileName">The name of the file containing the method which issued the log message.</param>
            <param name="lineNumber">The line within the file at which the log message was issued.</param>
            <remarks>This constructor is used only for the convenience of the Log class when it needs to generate
            an IMessageSoruceProvider for construction of internally-generated packets without going through the
            usual direct PublishToLog() mechanism.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.MessageSourceProvider.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a MessageSourceProvider object to be used as an IMessageSourceProvider.
            </summary>
            <remarks>This constructor is used only for the convenience of the Log class when it needs to generate
            an IMessageSoruceProvider for construction of internally-generated packets without going through the
            usual direct PublishToLog() mechanism.</remarks>
            <param name="skipFrames">The number of stack frames to skip over to find the first candidate to be
            identified as the source of the log message.</param>
            <param name="localOrigin">True if logging a message originating in Gibraltar code.
            False if logging a message from the client application.</param>
        </member>
        <member name="P:Gibraltar.Monitor.MessageSourceProvider.MethodName">
            <summary>
            The simple name of the method which issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MessageSourceProvider.ClassName">
            <summary>
            The full name of the class (with namespace) whose method issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MessageSourceProvider.FileName">
            <summary>
            The name of the file containing the method which issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MessageSourceProvider.LineNumber">
            <summary>
            The line within the file at which the log message was issued.
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.Metric">
            <summary>
            A single metric that has been captured.  A metric is a single measured value over time.  
            </summary>
            <remarks>
            To display the data captured for this metric, use Calculate Values to translate the raw captured data
            into displayable information.
            </remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.#ctor(Gibraltar.Monitor.MetricDefinition,Gibraltar.Monitor.Serialization.MetricPacket)">
            <summary>
            Create a new metric with the provided metric definition and metric packet.
            </summary>
            <remarks>Most derived classes will provide a more convenient implementation that will automatically
            create the correct metric packet instead of the caller having to first create it.  
            The new metric will automatically be added to the metric definition's metrics collection.</remarks>
            <param name="definition">The definition for this metric</param>
            <param name="packet">The metric packet to use for this metric</param>
        </member>
        <member name="P:Gibraltar.Monitor.Metric.Id">
            <summary>
            The unique Id of this metric instance.  This can reliably be used as a key to refer to this item.
            </summary>
            <remarks>The key can be used to compare the same metric across different instances (e.g. sessions).
            This Id is always unique to a particular instance.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Metric.Name">
            <summary>
            The fully qualified name of the metric being captured.  
            </summary>
            <remarks>The name is for comparing the same metric in different sessions. They will have the same name but 
            not the same Id.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Metric.Caption">
            <summary>
            A short caption of what the metric tracks, suitable for end-user display.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Metric.Description">
            <summary>
            A description of what is tracked by this metric, suitable for end-user display.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Metric.Definition">
            <summary>
            The definition of this metric object.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Metric.MetricTypeName">
            <summary>
            The internal metric type of this metric definition
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Metric.CategoryName">
            <summary>
            The category of this metric for display purposes.  Category is the top displayed hierarchy.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Metric.CounterName">
            <summary>
            The display name of this metric (unique within the category name).
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Metric.InstanceName">
            <summary>
            Gets or sets an instance name for this performance counter.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Metric.IsDefault">
            <summary>
            Indicates whether this is the default metric instance for this metric definition or not.
            </summary>
            <remarks>The default instance has a null instance name.  This property is provided as a convenience to simplify
            client code so you don't have to distinguish empty strings or null.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Metric.StartDateTime">
            <summary>
            The earliest start date and time of the raw data samples.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Metric.EndDateTime">
            <summary>
            The last date and time of the raw data samples.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Metric.SampleType">
            <summary>
            The sample type of the metric.  Indicates whether the metric represents discrete events or a continuous value.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.CompareTo(Gibraltar.Monitor.Metric)">
            <summary>
            Compare this Metric to another Metric to determine sort order
            </summary>
            <remarks>Metric instances are sorted by their Name property.</remarks>
            <param name="other">The Metric object to compare this Metric object against</param>
            <returns>An int which is less than zero, equal to zero, or greater than zero to reflect whether
            this Metric should sort as being less-than, equal to, or greater-than the other Metric, respectively.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.Equals(Gibraltar.Monitor.Metric)">
            <summary>
            Determines if the provided Metric object is identical to this object.
            </summary>
            <param name="other">The Metric object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.Equals(System.Object)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="obj">The object to compare this object to</param>
            <returns>True if the other object is also a Metric and represents the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            An int representing the hash code calculated for the contents of this object.
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.op_Equality(Gibraltar.Monitor.Metric,Gibraltar.Monitor.Metric)">
            <summary>
            Compares two Metric instances for equality.
            </summary>
            <param name="left">The Metric to the left of the operator</param>
            <param name="right">The Metric to the right of the operator</param>
            <returns>True if the two Metrics are equal.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.op_Inequality(Gibraltar.Monitor.Metric,Gibraltar.Monitor.Metric)">
            <summary>
            Compares two Metric instances for inequality.
            </summary>
            <param name="left">The Metric to the left of the operator</param>
            <param name="right">The Metric to the right of the operator</param>
            <returns>True if the two Metrics are not equal.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.op_LessThan(Gibraltar.Monitor.Metric,Gibraltar.Monitor.Metric)">
            <summary>
            Compares if one Metric instance should sort less than another.
            </summary>
            <param name="left">The Metric to the left of the operator</param>
            <param name="right">The Metric to the right of the operator</param>
            <returns>True if the Metric to the left should sort less than the Metric to the right.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.op_GreaterThan(Gibraltar.Monitor.Metric,Gibraltar.Monitor.Metric)">
            <summary>
            Compares if one Metric instance should sort greater than another.
            </summary>
            <param name="left">The Metric to the left of the operator</param>
            <param name="right">The Metric to the right of the operator</param>
            <returns>True if the Metric to the left should sort greater than the Metric to the right.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.CalculateOffset(System.DateTimeOffset,Loupe.Extensibility.Data.MetricSampleInterval,System.Int32)">
            <summary>
            Calculates the offset date from the provided baseline for the specified interval
            </summary>
            <remarks>
            To calculate a backwards offset (the date that is the specified interval before the baseline) use a negative
            number of intervals. For example, -1 intervals will give you one interval before the baseline.
            </remarks>
            <param name="baseline">The date and time to calculate an offset date and time from</param>
            <param name="interval">The interval to add or subtract from the baseline</param>
            <param name="intervals">The number of intervals to go forward or (if negative) backwards</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.CalculateOffsetTolerance(Loupe.Extensibility.Data.MetricSampleInterval)">
            <summary>
            Calculates the amount we will "pull forward" a future sample by to fit it to our requested interval.
            </summary>
            <remarks>Tolerance allows for us to ignore small variations in exact timestamps for the purposes of fitting the best data.</remarks>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.CalculateValues">
            <summary>
            Calculate displayable values based on the full information captured for this metric, 
            returning all dates available at the default interval.
            </summary>
            <remarks>
            The raw values may not be suitable for display depending on the unit the values are captured in, and
            depending on how the data was sampled it may not display well because of uneven sampling if processed
            directly.
            </remarks>
            <returns>A metric value set suitable for display</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.CalculateValues(Loupe.Extensibility.Data.MetricSampleInterval,System.Int32)">
            <summary>
            Calculate displayable values based on the full information captured for this metric with the specified interval 
            for all dates available
            </summary>
            <remarks>
            The raw values may not be suitable for display depending on the unit the values are captured in, and
            depending on how the data was sampled it may not display well because of uneven sampling if processed
            directly.
            </remarks>
            <param name="interval">The requested data sample size</param>
            <param name="intervals">The number of intervals to have between each value exactly.</param>
            <returns>A metric value set suitable for display</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.CalculateValues(Loupe.Extensibility.Data.MetricSampleInterval,System.Int32,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Calculate displayable values based on the full information captured for this metric
            </summary>
            <remarks>
            The raw values may not be suitable for display depending on the unit the values are captured in, and
            depending on how the data was sampled it may not display well because of uneven sampling if processed
            directly.
            </remarks>
            <param name="interval">The requested data sample size</param>
            <param name="intervals">The number of intervals to have between each value exactly.</param>
            <param name="startDateTime">The earliest date to retrieve data for</param>
            <param name="endDateTime">The last date to retrieve data for</param>
            <returns>A metric value set suitable for display</returns>
        </member>
        <member name="P:Gibraltar.Monitor.Metric.Samples">
            <summary>
            The set of raw samples for this metric
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Metric.Packet">
            <summary>
            The underlying packet 
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.GetSampleSequence">
            <summary>
            A unique, increasing sequence number each time it's called.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.OnMetricSampleRead(Gibraltar.Monitor.Serialization.MetricSamplePacket)">
            <summary>
            Invoked when deserializing a metric sample to allow inheritors to provide derived implementations
            </summary>
            <remarks>If you wish to provide a derived class for metric samples in your derived metric, use this
            method to create and return your derived object to support the deserialization process.
            This is used during object construction, so implementations should treat it as a static method.</remarks>
            <param name="packet">The metric sample packet being deserialized</param>
            <returns>The metric sample-compatible object.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.OnSampleCollectionCreate">
            <summary>
            Invoked by the base class to allow inheritors to provide derived implementations
            </summary>
            <remarks>If you wish to provide a derived class for metric sample collection in your derived metric, use this
            method to create and return your derived object. 
            This is used during object construction, so implementations should treat it as a static method.</remarks>
            <returns>The MetricSampleCollection-compatible object.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Metric.OnCalculateValues(Loupe.Extensibility.Data.MetricSampleInterval,System.Int32,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Determines what specific samples to use and then calculates the effective values for each sample, returning the results in the provided
            new metric value set
            </summary>
            <remarks><para>Data covering the provided start and end date will be returned when possible with the goal being that the first metric value returned
            will coincide with the start date, and the last sample will be less than or equal to the end date.  Even if there are raw samples available coincident
            with the start date it may not be possible to provide a metric value for that date due to the need to have multiple samples to calculate most
            metrics.</para>
            <para>When there are no samples available an empty collection should be returned.  In this case the start and end date may be outside the range of the session.</para></remarks>
            <param name="interval">The interval to bias to.</param>
            <param name="intervals">The number of intervals to have between each value exactly.</param>
            <param name="startDateTime">The exact date and time desired to start the value set.</param>
            <param name="endDateTime">The exact end date and time to not exceed.</param>
            <returns>A new metric value set with all calculated values.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.MetricCollection">
            <summary>
            A collection of metrics, keyed by their unique ID and name
            </summary>
            <remarks>A metric has a unique ID to identify a particular instance of the metric (associated with one session) 
            and a name that is unique within a session but is designed for comparison of the same metric between sessions.</remarks>
        </member>
        <member name="E:Gibraltar.Monitor.MetricCollection.CollectionChanged">
            <summary>
            Raised every time the collection's contents are changed to allow subscribers to automatically track changes.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.MetricCollection.#ctor(Gibraltar.Monitor.MetricDefinition)">
            <summary>
            Create a new metric dictionary for the provided definition.
            </summary>
            <remarks>This dictionary is created automatically by the Metric Definition during its initialization.</remarks>
            <param name="metricDefinition"></param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricCollection.OnCollectionChanged(Gibraltar.Monitor.CollectionChangedEventArgs{Loupe.Extensibility.Data.IMetricCollection,Loupe.Extensibility.Data.IMetric})">
            <summary>
            Raises an event whenever our collection is changed to notify objects that want to know when we change.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Gibraltar.Monitor.MetricCollection.Lock">
            <summary>
            Object Change Locking object.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.MetricCollection.ContainsKey(System.Guid)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key">The metric name to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.MetricCollection.Definition">
            <summary>
            The metric definition that owns this dictionary, meaning every metric is a specific instance of this metric definition.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.MetricCollection.TryGetValue(System.Guid,Loupe.Extensibility.Data.IMetric@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricCollection.TryGetValue(System.String,Loupe.Extensibility.Data.IMetric@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The metric name to locate in the collection</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricCollection.IndexOf(Loupe.Extensibility.Data.IMetric)">
            <summary>
            Returns the zero-based index of the specified metric within the dictionary.
            </summary>
            <param name="item">A metric object to find the index of</param>
            <returns>The zero-based index of an item if found, a negative number if not found.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricCollection.Insert(System.Int32,Loupe.Extensibility.Data.IMetric)">
            <summary>Inserting objects by index is not supported because the collection is sorted.</summary>
            <remarks>This method is implemented only for IList interface support and will throw an exception if called.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.MetricCollection.RemoveAt(System.Int32)">
            <summary>Removing objects by index is not supported because the collection is always read only.</summary>
            <remarks>This method is implemented only for IList interface support and will throw an exception if called.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.MetricCollection.Item(System.Int32)">
            <summary>
            Retrieve metric packet by numeric index in collection. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.MetricCollection.Item(System.Guid)">
            <summary>
            Retrieve metric object by its Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.MetricCollection.Item(System.String)">
            <summary>
            Retrieve metric object by its name
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricCollection.Add(Loupe.Extensibility.Data.IMetric)">
            <summary>
            Add the supplied Metric item to this collection.
            </summary>
            <remarks>Metrics automatically add themselves when they are created, so it isn't necessary (and will produce errors) to manually add them.</remarks>
            <param name="item">The new Metric item to add to this collection</param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricCollection.Clear">
            <summary>
            Clearing objects is not supported.
            </summary>
            <remarks>This method is implemented only for ICollection interface support and will throw an exception if called.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.MetricCollection.Contains(Loupe.Extensibility.Data.IMetric)">
            <summary>
            Indicates whether the specified metric object is contained in this dictionary.
            </summary>
            <param name="item">The non-null object to look for.</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricCollection.CopyTo(Loupe.Extensibility.Data.IMetric[],System.Int32)">
            <summary>
            Copies the entire contents of the dictionary into the provided array starting at the specified index.
            </summary>
            <remarks>The provided array must be large enough to contain the entire contents of this dictionary starting with the specified index.</remarks>
            <param name="array">The existing array to copy the dictionary into</param>
            <param name="arrayIndex">The zero-based index to start copying from.</param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricCollection.ToArray">
            <summary>
            Copy the entire collection of metric instances into a new array.
            </summary>
            <returns>A new array containing all of the metric instances in this collection.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.MetricCollection.Count">
            <summary>
            The number of items in the dictionary.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricCollection.IsReadOnly">
            <summary>
            Indicates whether the dictionary is read-only (meaning no new metrics can be added) or not.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.MetricCollection.Remove(Loupe.Extensibility.Data.IMetric)">
            <summary>
            Removing objects is not supported.
            </summary>
            <remarks>This method is implemented only for ICollection interface support and will throw an exception if called.</remarks>
            <param name="item">The Metric item to remove.</param>
        </member>
        <member name="T:Gibraltar.Monitor.MetricDefinition">
            <summary>
            The definition of a single metric that has been captured.  
            </summary>
            <remarks>
            Individual metrics capture a stream of values for a metric definition which can then be displayed and manipulated.
            </remarks>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.#ctor(Gibraltar.Monitor.MetricDefinitionCollection,System.String,System.String,System.String,Loupe.Extensibility.Data.SampleType)">
            <summary>
            Create a new metric definition.
            </summary>
            <remarks>At any one time there should only be one metric definition with a given combination of 
            metric type, category, and counter name.  These values together are used to correlate metrics
            between sessions.  The metric definition will <b>not</b> be automatically added to the provided collection.</remarks>
            <param name="definitions">The definitions dictionary this definition is a part of</param>
            <param name="metricType">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="sampleType">The type of data sampling done for this metric.</param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.#ctor(Gibraltar.Monitor.MetricDefinitionCollection,Gibraltar.Monitor.Serialization.MetricDefinitionPacket)">
            <summary>
            Create a new metric definition from the provided metric definition packet.
            </summary>
            <remarks>At any one time there should only be one metric definition with a given combination of 
            metric type, category, and counter name.  These values together are used to correlate metrics
            between sessions.  The metric definition will <b>not</b> be automatically added to the provided collection.</remarks>
            <param name="definitions">The definitions dictionary this definition is a part of</param>
            <param name="packet">The packet to create a definition from.</param>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinition.Id">
            <summary>
            The unique Id of this metric definition packet.  This can reliably be used as a key to refer to this item.
            </summary>
            <remarks>The key can be used to compare the same definition across different instances (e.g. sessions).
            This Id is always unique to a particular instance.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinition.Name">
            <summary>
            The name of the metric definition being captured.  
            </summary>
            <remarks>The name is for comparing the same definition in different sessions. They will have the same name but 
            not the same Id.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinition.Caption">
            <summary>
            A short display string for this metric definition, suitable for end-user display.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinition.Description">
            <summary>
            A description of what is tracked by this metric, suitable for end-user display.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinition.Interval">
            <summary>
            The recommended default display interval for graphing. 
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinition.MetricTypeName">
            <summary>
            The internal metric type of this metric definition
            </summary>
            <remarks>Metric types distinguish different metric capture libraries from each other, ensuring
            that we can correctly correlate the same metric between sessions and not require category names 
            to be globally unique.  If you are creating a new metric, pick your own metric type that will
            uniquely identify your library or namespace.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinition.Definitions">
            <summary>
            The definitions collection that contains this definition.
            </summary>
            <remarks>This parent pointer should be used when walking from an object back to its parent instead of taking
            advantage of the static metrics definition collection to ensure your application works as expected when handling
            data that has been loaded from a database or data file.  The static metrics collection is for the metrics being
            actively captured in the current process, not for metrics that are being read or manipulated.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinition.Metrics">
            <summary>
            The set of metrics that use this definition.
            </summary>
            <remarks>All metrics with the same definition are of the same object type.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinition.CategoryName">
            <summary>
            The category of this metric for display purposes. This can be a period delimited string to represent a variable height hierarchy
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinition.CategoryNames">
            <summary>
            An array of the individual category names within the specified category name which is period delimited.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinition.CounterName">
            <summary>
            The display name of this metric (unique within the category name).
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinition.SampleType">
            <summary>
            The sample type of the metric.  Indicates whether the metric represents discrete events or a continuous value.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.CompareTo(Loupe.Extensibility.Data.IMetricDefinition)">
            <summary>
            Compares this MetricDefinition to another MetricDefinition to determine sort order
            </summary>
            <remarks>MetricDefinition instances are sorted by their Name property.</remarks>
            <param name="other">The MetricDefinition to compare this MetricDefinition against</param>
            <returns>An int which is less than zero, equal to zero, or greater than zero to reflect whether
            this MetricDefinition should sort as being less-than, equal to, or greater-than the other
            MetricDefintion, respectively.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.Equals(Loupe.Extensibility.Data.IMetricDefinition)">
            <summary>
            Determines if the provided MetricDefinition object is identical to this object.
            </summary>
            <param name="other">The MetricDefinition object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.Equals(System.Object)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="obj">The object to compare this object to</param>
            <returns>True if the other object is also a MetricDefinition and represents the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            An int representing the hash code calculated for the contents of this object.
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.op_Equality(Gibraltar.Monitor.MetricDefinition,Gibraltar.Monitor.MetricDefinition)">
            <summary>
            Compares two MetricDefinition instances for equality.
            </summary>
            <param name="left">The MetricDefinition to the left of the operator</param>
            <param name="right">The MetricDefinition to the right of the operator</param>
            <returns>True if the two MetricDefinitions are equal.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.op_Inequality(Gibraltar.Monitor.MetricDefinition,Gibraltar.Monitor.MetricDefinition)">
            <summary>
            Compares two MetricDefinition instances for inequality.
            </summary>
            <param name="left">The MetricDefinition to the left of the operator</param>
            <param name="right">The MetricDefinition to the right of the operator</param>
            <returns>True if the two MetricDefinitions are not equal.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.op_LessThan(Gibraltar.Monitor.MetricDefinition,Gibraltar.Monitor.MetricDefinition)">
            <summary>
            Compares if one MetricDefinition instance should sort less than another.
            </summary>
            <param name="left">The MetricDefinition to the left of the operator</param>
            <param name="right">The MetricDefinition to the right of the operator</param>
            <returns>True if the MetricDefinition to the left should sort less than the MetricDefinition to the right.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.op_GreaterThan(Gibraltar.Monitor.MetricDefinition,Gibraltar.Monitor.MetricDefinition)">
            <summary>
            Compares if one MetricDefinition instance should sort greater than another.
            </summary>
            <param name="left">The MetricDefinition to the left of the operator</param>
            <param name="right">The MetricDefinition to the right of the operator</param>
            <returns>True if the MetricDefinition to the left should sort greater than the MetricDefinition to the right.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinition.IsLive">
            <summary>
            Indicates if the definition is part of the current live metric definition collection
            </summary>
            <remarks>The same process can be recording metrics and reading metrics from a data source such as a file.  This flag indicates
            whether this metric definition is for playback purposes (it represents previously recorded data) or is part of the active
            metric capture capability of the current process.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinition.IsReadOnly">
            <summary>
            Indicates if the definition can be changed.
            </summary>
            <remarks>If a metric definition is read-only, that means the definition can't be changed in a way that would invalidate
            metrics or metric samples recorded with it.  Display-only values (such as captions and descriptions) can always be changed,
            and new metrics can always be added to a metric definition.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.SetReadOnly">
            <summary>
            Set this metric definition to be read-only and lock out further changes, allowing it to be instantiated and sampled.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinition.Lock">
            <summary>
            Object Change Locking object.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.OnMetricDictionaryCreate">
            <summary>
            Invoked by the base class to allow inheritors to provide derived implementations
            </summary>
            <remarks>If you wish to provide a derived class for the metric dictionary in your derived metric, use this
            method to create and return your derived object. 
            This is used during object construction, so implementations should treat it as a static method.</remarks>
            <returns>The MetricCollection-compatible object.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.GetKey(Loupe.Extensibility.Data.IMetric)">
            <summary>
            Calculate the string key for a metric definition.
            </summary>
            <param name="metric">The existing metric object to generate a string key for</param>
            <returns>The unique string key for this item</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.GetKey(Gibraltar.Monitor.MetricDefinition)">
            <summary>
            Calculate the string key for a metric definition.
            </summary>
            <param name="metricDefinition">The existing metric definition object to generate a string key for</param>
            <returns>The unique string key for this item</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.GetKey(Gibraltar.Monitor.MetricDefinition,System.String)">
            <summary>
            Calculate the string key for a metric.
            </summary>
            <param name="metricDefinition">The existing metric definition object to generate a string key for</param>
            <param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance.</param>
            <returns>The unique string key for this item</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.GetKey(System.String,System.String,System.String)">
            <summary>
            Calculate the string key for a metric definition.
            </summary>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
            <param name="counterName">The name of the performance counter.</param>
            <returns>The unique string key for this item</returns>
            <exception cref="T:System.ArgumentNullException">The provided metricsSystem, categoryName, or counterName was null.</exception>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.GetKey(System.String,System.String,System.String,System.String)">
            <summary>
            Calculate the string key for a metric.
            </summary>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
            <param name="counterName">The name of the performance counter.</param>
            <param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance.</param>
            <returns>The unique string key for this item</returns>
            <exception cref="T:System.ArgumentNullException">The provided metricsSystem, categoryName, or counterName was null.</exception>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinition.NormalizeKey(Gibraltar.Monitor.MetricDefinition,System.String)">
            <summary>
            Takes an instance name or complete metric name and normalizes it to a metric name so it can be used to look up a metric
            </summary>
            <param name="metricDefinition">The metric definition to look for metrics within</param>
            <param name="metricKey">The instance name or complete metric name</param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinition.Packet">
            <summary>
            The underlying packet 
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.MetricDefinitionCollection">
            <summary>
            A collection of metric definitions, keyed by their unique ID and name
            </summary>
            <remarks>
            <para>A metric definition has a unique ID to identify a particular instance of the definition(associated with one session) 
            and a name that is unique within a session but is designed for comparison of the same definition between sessions.</para>
            <para>This class is sealed because it is owned by either the single static active Log class (for metric collection in the current process)
            or during replay is automatically created as part of base objects and there is no way to inject an alternative implementation.</para>
            </remarks>
        </member>
        <member name="E:Gibraltar.Monitor.MetricDefinitionCollection.CollectionChanged">
            <summary>
            Raised every time the collection's contents are changed to allow subscribers to automatically track changes.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.OnCollectionChanged(Gibraltar.Monitor.CollectionChangedEventArgs{Loupe.Extensibility.Data.IMetricDefinitionCollection,Loupe.Extensibility.Data.IMetricDefinition})">
            <summary>
            This method is called every time a collection change event occurs to allow inheritors to override the change event.
            </summary>
            <remarks>If overridden, it is important to call this base implementation to actually fire the event.</remarks>
            <param name="e"></param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.AddMetric(Loupe.Extensibility.Data.IMetric)">
            <summary>
            Add a metric to the definition metric cache.  Used by the MetricCollection base class to flatten the hierarchy.
            </summary>
            <param name="newMetric">The metric object to add to the cache.</param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.RemoveMetric(Loupe.Extensibility.Data.IMetric)">
            <summary>
            Remove a metric to the definition metric cache.  Used by the MetricCollection base class to flatten the hierarchy.
            </summary>
            <param name="victimMetric">The metric object to remove from the cache.</param>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinitionCollection.Lock">
            <summary>
            Object Change Locking object.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.Add(Gibraltar.Monitor.Serialization.MetricDefinitionPacket)">
            <summary>
            Add an existing metric packet object to our collection for the supplied packet.
            </summary>
            <param name="newDefinitionPacket">The new metric packet object to add.</param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.Metric(System.Guid)">
            <summary>
            Retrieve a metric given its unique Id.
            </summary>
            <param name="metricId">The unique Id of the metric to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.ContainsKey(System.Guid)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="name">The metric name to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.ContainsKey(System.String,System.String,System.String)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.ContainsMetricKey(System.Guid)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key">The metric name to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.TryGetValue(System.Guid,Loupe.Extensibility.Data.IMetricDefinition@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.TryGetValue(System.String,Loupe.Extensibility.Data.IMetricDefinition@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="name">The metric name to locate in the collection</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.TryGetValue(System.String,System.String,System.String,Loupe.Extensibility.Data.IMetricDefinition@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The provided metricsSystem, categoryName, or counterName was null.</exception>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.TryGetMetricValue(System.Guid,Loupe.Extensibility.Data.IMetric@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.IndexOf(Loupe.Extensibility.Data.IMetricDefinition)">
            <summary>
            Searches for the specified value and returns the zero-based index of the first occurrence
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.Insert(System.Int32,Loupe.Extensibility.Data.IMetricDefinition)">
            <summary>Inserting objects by index is not supported because the collection is sorted.</summary>
            <remarks>This method is implemented only for IList interface support and will throw an exception if called.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.RemoveAt(System.Int32)">
            <summary>Removing objects by index is not supported because the collection is always read only.</summary>
            <remarks>This method is implemented only for IList interface support and will throw an exception if called.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinitionCollection.Item(System.Int32)">
            <summary>
            Retrieve metric packet by numeric index in collection. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinitionCollection.Item(System.Guid)">
            <summary>
            Retrieve metric object by its Id
            </summary>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinitionCollection.Item(System.String)">
            <summary>
            Retrieve metric object by its name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinitionCollection.Item(System.String,System.String,System.String)">
            <summary>
            Retrieve metric object by its type, category, and counter names.
            </summary>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.Add(Loupe.Extensibility.Data.IMetricDefinition)">
            <summary>
            Add an existing MetricDefinition item to this collection.
            </summary>
            <remarks>If the supplied MetricDefinitin item is already in the collection, an exception will be thrown.</remarks>
            <param name="item">The new MetricDefinition item to add.</param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.Clear">
            <summary>
            Clearing objects is not supported.
            </summary>
            <remarks>This method is implemented only for ICollection interface support and will throw an exception if called.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.Contains(Loupe.Extensibility.Data.IMetricDefinition)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <remarks>This method determines equality using the default equality comparer for the type of values in the list.  It performs
            a linear search and therefore is an O(n) operation.</remarks>
            <param name="item">The object to locate in the collection.</param>
            <returns>true if the item is found in the collection; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.CopyTo(Loupe.Extensibility.Data.IMetricDefinition[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <remarks>Elements are copied to the array in the same order in which the enumerator iterates them from the collection.  The provided array 
            must be large enough to contain the entire contents of this collection starting at the specified index.  This method is an O(n) operation.</remarks>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection.  The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.ToArray">
            <summary>
            Copy the entire collection of metric definitions into a new array.
            </summary>
            <returns>A new array containing all of the metric definitions in this collection.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinitionCollection.Count">
            <summary>
            The number of items currently in the collection
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricDefinitionCollection.IsReadOnly">
            <summary>
            Indicates if the collection is read only and therefore can't have items added or removed.
            </summary>
            <remarks>This collection is never read-only, however removing items is not supported.
            This property is required for ICollection compatibility</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.MetricDefinitionCollection.Remove(Loupe.Extensibility.Data.IMetricDefinition)">
            <summary>
            Removing objects is not supported.
            </summary>
            <remarks>This method is implemented only for ICollection interface support and will throw an exception if called.</remarks>
            <param name="item">The MetricDefinition item to remove.</param>
        </member>
        <member name="T:Gibraltar.Monitor.MetricSample">
            <summary>
            A single raw sample of a metric.  
            </summary>
            <remarks>
            Individual samples represent a single data point and may not be directly useful without
            manipulation.  For example, if the underlying metric is intended to be the rate of an event, the individual raw samples 
            will need to be used to calculate the rate instead of being used directly.
            </remarks>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSample.#ctor(Gibraltar.Monitor.Metric,Gibraltar.Monitor.Serialization.MetricSamplePacket)">
            <summary>
            Create a new metric sample for the provided metric and raw sample packet
            </summary>
            <remarks>The metric sample is automatically added to the samples collection of the provided metric object.</remarks>
            <param name="metric">The specific metric this sample relates to</param>
            <param name="samplePacket">The raw sample packet to wrap.</param>
        </member>
        <member name="P:Gibraltar.Monitor.MetricSample.Id">
            <summary>
            The unique id of this sample
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricSample.Metric">
            <summary>
            The metric this sample relates to.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricSample.Sequence">
            <summary>
            The increasing sequence number of all sample packets for this metric to be used as an absolute order sort.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricSample.Timestamp">
            <summary>
            The exact date and time the metric was captured.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricSample.Value">
            <summary>
            The raw value of the metric.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSample.Write">
            <summary>
            Write this sample to the current process log if it hasn't been written already
            </summary>
            <remarks>If the sample has not been written to the log yet, it will be written.  
            If it has been written, subsequent calls to this method are ignored.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSample.CompareTo(Loupe.Extensibility.Data.IMetricSample)">
            <summary>
            Compare this metric sample with another to determine if they are the same or how they should be sorted relative to each other.
            </summary>
            <remarks>MetricSample instances are sorted by their Sequence number property.</remarks>
            <param name="other"></param>
            <returns>0 for an exact match, otherwise the relationship between the two for sorting.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSample.Equals(Loupe.Extensibility.Data.IMetricSample)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSample.Equals(System.Object)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="obj">The object to compare this object to</param>
            <returns>True if the other object is also a MetricSample and represents the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSample.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            An int representing the hash code calculated for the contents of this object.
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSample.op_Equality(Gibraltar.Monitor.MetricSample,Gibraltar.Monitor.MetricSample)">
            <summary>
            Compares two MetricSample instances for equality.
            </summary>
            <param name="left">The MetricSample to the left of the operator</param>
            <param name="right">The MetricSample to the right of the operator</param>
            <returns>True if the two MetricSamples are equal.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSample.op_Inequality(Gibraltar.Monitor.MetricSample,Gibraltar.Monitor.MetricSample)">
            <summary>
            Compares two MetricSample instances for inequality.
            </summary>
            <param name="left">The MetricSample to the left of the operator</param>
            <param name="right">The MetricSample to the right of the operator</param>
            <returns>True if the two MetricSamples are not equal.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSample.op_LessThan(Gibraltar.Monitor.MetricSample,Gibraltar.Monitor.MetricSample)">
            <summary>
            Compares if one MetricSample instance should sort less than another.
            </summary>
            <param name="left">The MetricSample to the left of the operator</param>
            <param name="right">The MetricSample to the right of the operator</param>
            <returns>True if the MetricSample to the left should sort less than the MetricSample to the right.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSample.op_GreaterThan(Gibraltar.Monitor.MetricSample,Gibraltar.Monitor.MetricSample)">
            <summary>
            Compares if one MetricSample instance should sort greater than another.
            </summary>
            <param name="left">The MetricSample to the left of the operator</param>
            <param name="right">The MetricSample to the right of the operator</param>
            <returns>True if the MetricSample to the left should sort greater than the MetricSample to the right.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.MetricSample.Packet">
            <summary>
            The raw metric sample packet
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.MetricSampleCollection">
            <summary>
            A collection of metric samples for a metric.
            </summary>
        </member>
        <member name="E:Gibraltar.Monitor.MetricSampleCollection.CollectionChanged">
            <summary>
            Raised every time the collection's contents are changed to allow subscribers to automatically track changes.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSampleCollection.#ctor(Gibraltar.Monitor.Metric)">
            <summary>
            Create a new sample collection for the specified metric object
            </summary>
            <param name="metric"></param>
        </member>
        <member name="P:Gibraltar.Monitor.MetricSampleCollection.Metric">
            <summary>
            The metric this collection of samples is related to
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricSampleCollection.First">
            <summary>
            The first object in the collection
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricSampleCollection.Last">
            <summary>
            The last object in the collection
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSampleCollection.OnCollectionChanged(Gibraltar.Monitor.CollectionChangedEventArgs{Loupe.Extensibility.Data.IMetricSampleCollection,Loupe.Extensibility.Data.IMetricSample})">
            <summary>
            This method is called every time a collection change event occurs to allow inheritors to override the change event.
            </summary>
            <remarks>If overridden, it is important to call this base implementation to actually fire the event.</remarks>
            <param name="e"></param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSampleCollection.IndexOf(Loupe.Extensibility.Data.IMetricSample)">
            <summary>
            Retrieves the numerical index of the specified item in the collection or -1 if not found.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSampleCollection.Insert(System.Int32,Loupe.Extensibility.Data.IMetricSample)">
            <summary>
            Not supported.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSampleCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a sample at a specific numerical index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Gibraltar.Monitor.MetricSampleCollection.Item(System.Int32)">
            <summary>
            Select a metric sample by its numerical index
            </summary>
            <remarks>Setting a metric sample to a particular index is not supported and will result in an exception being thrown.</remarks>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSampleCollection.Add(Loupe.Extensibility.Data.IMetricSample)">
            <summary>
            Add the specified MetricSample item to the collection
            </summary>
            <param name="item">The new MetricSample item to add</param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSampleCollection.Clear">
            <summary>
            Remove all elements from the collection.
            </summary>
            <remarks>This event is substantially more efficient than removing them all individually.  Only one collection
            change event will be raised.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSampleCollection.Contains(Loupe.Extensibility.Data.IMetricSample)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <remarks>This method determines equality using the default equality comparer for the type of values in the list.  It performs
            a linear search and therefore is an O(n) operation.</remarks>
            <param name="item">The object to locate in the collection.</param>
            <returns>true if the item is found in the collection; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSampleCollection.ContainsKey(System.Int64)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSampleCollection.CopyTo(Loupe.Extensibility.Data.IMetricSample[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <remarks>Elements are copied to the array in the same order in which the enumerator iterates them from the collection.  The provided array 
            must be large enough to contain the entire contents of this collection starting at the specified index.  This method is an O(n) operation.</remarks>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection.  The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSampleCollection.ToArray">
            <summary>
            Copy the entire collection of metric samples into a new array.
            </summary>
            <returns>A new array containing all of the metric samples in this collection.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.MetricSampleCollection.Count">
            <summary>
            The number of items currently in the collection
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricSampleCollection.IsReadOnly">
            <summary>
            Indicates if the collection is read only and therefore can't have items added or removed.
            </summary>
            <remarks>This collection is never read-only.  
            This property is required for ICollection compatibility</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSampleCollection.Remove(Loupe.Extensibility.Data.IMetricSample)">
            <summary>
            Remove the specified MetricSample item.  If the MetricSample isn't in the collection, no exception is thrown.
            </summary>
            <param name="item">The MetricSample item to remove.</param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricSampleCollection.RemoveItem(Loupe.Extensibility.Data.IMetricSample)">
            <summary>
            Remove the specified MetricSample item without firing an event.  The outer Remove method should fire the event.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Monitor.MetricValue">
            <summary>
            A single display-ready metric value.  
            </summary>
            <remarks>
            This is the complementary object to a Metric Sample.  A Sample is a raw value that may require multiple
            samples to determine a display ready value.
            </remarks>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValue.#ctor(Gibraltar.Monitor.MetricValueCollection,System.DateTimeOffset,System.Double)">
            <summary>Create a new metric value for the specified metric value set.</summary>
            <remarks>The new metric value is automatically added to the provided metric value set.</remarks>
            <param name="metricValueCollection">The metric value set this value is part of.</param>
            <param name="timeStamp">The unique date and time of this value sample.</param>
            <param name="value">The calculated value.</param>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValue.ValueCollection">
            <summary>
            The metric value set this value is part of.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValue.Timestamp">
            <summary>
            The exact date and time the metric was captured.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValue.LocalTimestamp">
            <summary>
            The date and time the metric was captured in the effective time zone.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValue.Value">
            <summary>
            The value of the metric.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValue.PercentageValue">
            <summary>
            The value of the metric multiplied by 100 to handle raw percentage display
            </summary>
            <remarks>This value is scaled by 100 even if the underlying metric is not a percentage</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValue.Sequence">
            <summary>
            The increasing sequence number of all sample packets for this metric to be used as an absolute order sort.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValue.CompareTo(Loupe.Extensibility.Data.IMetricValue)">
            <summary>
            Compare this metric value to another for the purpose of sorting them in time.
            </summary>
            <remarks>MetricValue instances are sorted by their Sequence number property.</remarks>
            <param name="other">The MetricValue object to compare this object to.</param>
            <returns>An int which is less than zero, equal to zero, or greater than zero to reflect whether
            this MetricValue should sort as being less-than, equal to, or greater-than the other
            MetricValue, respectively.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValue.Equals(Loupe.Extensibility.Data.IMetricValue)">
            <summary>
            Determines if the provided MetricValue object is identical to this object.
            </summary>
            <param name="other">The MetricValue object to compare this object to.</param>
            <returns>True if the Metric Value objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValue.Equals(System.Object)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="obj">The object to compare this object to</param>
            <returns>True if the other object is also a MetricValue and represents the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValue.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            An int representing the hash code calculated for the contents of this object.
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValue.op_Equality(Gibraltar.Monitor.MetricValue,Gibraltar.Monitor.MetricValue)">
            <summary>
            Compares two MetricValue instances for equality.
            </summary>
            <param name="left">The MetricValue to the left of the operator</param>
            <param name="right">The MetricValue to the right of the operator</param>
            <returns>True if the two MetricValues are equal.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValue.op_Inequality(Gibraltar.Monitor.MetricValue,Gibraltar.Monitor.MetricValue)">
            <summary>
            Compares two MetricValue instances for inequality.
            </summary>
            <param name="left">The MetricValue to the left of the operator</param>
            <param name="right">The MetricValue to the right of the operator</param>
            <returns>True if the two MetricValues are not equal.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValue.op_LessThan(Gibraltar.Monitor.MetricValue,Gibraltar.Monitor.MetricValue)">
            <summary>
            Compares if one MetricValue instance should sort less than another.
            </summary>
            <param name="left">The MetricValue to the left of the operator</param>
            <param name="right">The MetricValue to the right of the operator</param>
            <returns>True if the MetricValue to the left should sort less than the MetricValue to the right.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValue.op_GreaterThan(Gibraltar.Monitor.MetricValue,Gibraltar.Monitor.MetricValue)">
            <summary>
            Compares if one MetricValue instance should sort greater than another.
            </summary>
            <param name="left">The MetricValue to the left of the operator</param>
            <param name="right">The MetricValue to the right of the operator</param>
            <returns>True if the MetricValue to the left should sort greater than the MetricValue to the right.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.MetricValueCollection">
            <summary>
            A set of display-ready values for a metric. 
            </summary>
            <remarks>
            These are after any necessary calculation or interpolation.
            To get a value set, use the Calculate method on a metric.  For best performance, specify the least accurate
            interval you need to graph.
            </remarks>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.#ctor(Gibraltar.Monitor.Metric,Loupe.Extensibility.Data.MetricSampleInterval,System.Int32,System.String)">
            <summary>Create a new metric value set.</summary>
            <param name="metric">The metric this value set relates to.</param>
            <param name="interval">The interval to bias to.</param>
            <param name="intervals">The number of intervals to have between each value exactly.</param>
            <param name="unitCaption">An end-user short display caption for the unit axis.</param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.#ctor(Gibraltar.Monitor.EventMetricValueDefinition,Loupe.Extensibility.Data.MetricSampleInterval,System.Int32,System.String)">
            <summary>Create a new metric value set.</summary>
            <param name="trendValue">The event metric value this value set relates to.</param>
            <param name="interval">The interval to bias to.</param>
            <param name="intervals">The number of intervals to have between each value exactly.</param>
            <param name="unitCaption">An end-user short display caption for the unit axis.</param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.#ctor(System.String,System.String,Loupe.Extensibility.Data.MetricSampleInterval,System.Int32,System.String)">
            <summary>Create a new metric value set.</summary>
            <param name="caption">The end-user caption for this metric value set.</param>
            <param name="description">The end-user description for this metric value set.</param>
            <param name="interval">The interval to bias to.</param>
            <param name="intervals">The number of intervals to have between each value exactly.</param>
            <param name="unitCaption">An end-user short display caption for the unit axis.</param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.#ctor(System.String,System.String,System.TimeSpan,System.String)">
            <summary>Create a new metric value set.</summary>
            <param name="caption">The end-user caption for this metric value set.</param>
            <param name="description">The end-user description for this metric value set.</param>
            <param name="interval">The interval.</param>
            <param name="unitCaption">An end-user short display caption for the unit axis.</param>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.Caption">
            <summary>
            A display caption for this metric set.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.Description">
            <summary>
            A description of this metric set.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.Interval">
            <summary>
            The unit of intervals between samples.  If not set to default or shortest, see the Intervals property for how many intervals between samples.
            </summary>
            <remarks>To get a higher resolution data set in the case when the sample interval is not set to shortest, use the CalculateValues method on the metric.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.Intervals">
            <summary>
            The number of intervals between samples in the interval set.
            </summary>
            <remarks>This property is not meaningful if the sample interval is set to default or shortest.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.StartDateTime">
            <summary>
            The start date and time of this value set interval.  This may not represent all of the data available in the metric.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.EndDateTime">
            <summary>
            The end date and time of this value set interval.  This may not represent all of the data available in the metric.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.MinValue">
            <summary>
            The smallest value in the value set, useful for setting ranges for display.  The minimum value may be negative.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.MinValueMetricValue">
            <summary>
            The metric object with the smallest value in the value set, useful for setting ranges for display.  The minimum value may be negative.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.MaxValue">
            <summary>
            The largest value in the value set, useful for setting ranges for display.  The maximum value may be negative.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.MaxValueMetricValue">
            <summary>
            The metric object with the largest value in the value set, useful for setting ranges for display.  The maximum value may be negative.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.AverageValue">
            <summary>
            The average value in the value set, useful for setting ranges for display.  The average value may be negative.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.PercentileValue">
            <summary>
            The 95th percentile value in the value set.  The percentile value may be negative.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.UnitCaption">
            <summary>
            The display caption for the values in this set
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.IndexOf(Loupe.Extensibility.Data.IMetricValue)">
            <summary>
            Searches for the specified value and returns the zero-based index of the first occurrence
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.Insert(System.Int32,Loupe.Extensibility.Data.IMetricValue)">
            <summary>
            Not Supported.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.  REMOVING IS NOT CURRENTLY SUPPORTED.
            </summary>
            <remarks>
            The elements that follow the removed element are moved up to occupy the vacated spot.  The indexes of the elements that are moved are also updated.
            </remarks>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set. 
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. 
                            </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList"/> is read-only. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.Item(System.Int32)">
            <summary>
            Gets the item in the collection at the specified zero-based index.
            </summary>
            <remarks>Setting an item at a specific index is not supported.</remarks>
            <param name="index">The zero-based index to retrieve an item for</param>
            <returns>The item at the specified index</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.Add(Loupe.Extensibility.Data.IMetricValue)">
            <summary>
            Adds the supplied MetricValue item to this collection.
            </summary>
            <remarks>The MetricValue item must refer to this metric value set, and have a unique timestamp.</remarks>
            <param name="item">The new MetricValue item to add.</param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>. 
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.
                                -or- 
                                The <see cref="T:System.Collections.IList"/> has a fixed size. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.Clear">
            <summary>
            Clearing objects is not supported.
            </summary>
            <remarks>This method is implemented only for ICollection interface support and will throw an exception if called.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted. 
                            </param><param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>. 
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. 
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.
                                -or- 
                                The <see cref="T:System.Collections.IList"/> has a fixed size. 
                            </exception><exception cref="T:System.NullReferenceException"><paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.Contains(Loupe.Extensibility.Data.IMetricValue)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <remarks>This method determines equality using the default equality comparer for the type of values in the list.  It performs
            a linear search and therefore is an O(n) operation.</remarks>
            <param name="item">The object to locate in the collection.</param>
            <returns>true if the item is found in the collection; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.CopyTo(Loupe.Extensibility.Data.IMetricValue[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <remarks>Elements are copied to the array in the same order in which the enumerator iterates them from the collection.  The provided array 
            must be large enough to contain the entire contents of this collection starting at the specified index.  This method is an O(n) operation.</remarks>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection.  The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing. 
                            </param><param name="index">The zero-based index in <paramref name="array"/> at which copying begins. 
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null. 
                            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. 
                            </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
                                -or- 
                            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
                                -or- 
                                The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>. 
                            </exception><exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.Count">
            <summary>
            The number of items currently in the collection
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.IsReadOnly">
            <summary>
            Indicates if the collection is read only and therefore can't have items added or removed.
            </summary>
            <remarks>This collection is always read-only.  
            This property is required for ICollection compatibility</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.MetricValueCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.Remove(Loupe.Extensibility.Data.IMetricValue)">
            <summary>
            Removing objects is not supported.
            </summary>
            <remarks>This method is implemented only for ICollection interface support and will throw an exception if called.</remarks>
            <param name="item">The MetricValue item to remove.</param>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/>. 
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.
                                -or- 
                                The <see cref="T:System.Collections.IList"/> has a fixed size. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.GetSampleSequence">
            <summary>
            A unique, increasing sequence number each time it's called.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.MetricValueCollection.CalculateValues">
            <summary>
            Calculate the average and percentile values, since they can't be incrementally updated.
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.Monitor">
            <summary>
            The central monitor that manages the configuration of the individual monitors
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Monitor.Initialize(Gibraltar.Messaging.Publisher,Loupe.Configuration.AgentConfiguration,System.Boolean)">
            <summary>
            Apply the provided listener configuration
            </summary>
            <param name="publisher">The publisher to record events to</param>
            <param name="agentConfiguration">The active agent configuration</param>
            <param name="async">True to initialize asynchronously</param>
            <remarks>If calling initialization from a path that may have started with the trace listener,
            you must set suppressTraceInitialize to true to guarantee that the application will not deadlock
            or throw an unexpected exception.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Monitor.Initialized">
            <summary>
            Indicates if the listeners have been initialized the first time yet.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Monitor.Subscribe(Gibraltar.Monitor.ILoupeMonitor)">
            <summary>
            Add the specified monitor, which should already be configured.
            </summary>
            <remarks>The monitor may be polled immediately after it is subscribed so it should be
            configured.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Monitor.Unsubscribe(Gibraltar.Monitor.ILoupeMonitor)">
            <summary>
            Remove the specified monitor.
            </summary>
            <remarks>If the monitor object isn't subscribed no error is raised.  If the object is being polled
            there may be a short delay before it is unregistered.</remarks>
            <returns>True if the monitor was previously registered and has now been removed</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Monitor.WaitOnConfigUpdate(System.Int32)">
            <summary>
            wait up to the specified number of milliseconds for a configuration update.
            </summary>
            <param name="maxWaitInterval"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Monitor.GetTimerInterval(Loupe.Extensibility.Data.MetricSampleInterval)">
            <summary>
            Determines the number of milliseconds in the provided interval for the timer object.
            </summary>
            <remarks>The values Default and Shortest are automatically treated as Minute by this function, effectively
            making once a minute the system default.</remarks>
            <param name="referenceInterval">The interval to calculate milliseconds for</param>
            <returns>The number of milliseconds between timer polls</returns>
        </member>
        <member name="T:Gibraltar.Monitor.Net.CLRListener">
            <summary>
            Monitors the Common Language Runtime for noteworthy events.
            </summary>
            <remarks>This listener is automatically activated by the PerformanceMonitor class.</remarks>
        </member>
        <member name="T:Gibraltar.Monitor.Net.CLRListener.MessageSource">
            <summary>
            Provides method source to log method to prevent normal call stack interpretation 
            </summary>
            <remarks>Since this listener deals with CLR events the message source information isn't
            very interesting.  We don't want to pay the performance price of it doing its normal
            lookup so we'll override the behavior.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Net.CLRListener.MessageSource.MethodName">
            <summary>
            Should return the simple name of the method which issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Net.CLRListener.MessageSource.ClassName">
            <summary>
            Should return the full name of the class (with namespace) whose method issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Net.CLRListener.MessageSource.FileName">
            <summary>
            Should return the name of the file containing the method which issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Net.CLRListener.MessageSource.LineNumber">
            <summary>
            Should return the line within the file at which the log message was issued.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Net.CLRListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            <remarks>Calling Dispose() (automatic when a using statement ends) will generate the metric.</remarks>
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.Net.CLRListener.Initialize(Loupe.Configuration.ListenerConfiguration)">
            <summary>
            Initialize the Common Language Runtime Listener with the provided configuration
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Gibraltar.Monitor.Net.CLRListener.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.
            </summary>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="M:Gibraltar.Monitor.Net.CLRListener.FormatDataRate(System.Int64)">
            <summary>
            Convert a raw data rate number (in bps) into human-readable form.
            </summary>
            <remarks>Exact multiples of 1000 are bumped up to the next larger units, as are values exceeding four digits.
            Fractional units are displayed, if applicable, up to three digits (using InvariantCulture).
            Rates less than 1 Kbps (or less than 1 Mbps and containing fractional Kbps) are displayed as fractional Kbps.</remarks>
            <param name="bpsRate">The data rate (in bps--bits per second) to be displayed.</param>
            <returns>A string formatted as a rate with units.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.Net.ConsoleListener">
            <summary>
            Listens for standard and error console output and redirects to the session file.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Net.ConsoleListener.#ctor(System.String,System.IO.TextWriter)">
            <summary>
            Create a new instance of the console listener.
            </summary>
            <param name="outputCategory"></param>
            <param name="originalWriter"></param>
        </member>
        <member name="P:Gibraltar.Monitor.Net.ConsoleListener.Encoding">
            <summary>
            When overridden in a derived class, returns the <see cref="T:System.Text.Encoding"/> in which the output is written.
            </summary>
            <returns>
            The Encoding in which the output is written.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.Net.ConsoleListener.Write(System.Char)">
            <summary>
            Writes a character to the text stream.
            </summary>
            <param name="value">The character to write to the text stream. 
                            </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. 
                            </exception><exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><filterpriority>1</filterpriority>
            <remarks>
            TODO: At some point we want to overhaul this to override at the Write(string) and WriteLine() level instead
            of Write(char) and pass the data in a different, stream-optimized format rather than as log messages.
            But for now... Wrap as a log message for each line (as we get a newline)....
            </remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Net.ConsoleListener.Flush">
            <summary>
            Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.Net.ConsoleListener.RegisterConsoleIntercepter">
            <summary>
            Registers new ConsoleIntercepter on Console.Out and Console.Error.
            </summary>
            <remarks>This attempts to get the Console's InternalSyncObject to protect the operations as atomic,
            but will make a best-effort to do them even if the lock object could not be obtained.</remarks>
        </member>
        <member name="T:Gibraltar.Monitor.Net.GCEventListener">
            <summary>
            Records Garbage Collector metrics
            </summary>
            <remarks>Leverages ETW metrics.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Net.GCEventListener.#ctor">
            <summary>
            Create a GC Event Listener (which will automatically start listening to and recording events)
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Net.GCEventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)">
            <inheritdoc />
        </member>
        <member name="M:Gibraltar.Monitor.Net.GCEventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Gibraltar.Monitor.ProcessMonitor">
            <summary>
            Monitors the details of a process.
            </summary>
            <remarks>Creates metrics for each thread in the process and other aspects of the process.
            This can be the current process (if created without specifying a process ID) or an arbitrary
            running process that the user has access to (if the Process ID is specified)</remarks>
        </member>
        <member name="F:Gibraltar.Monitor.ProcessMonitor.ProcessMetricType">
            <summary>
            The metric type for all process monitor metrics.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.ProcessMonitor.CounterNonpagedSystemMemorySize">
            <summary>
            The metric name for Nonpaged System Memory Size
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.ProcessMonitor.CounterPagedMemorySize">
            <summary>
            The metric name for Paged Memory Size
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.ProcessMonitor.CounterPagedSystemMemorySize">
            <summary>
            The metric name for Paged System Memory Size
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.ProcessMonitor.CounterPeakPagedMemorySize">
            <summary>
            The metric name for Peak Paged Memory Size
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.ProcessMonitor.CounterPeakVirtualMemorySize">
            <summary>
            The metric name for Peak Virtual Memory Size
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.ProcessMonitor.CounterPeakWorkingSet">
            <summary>
            The metric name for Peak Working Set
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.ProcessMonitor.CounterPrivateMemorySize">
            <summary>
            The metric name for Private Memory Size
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.ProcessMonitor.CounterPrivilegedProcessorTime">
            <summary>
            The metric name for Privileged Processor Time
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.ProcessMonitor.CounterTotalProcessorTime">
            <summary>
            The metric name for Total Processor Time
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.ProcessMonitor.CounterUserProcessorTime">
            <summary>
            The metric name for User Processor Time
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.ProcessMonitor.CounterVirtualMemorySize">
            <summary>
            The metric name for Virtual Memory Size
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.ProcessMonitor.CounterWorkingSet">
            <summary>
            The metric name for Working Set
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.ProcessMonitor.#ctor">
            <summary>
            Create a new process monitor for the current process
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.ProcessMonitor.#ctor(System.Int32)">
            <summary>
            Create a new process monitor for the specified Process Id
            </summary>
            <remarks>If the specified process Id doesn't currently exist or isn't accessible to the current user, an exception will be thrown</remarks>
            <param name="processId">The process Id of the running process to connect to.</param>
        </member>
        <member name="P:Gibraltar.Monitor.ProcessMonitor.Caption">
            <inheritdoc />
        </member>
        <member name="M:Gibraltar.Monitor.ProcessMonitor.Initialize(Gibraltar.Messaging.Publisher)">
            <inheritdoc />
        </member>
        <member name="M:Gibraltar.Monitor.ProcessMonitor.Poll">
            <inheritdoc />
        </member>
        <member name="P:Gibraltar.Monitor.ProcessMonitor.MonitoredProcess">
            <summary>
            The process object being monitored
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ProcessMonitor.ProcessId">
            <summary>
            The unique numeric Id of the process being monitored.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.ProcessMonitor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.ProcessMonitor.Equals(Gibraltar.Monitor.ILoupeMonitor)">
            <inheritdoc />
        </member>
        <member name="M:Gibraltar.Monitor.ProcessMonitor.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gibraltar.Monitor.ProcessMonitor.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Gibraltar.Monitor.ProcessMonitor.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.
            </summary>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="M:Gibraltar.Monitor.ProcessMonitor.Register">
            <summary>
            Register all of the individual metrics we use
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.ResolveUserEventArgs">
            <summary>
            Arguments for the ResolveUser Event
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ResolveUserEventArgs.UserName">
            <summary>
            The user name being resolved
            </summary>
            <remarks>This value is treated as a key for the duration of the current session.  If an ApplicationUser
            object is returned from this event it will be associated with this user and the event will not be raised
            again for this user name for the duration of this session.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.ResolveUserEventArgs.Principal">
            <summary>
            The current thread principal that often contains additional information about the current user
            </summary>
            <remarks>Most authentication systems will add additional user information here which you can
            map to the ApplicationUser object</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.ResolveUserEventArgs.GetUser">
            <summary>
            The application user being populated for the current user.
            </summary>
            <remarks>Update this user with the information available.  If this method is called then
            the configured user will be stored as the definitive information for this user name.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.ResolveUserEventArgs.User">
            <summary>
            The underlying user object, if it was ever configured
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.SampledMetric">
            <summary>
            The base class for creating sampled metrics
            </summary>
            <remarks>
            A sampled metric always has a value for any timestamp between its start and end timestamps.
            It presumes any interim value by looking at the best fit sampling of the real world value
            and assuming it covers the timestamp in question.  It is therefore said to be contiguous for 
            the range of start and end.  Event metrics are only defined at the instant they are timestamped, 
            and imply nothing for other timestamps.  
            For event based metrics, use the EventMetric base class.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.SampledMetric.#ctor(Gibraltar.Monitor.SampledMetricDefinition,Gibraltar.Monitor.Serialization.SampledMetricPacket)">
            <summary>
            Create a new sampled metric object from the provided raw data packet
            </summary>
            <remarks>The new metric will automatically be added to the metric definition's metrics collection.</remarks>
            <param name="definition">The object that defines this metric</param>
            <param name="packet">The raw data packet</param>
        </member>
        <member name="P:Gibraltar.Monitor.SampledMetric.Definition">
            <summary>
            The definition of this metric object.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.SampledMetric.OnCalculateValues(Loupe.Extensibility.Data.MetricSampleInterval,System.Int32,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Determines what specific samples to use and then calculates the effective values for each sample, returning the results in the provided
            new metric value set
            </summary>
            <remarks>Data covering the provided start and end date will be returned when possible with the goal being that the first metric value returned
            will coincide with the start date, and the last sample will be less than or equal to the end date.  Even if there are raw samples available coincident
            with the start date it may not be possible to provide a metric value for that date due to the need to have multiple samples to calculate most
            metrics.</remarks>
            <param name="interval">The interval to bias to.</param>
            <param name="intervals">The number of intervals to have between each value exactly.</param>
            <param name="startDateTime">The exact date and time desired to start the value set.</param>
            <param name="endDateTime">The exact end date and time to not exceed.</param>
            <returns>A new metric value set with all calculated values.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.SampledMetric.OnCalculateValuesOnInterval(Loupe.Extensibility.Data.MetricSampleInterval,System.Int32,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Calculate the value set for the provided date range inclusive with samples exactly on the provided interval.
            </summary>
            <remarks></remarks>
            <param name="interval">The interval to bias to.</param>
            <param name="intervals">The number of intervals to have between each value exactly.</param>
            <param name="startDateTime">The exact date and time desired to start the value set.</param>
            <param name="endDateTime">The exact end date and time to not exceed.</param>
            <returns>A new metric value set with all calculated values.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.SampledMetric.OnCalculateValuesShortest(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Calculate a value set for the provided date range inclusive using all of the sample data, even if 
            that produces irregular sample intervals.
            </summary>
            <param name="startDateTime">The exact date and time desired to start the value set.</param>
            <param name="endDateTime">The exact end date and time to not exceed.</param>
            <returns>A new metric value set with all calculated values.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.SampledMetric.CalculateSample(Gibraltar.Monitor.MetricValueCollection,Gibraltar.Monitor.SampledMetricSample,Gibraltar.Monitor.SampledMetricSample,System.Nullable{System.DateTimeOffset})">
            <summary>
            Calculate one effective value from the provided objects
            </summary>
            <param name="metricValueCollection">The value set to add the new value to</param>
            <param name="baselineSample">The baseline to calculate from.  Only used (and required) for metrics that require multiple samples.</param>
            <param name="valueSample">The value sample to perform the calculation with.</param>
            <param name="timeStampOverride">An optional override timestamp</param>
        </member>
        <member name="P:Gibraltar.Monitor.SampledMetric.Packet">
            <summary>
            The underlying packet 
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.SampledMetricCollection">
            <summary>
            A collection of sampled metrics, keyed by their unique ID and name
            </summary>
            <remarks>A metric has a unique ID to identify a particular instance of the metric (associated with one session) 
            and a name that is unique within a session but is designed for comparison of the same metric between sessions.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.SampledMetricCollection.#ctor(Gibraltar.Monitor.SampledMetricDefinition)">
            <summary>
            Create a new sampled metric dictionary for the provided definition.
            </summary>
            <remarks>This dictionary is created automatically by the Metric Definition during its initialization.</remarks>
            <param name="metricDefinition">The definition of the sampled metric to create a metric dictionary for</param>
        </member>
        <member name="T:Gibraltar.Monitor.SampledMetricDefinition">
            <summary>
            The base class for defining sampled metrics
            </summary>
            <remarks>
            A sampled metric always has a value for any timestamp between its start and end timestamps.
            It presumes any interim value by looking at the best fit sampling of the real world value
            and assuming it covers the timestamp in question.  It is therefore said to be contiguous for 
            the range of start and end.  Event metrics are only defined at the instant they are timestamped, 
            and imply nothing for other timestamps.  
            For event based metrics, use the EventMetricDefinition base class.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.SampledMetricDefinition.#ctor(Gibraltar.Monitor.MetricDefinitionCollection,Gibraltar.Monitor.Serialization.SampledMetricDefinitionPacket)">
            <summary>
            Create a new sampled metric object from the provided raw data packet.
            </summary>
            <remarks>The metric definition <b>will</b> be automatically added to the provided collection.</remarks>
            <param name="definitions">The definitions dictionary this definition is a part of.</param>
            <param name="packet">The packet to create a definition from.</param>
        </member>
        <member name="P:Gibraltar.Monitor.SampledMetricDefinition.UnitCaption">
            <summary>
            The display caption for the calculated values captured under this metric
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.SampledMetricSample">
            <summary>
            One sample of a sampled metric
            </summary>
            <remarks>Specific sampled metrics will have a derived implementation of this class, however
            clients should work with this interface when feasible to ensure compatibility with any sampled
            metric implementation.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.SampledMetricSample.#ctor(Gibraltar.Monitor.SampledMetric,Gibraltar.Monitor.Serialization.SampledMetricSamplePacket,System.Boolean)">
            <summary>
            Create a new sampled metric sample object for the provided metric and raw sample packet.
            </summary>
            <remarks>The metric sample is automatically added to the samples collection of the provided metric object.</remarks>
            <param name="metric">The metric object this sample applies to.</param>
            <param name="metricSamplePacket">The raw sample data packet.</param>
            <param name="requiresMultipleSamples">Indicates whether more than one sample is required to calculate an effective metric value.</param>
        </member>
        <member name="M:Gibraltar.Monitor.SampledMetricSample.ComputeValue">
            <summary>
            Compute the resultant value for this sample.
            </summary>
            <remarks>
            This override is only useful if RequiresMultipleSamples is false.  In all other cases, you need to first
            identify a baseline sample to compare this sample with to determine the final value.
            </remarks>
            <returns>The calculated counter value</returns>
        </member>
        <member name="M:Gibraltar.Monitor.SampledMetricSample.ComputeValue(Loupe.Extensibility.Data.ISampledMetricSample)">
            <summary>
            Compute the resultant value for this sample compared with the provided baseline sample
            </summary>
            <remarks>
            The baseline sample must be for a date and time prior to this sample for correct results.
            </remarks>
            <param name="baselineSample">The previous baseline sample to calculate a difference for</param>
            <returns>The calculated counter value</returns>
        </member>
        <member name="M:Gibraltar.Monitor.SampledMetricSample.ComputeValue(Gibraltar.Monitor.SampledMetricSample)">
            <summary>
            Compute the resultant value for this sample compared with the provided baseline sample
            </summary>
            <remarks>
            The baseline sample must be for a date and time prior to this sample for correct results.
            </remarks>
            <param name="baselineSample">The previous baseline sample to calculate a difference for</param>
            <returns>The calculated counter value</returns>
        </member>
        <member name="P:Gibraltar.Monitor.SampledMetricSample.RequiresMultipleSamples">
            <summary>
            Indicates whether two samples are required to calculate a metric value or not. 
            </summary>
            <remarks>
            Only a few counter types - notably the NumberOfItems types - are in their final form
            from a single sample.  All others require two samples to compare.
            </remarks>
        </member>
        <member name="P:Gibraltar.Monitor.SampledMetricSample.Metric">
            <summary>
            The sampled metric this sample is for.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SampledMetricSample.Value">
            <summary>
            The raw value of this metric.  Depending on the metric definition, this may be meaningless and instead a 
            calculation may need to be performed.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.SampledMetricSample.CompareTo(Gibraltar.Monitor.SampledMetricSample)">
            <summary>
            Compares this sampled metric object to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.ApplicationUserPacket.Key">
            <summary>
            Optional. An absolute, unique key for the user to use as a primary match
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.ApplicationUserPacket.FullyQualifiedUserName">
            <summary>
            The fully qualified user name, composed from the Domain and Name as originally specified
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.ApplicationUserPacket.Caption">
            <summary>
            A display label for the user (such as their full name)
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.ApplicationUserPacket.EmailAddress">
            <summary>
            Optional.  A primary email address for the user
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.ApplicationUserPacket.Phone">
            <summary>
            Optional.  A phone number or other telecommunication alias
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.ApplicationUserPacket.Organization">
            <summary>
            Optional.  A label for the organization this user is a part of
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.ApplicationUserPacket.TimeZoneCode">
            <summary>
            Optional.  The primary time zone the user is associated with.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.ApplicationUserPacket.Title">
            <summary>
            Optional.  A title to display for the user
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.ApplicationUserPacket.Role">
            <summary>
            Optional.  A primary role for this user with respect to this application
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.ApplicationUserPacket.Tenant">
            <summary>
            Optional.  The primary tenant this user is a part of.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.ApplicationUserPacket.Properties">
            <summary>
            Application provided properties 
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.ApplicationUserPacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.ApplicationUserPacket.Equals(Gibraltar.Monitor.Serialization.ApplicationUserPacket)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.ApplicationUserPacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.ApplicationUserPacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.CustomSampledMetricDefinitionPacket">
            <summary>
            The serializeable representation of a custom sampled metric
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricDefinitionPacket.#ctor(System.String,System.String,System.String,Gibraltar.Monitor.MetricSampleType)">
            <summary>
            Create a new custom sampled metric definition packet from the provided information
            </summary>
            <remarks>Definition packets are the lightweight internals used for persistence.</remarks>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="metricSampleType">The specific unit representation of the data being captured for this metric</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricDefinitionPacket.#ctor(System.String,System.String,System.String,Gibraltar.Monitor.MetricSampleType,System.String,System.String)">
            <summary>
            Create a new custom sampled metric definition packet from the provided information
            </summary>
            <remarks>Definition packets are the lightweight internals used for persistence.</remarks>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="metricSampleType">The specific unit representation of the data being captured for this metric</param>
            <param name="unitCaption">The display caption for the calculated values captured under this metric.</param>
            <param name="description">A description of what is tracked by this metric, suitable for end-user display.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricDefinitionPacket.#ctor(Gibraltar.Monitor.Session)">
            <summary>
            Create a new custom sampled metric definition packet for rehydration
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricDefinitionPacket.CompareTo(Gibraltar.Monitor.Serialization.CustomSampledMetricDefinitionPacket)">
            <summary>
            Compares this object to the provided comparison object
            </summary>
            <param name="other"></param>
            <returns>Zero if objects are the same object, -1 or 1 to indicate relative order (see CompareTo for more information)</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricDefinitionPacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricDefinitionPacket.Equals(Gibraltar.Monitor.Serialization.CustomSampledMetricDefinitionPacket)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricDefinitionPacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.CustomSampledMetricDefinitionPacket.MetricSampleType">
            <summary>
            The intended method of interpreting the sampled counter value.
            </summary>
            <remarks>The counter type determines what math needs to be run
            to determine the correct value when comparing two samples.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricDefinitionPacket.SampledMetricTypeCaption(Gibraltar.Monitor.MetricSampleType)">
            <summary>
            Generate a display caption for the supplied sample metric type
            </summary>
            <param name="metricSampleType">The sample metric type to make a caption for</param>
            <returns>An end-user display caption</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricDefinitionPacket.OnUnitCaptionGenerate">
            <summary>
            Calculates the unit caption as required by the base object.
            </summary>
            <returns>The caption to display for the units of value.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricDefinitionPacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.CustomSampledMetricPacket">
            <summary>
            The serializeable representation of a custom sampled metric
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricPacket.#ctor(Gibraltar.Monitor.Serialization.CustomSampledMetricDefinitionPacket,System.String)">
            <summary>
            Create a new custom sampled metric packet for the provided metric definition and a specific instance.
            </summary>
            <param name="metricDefinitionPacket">The metric definition packet that defines this metric</param>
            <param name="instanceName">The unique instance name of this metric or null for the default instance.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricPacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricPacket.Equals(Gibraltar.Monitor.Serialization.CustomSampledMetricPacket)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricPacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.CustomSampledMetricSamplePacket">
            <summary>
            One raw data sample of a custom sampled metric
            </summary>
            <remarks>A metric sample packet must be explicitly logged to be recorded, although when it is logged 
            does not affect any of its data (timestamps and other information are captured during construction).</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricSamplePacket.#ctor(Gibraltar.Monitor.CustomSampledMetric,System.Double)">
            <summary>
            Create a complete custom sampled metric packet
            </summary>
            <param name="rawValue">The raw data value</param>
            <param name="metric">The metric this sample is for</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricSamplePacket.#ctor(Gibraltar.Monitor.CustomSampledMetric,System.Double,System.DateTimeOffset)">
            <summary>
            Create a complete custom sampled metric packet
            </summary>
            <param name="rawValue">The raw data value</param>
            <param name="rawTimeStamp">The exact date and time the raw value was determined</param>
            <param name="metric">The metric this sample is for</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricSamplePacket.#ctor(Gibraltar.Monitor.CustomSampledMetric,System.Double,System.Double)">
            <summary>
            Create a complete custom sampled metric packet
            </summary>
            <param name="rawValue">The raw data value</param>
            <param name="baseValue">The reference value to compare against for come counter types</param>
            <param name="metric">The metric this sample is for</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricSamplePacket.#ctor(Gibraltar.Monitor.CustomSampledMetric,System.Double,System.Double,System.DateTimeOffset)">
            <summary>
            Create a complete custom sampled metric packet
            </summary>
            <param name="rawValue">The raw data value</param>
            <param name="rawTimeStamp">The exact date and time the raw value was determined</param>
            <param name="baseValue">The reference value to compare against for come counter types</param>
            <param name="metric">The metric this sample is for</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricSamplePacket.#ctor(Gibraltar.Monitor.Session)">
            <summary>
            Create a custom sampled metric sample packet for rehydration
            </summary>
            <param name="session"></param>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.CustomSampledMetricSamplePacket.BaseValue">
            <summary>
            The base value as it was sampled
            </summary>
            <remarks>The base value is used with the raw value for certain counter types.  For example, if you want to determine
            the percentage utilization, you need to know both how much capacity was used and how much was available.  The base 
            represents how much was available and the raw value how much was used in that scenario.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricSamplePacket.CompareTo(Gibraltar.Monitor.Serialization.CustomSampledMetricSamplePacket)">
            <summary>
            Compare this custom sampled metric sample packet with another to determine if they are the same sample packet.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricSamplePacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricSamplePacket.Equals(Gibraltar.Monitor.Serialization.CustomSampledMetricSamplePacket)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricSamplePacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.CustomSampledMetricSamplePacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.EventMetricDefinitionPacket">
            <summary>
            A serializable event metric definition.  Provides metadata for metrics based on events.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricDefinitionPacket.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an event metric definition packet for the provided event metric information
            </summary>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricDefinitionPacket.#ctor(Gibraltar.Monitor.Session)">
            <summary>
            Create an event metric definition packet for rehydration
            </summary>
            <param name="session"></param>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.EventMetricDefinitionPacket.DefaultValueName">
            <summary>
            The default value to display for this event metric.  Typically this should be a trendable value.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricDefinitionPacket.CompareTo(Gibraltar.Monitor.Serialization.EventMetricDefinitionPacket)">
            <summary>
            Compare this event metric definition packet with another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricDefinitionPacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricDefinitionPacket.Equals(Gibraltar.Monitor.Serialization.EventMetricDefinitionPacket)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricDefinitionPacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.EventMetricDefinitionPacket.MetricValues">
            <summary>
            The collection of value definitions for this event metric
            </summary>
            <remarks>This is really a hack to allow the packet writer deep in the bowels of the system
            to find the metric value definitions to write out.  We really need to refactor the model to get 
            rid of this much coupling.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricDefinitionPacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.EventMetricPacket">
            <summary>
            The serializeable representation of a custom sampled metric
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricPacket.#ctor(Gibraltar.Monitor.Serialization.EventMetricDefinitionPacket,System.String)">
            <summary>
            Create a new event metric packet for the provided metric definition and a specific instance.
            </summary>
            <param name="metricDefinitionPacket">The metric definition packet that defines this metric</param>
            <param name="instanceName">The unique instance name of this metric or null for the default instance.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricPacket.#ctor(Gibraltar.Monitor.Session)">
            <summary>
            Create a new event metric packet for rehydration
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricPacket.CompareTo(Gibraltar.Monitor.Serialization.EventMetricPacket)">
            <summary>
            Compare this event metric packet to another to determine sort order
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricPacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricPacket.Equals(Gibraltar.Monitor.Serialization.EventMetricPacket)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricPacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricPacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.EventMetricSamplePacket">
            <summary>
            One raw data sample of an event metric
            </summary>
            <remarks>A metric sample packet must be explicitly logged to be recorded, although when it is logged 
            does not affect any of its data (timestamps and other information are captured during construction).</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricSamplePacket.#ctor(Gibraltar.Monitor.EventMetric)">
            <summary>
            Create an event metric sample packet for live data collection
            </summary>
            <param name="metric">The metric this sample is for</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricSamplePacket.#ctor(Gibraltar.Monitor.Session)">
            <summary>
            Create an event metric sample packet for rehydration
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricSamplePacket.CompareTo(Gibraltar.Monitor.Serialization.EventMetricSamplePacket)">
            <summary>
            Compare this object to another to determine sort order
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricSamplePacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricSamplePacket.Equals(Gibraltar.Monitor.Serialization.EventMetricSamplePacket)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricSamplePacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.EventMetricSamplePacket.Values">
            <summary>
            The values related to this event metric sample.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricSamplePacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.EventMetricSamplePacket.DynamicTypeName">
            <summary>
            The type name to use for the dynamic packet storing this sample.
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket">
            <summary>
            A serializable event value definition.  Provides metadata for one value associated with an event
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket.#ctor(Gibraltar.Monitor.Serialization.EventMetricDefinitionPacket,System.String,System.Type)">
            <summary>
            Creates an event metric definition packet for the provided event metric information
            </summary>
            <param name="definition">The event metric definition for this value.</param>
            <param name="name">The unique name of this event value within the definition.</param>
            <param name="type">The simple type of the data being stored in this value.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket.#ctor(Gibraltar.Monitor.Serialization.EventMetricDefinitionPacket,System.String,System.Type,System.String,System.String)">
            <summary>
            Creates an event metric definition packet for the provided event metric information
            </summary>
            <param name="definition">The event metric definition for this value.</param>
            <param name="name">The unique name of this event value within the definition.</param>
            <param name="type">The simple type of the data being stored in this value.</param>
            <param name="caption">The end-user display caption for this value</param>
            <param name="description">The end-user description for this value.</param>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket.DefaultTrend">
            <summary>
            The default way that individual samples will be aggregated to create a graphable trend.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket.Name">
            <summary>
            The unique name for this value within the event definition.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket.Caption">
            <summary>
            The end-user display caption for this value.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket.Description">
            <summary>
            The end-user description for this value.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket.Type">
            <summary>
            The original type of all data recorded for this value.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket.SerializedType">
            <summary>
            The simple type of all data recorded for this value.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket.UnitCaption">
            <summary>
            The units of measure for the data captured with this value (if numeric)
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket.Equals(Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket.DefinitionId">
            <summary>
            The unique Id of the definition of this event value.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.EventMetricValueDefinitionPacket.SetType(System.Type)">
            <summary>
            Translate provided type to the effective serializable type
            </summary>
            <param name="originalType"></param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.ExceptionInfoPacket.FixData">
            <summary>
            Lock in data, optimizing it for storage and memory representation.
            </summary>
            <remarks>Should be called after the client has configured the data in the packet and on a background thread
            to avoid blocking the client.  This does not set the packet as read only, it can still be changed.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.ExceptionInfoPacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.ExceptionInfoPacket.Equals(Gibraltar.Monitor.Serialization.ExceptionInfoPacket)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.ExceptionInfoPacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.GibraltarCachedPacket.Sequence">
            <summary>
            The increasing sequence number of all packets for this session to be used as an absolute order sort.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.GibraltarCachedPacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.GibraltarCachedPacket.Equals(Gibraltar.Monitor.Serialization.GibraltarCachedPacket)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.GibraltarCachedPacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.GibraltarCachedPacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.GibraltarPacket.Sequence">
            <summary>
            The increasing sequence number of all packets for this session to be used as an absolute order sort.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.GibraltarPacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.GibraltarPacket.Equals(Gibraltar.Monitor.Serialization.GibraltarPacket)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.GibraltarPacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.GibraltarPacket.FixData">
            <summary>
            Lock in data, optimizing it for storage and memory representation.
            </summary>
            <remarks>Should be called after the client has configured the data in the packet and on a background thread
            to avoid blocking the client.  This does not set the packet as read only, it can still be changed.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.GibraltarPacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.GLFWriter.#ctor(System.IO.Stream,Gibraltar.Monitor.SessionSummary)">
            <summary>
            Initialize the GLF writer for the provided session which has already been recorded.
            </summary>
            <param name="file">The file stream to write the session file into (should be empty)</param>
            <param name="sessionSummary"></param>
            <remarks>This constructor is designed for use with sessions that have already been completed and closed.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.GLFWriter.#ctor(System.IO.Stream,Gibraltar.Monitor.SessionSummary,System.Int32,System.Int32)">
            <summary>
            Initialize the GLF writer for the provided session which has already been recorded.
            </summary>
            <param name="file">The file stream to write the session file into (should be empty)</param>
            <param name="sessionSummary"></param>
            <param name="majorVersion">Major version of the serialization protocol</param>
            <param name="minorVersion">Minor version of the serialization protocol</param>
            <remarks>This constructor is designed for use with sessions that have already been completed and closed.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.GLFWriter.#ctor(System.IO.Stream,Gibraltar.Monitor.SessionSummary,System.Int32,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initialize the GLF writer for storing information about the current live session
            </summary>
            <param name="file">The file stream to write the session file into (should be empty)</param>
            <param name="sessionSummary"></param>
            <param name="fileSequence"></param>
            <param name="fileStartTime">Used during initial collection to indicate the real time this file became the active file.</param>
            <remarks>The file header is configured with a copy of the session summary, assuming that we're about to make a copy of the
            session. For live data collection the caller should supply the file start time to reflect the true time period
            covered by this file. </remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.GLFWriter.#ctor(System.IO.Stream,Gibraltar.Monitor.SessionSummary,System.Int32,System.Nullable{System.DateTimeOffset},System.Int32,System.Int32)">
            <summary>
            Initialize the GLF writer for storing information about the current live session
            </summary>
            <param name="file">The file stream to write the session file into (should be empty)</param>
            <param name="sessionSummary"></param>
            <param name="fileSequence"></param>
            <param name="fileStartTime">Used during initial collection to indicate the real time this file became the active file.</param>
            <param name="majorVersion">Major version of the serialization protocol</param>
            <param name="minorVersion">Minor version of the serialization protocol</param>
            <remarks>The file header is configured with a copy of the session summary, assuming that we're about to make a copy of the
            session. For live data collection the caller should supply the file start time to reflect the true time period
            covered by this file. </remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.GLFWriter.UpdateSessionHeader(Gibraltar.Data.GLFReader,System.IO.Stream)">
            <summary>
            Update the session file with the latest session summary information.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.GLFWriter.UpdateSessionHeader">
            <summary>
            Update the session file with the latest session summary information.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.GLFWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.GLFWriter.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.
            </summary>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.IDataObject">
            <summary>
            Implemented by any extensible data object to connect to its unique Id which it shares with its extension object.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.IDataObject.Id">
            <summary>
            The unique Id of the data object which it shares with its extension object.
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.IDisplayable">
            <summary>
            A standard interface for ensuring an item can be displayed in user interfaces by providing an end user short caption and long description
            </summary>
            <remarks>Captions should be as short as feasible, typically less than 80 characters.  Descriptions can be considerably longer, but neither should
            have embedded formatting outside of normal carriage return and line feed.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.IDisplayable.Caption">
            <summary>
            A short end-user display caption 
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.IDisplayable.Description">
            <summary>
            An extended description without formatting.
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.IPacketObjectFactory`2">
            <summary>
            Implement to support derived object creation from serialized packets
            </summary>
            <remarks>
            Some objects, such as metrics, have abstract base classes that need to be derived from to create useful
            features.  To support third party developers deriving new objects, this interface is used to allow a
            raw persistable packet to specify the correct derived type of its associated data object.
            </remarks>
            <typeparam name="DataObjectType">The base object</typeparam>
            <typeparam name="ParentObjectType">The base type of object that collects this base object</typeparam>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.IPacketObjectFactory`2.GetDataObject(`1)">
            <summary>
            Called to create the wrapping data object for a packet object.
            </summary>
            <remarks>
            For collected objects, the parent collection owner is provided in the optional parent section.  Review
            specific usage documentation to know which format of this interface to implement for a given base data object.
            For example, when overriding MetricPacket you will have to implement one form, for MetricSamplePacket a different one.</remarks>
            <param name="optionalParent">The object that will own the newly created data object</param>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.ISessionPacketCache">
            <summary>
            Provides lookup services for packet factories to find other session-related packets
            </summary>
            <remarks>Implemented by the session object and the network viewer client</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.ISessionPacketCache.Threads">
            <summary>
            The set of threads in the current session
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.ISessionPacketCache.Users">
            <summary>
            The set of application users for the current session.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.LogMessageEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.LogMessageEnumerator.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.
            </summary>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.LogMessagePacket.UserPacket">
            <summary>
            Optional.  Extended user information related to this message
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.LogMessagePacket.Principal">
            <summary>
            Optional.  The raw user principal, used for deferred user lookup
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.LogMessagePacket.ThreadInfoPacket">
            <summary>
            The thread info packet for our Thread Id. Must be set for the packet to be written to a stream.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.LogMessagePacket.Loupe#Extensibility#Data#ILogMessage#Session">
            <summary>
            The session this log message refers to
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.LogMessagePacket.HasThreadInfo">
            <summary>
            Indicates if the log message has related thread information.  If false, some calls to thread information may throw exceptions.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.LogMessagePacket.TimestampDateTime">
            <summary>
             Provide TimeStamp as DateTime for GLV (SourceGrid doesn't do DateTimeOffset)
            </summary>
            <remarks>Added for GLV support</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.LogMessagePacket.Message">
            <summary>A combined caption &amp; description</summary>
            <remarks>Added for GLV support</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.LogMessagePacket.ThreadName">
            <summary>
            A display name for the thread, returning the thread Id if no name is available.
            </summary>
            <remarks>Added for GLV support</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.LogMessagePacket.MethodFullName">
            <summary>
            A display string for the full class and method if available, otherwise an empty string.
            </summary>
            <remarks>Added for GLV support</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.LogMessagePacket.SourceCodeLocation">
            <summary>
            A display string for the full file name and line number if available, otherwise an empty string.
            </summary>
            <remarks>Added for GLV support</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.LogMessagePacket.SetException(System.Exception)">
            <summary>
            Captures the provided exception immediately.
            </summary>
            <param name="newException"></param>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.LogMessagePacket.HasException">
            <summary>
            Whether or not this log message includes attached Exception information.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.LogMessagePacket.HasMethodInfo">
            <summary>
            Indicates if the class name and method name are available.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.LogMessagePacket.HasSourceLocation">
            <summary>
            Indicates if the file name and line number are available.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.LogMessagePacket.ExceptionsList(Loupe.Extensibility.Data.IExceptionInfo)">
            <summary>
            Normalize the exception pointers to a single list.
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.LogMessagePacket.Caption">
            <summary>
            A single line caption
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.LogMessagePacket.Description">
            <summary>
            A multi line description
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.LogMessagePacket.Details">
            <summary>
            XML details for this log message
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.LogMessagePacket.SuppressNotification">
            <summary>
            True if the message was issued from a Notifier thread which needs to suppress notification about this message.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.LogMessagePacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.LogMessagePacket.Equals(Gibraltar.Monitor.Serialization.LogMessagePacket)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.LogMessagePacket.Equals(Loupe.Extensibility.Data.ILogMessage)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.LogMessagePacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="F:Gibraltar.Monitor.Serialization.LogMessagePacket.SerializationVersion">
            <summary>
            The current serialization version
            </summary>
            <remarks>
            <para>Version 2: Added Description and Details string fields.</para>
            <para>Added ThreadIndex field without bumping the version because old code would simply fail to accept data
            from new code.</para>
            </remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.LogMessagePacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.LogMessagePacket.ReadFieldsFast(Gibraltar.Serialization.IFieldReader)">
            <summary>
            Optimized deserialization of a LogMessagePacket based on the current packet definition
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.LogMessagePacketFactory.CreatePacket(Gibraltar.Serialization.PacketDefinition,Gibraltar.Serialization.IFieldReader)">
            <summary>
            This is the method that is invoked on an IPacketFactory to create an IPacket
            from the data in an IFieldReader given a specified PacketDefinition.
            </summary>
            <param name="definition">Definition of the fields expected in the next packet</param>
            <param name="reader">Data stream to be read</param>
            <returns>An IPacket corresponding to the PacketDefinition and the stream data</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.LogMessagePacketFactory.Register(Gibraltar.Serialization.IPacketReader)">
            <summary>
            Register the packet factory with the packet reader for all packet types it supports
            </summary>
            <param name="packetReader"></param>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.MetricDefinitionPacket">
            <summary>
            Defines a metric that has been captured.  Specific metrics extend this class.
            Each time a metric is captured, a MetricSample is recorded.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.DefaultInterval">
            <summary>
            A global default sampling interval for display if no-one attempts to override it
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.#ctor(System.String,System.String,System.String,Loupe.Extensibility.Data.SampleType,System.String)">
            <summary>
            Create a new metric definition packet.
            </summary>
            <remarks>At any one time there should only be one metric definition with a given combination of 
            metric type, category, and counter name.  These values together are used to correlate metrics
            between sessions.</remarks>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="sampleType">The type of data sampling done for this metric.</param>
            <param name="description">A description of what is tracked by this metric, suitable for end-user display.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.#ctor(System.String,System.String,System.String,Loupe.Extensibility.Data.SampleType)">
            <summary>
            Create a new metric definition packet.
            </summary>
            <remarks>At any one time there should only be one metric definition with a given combination of 
            metric type, category, and counter name.  These values together are used to correlate metrics
            between sessions.</remarks>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="sampleType">The type of data sampling done for this metric.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.#ctor(Gibraltar.Monitor.Session)">
            <summary>
            Create an event metric definition packet for rehydration
            </summary>
            <param name="session"></param>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.Name">
            <summary>
            The name of the metric definition being captured.  
            </summary>
            <remarks>The name is for comparing the same definition in different sessions. They will have the same name but 
            not the same Id.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.Caption">
            <summary>
            A short display string for this metric definition, suitable for end-user display.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.Description">
            <summary>
            A description of what is tracked by this metric, suitable for end-user display.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.Interval">
            <summary>
            The recommended default display interval for graphing. 
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.MetricTypeName">
            <summary>
            The internal metric type of this metric definition
            </summary>
            <remarks>Metric types distinguish different metric capture libraries from each other, ensuring
            that we can correctly correlate the same metric between sessions and not require category names 
            to be globally unique.  If you are creating a new metric, pick your own metric type that will
            uniquely idenify your library or namespace.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.CategoryName">
            <summary>
            The category of this metric for display purposes.  Category is the top displayed hierarchy.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.CounterName">
            <summary>
            The display name of this metric (unique within the category name).
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.Persisted">
            <summary>
            Indicates whether the metric packet has been written to the log stream yet.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.IsReadOnly">
            <summary>
            Indicates if the definition (and all metrics associated with it) are read-only or can be read/write.
            </summary>
            <remarks>If a metric definition is read-only, all metrics associated with it are read-only, however it's possible for some child
            objects to be read-only even if a definition is not.  When read only, no new metrics can be added however display values can be changed.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.IsLive">
            <summary>
            Indicates if the definition is part of the current live metric definitino collection
            </summary>
            <remarks>The same process can be recording metrics and reading metrics from a data source such as a file.  This flag indiciates
            whether this metric definition is for playback purposes (it represents previously recorded data) or is part of the active
            metric capture capability of the current process.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.SampleType">
            <summary>
            The sample type of the metric.  Indicates whether the metric represents discrete events or a continuous value.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.CompareTo(Gibraltar.Monitor.Serialization.MetricDefinitionPacket)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">The object to compare this object with.</param>
            <returns>Zero if the objects are equal, less than zero if this object is less than the other, more than zero if this object is more than the other.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.Equals(Gibraltar.Monitor.Serialization.MetricDefinitionPacket)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricDefinitionPacket.Session">
            <summary>
            The current session, only available for rehydrated packets
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricDefinitionPacketFactory.Register(Gibraltar.Serialization.IPacketReader)">
            <summary>
            Register the packet factory with the packet reader for all packet types it supports
            </summary>
            <param name="packetReader"></param>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.MetricPacket">
            <summary>
            Defines a metric that has been captured.  Specific metrics extend this class.
            Each time a metric is captured, a MetricSample is recorded.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricPacket.#ctor(Gibraltar.Monitor.Serialization.MetricDefinitionPacket,System.String)">
            <summary>
            Create a new metric packet with the specified unique name.
            </summary>
            <remarks>At any one time there should only be one metric with a given name.  
            This name is used to correlate metrics between sessions.</remarks>
            <param name="metricDefinitionPacket">The metric definition to create a metric instance for.</param>
            <param name="instanceName">The name of the metric instance, or an empty string ("") to create a default instance.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricPacket.#ctor(Gibraltar.Monitor.Session)">
            <summary>
            Create a new metric packet to be rehydrated by packet reader
            </summary>
            <param name="session">The session to look up the metric definition in</param>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricPacket.DefinitionId">
            <summary>
            The unique Id of the metric definition.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricPacket.Name">
            <summary>
            The name of the metric being captured.  
            </summary>
            <remarks>The name is for comparing the same metric in different sessions. They will have the same name but 
            not the same Id.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricPacket.Caption">
            <summary>
            A short display string for this metric packet.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricPacket.Description">
            <summary>
            The metric definition's description.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricPacket.InstanceName">
            <summary>
            The metric instance name (unique within the counter name).
            May be null or empty if no instance name is required.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricPacket.Persisted">
            <summary>
            Indicates whether the metric packet has been written to the log stream yet.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricPacket.CompareTo(Gibraltar.Monitor.Serialization.MetricPacket)">
            <summary>
            Compare this object to another to determine sort order
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricPacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricPacket.Equals(Gibraltar.Monitor.Serialization.MetricPacket)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricPacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricPacket.DefinitionPacket">
            <summary>
            The current metric definition packet.  Setting to null is not allowed.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricPacket.Session">
            <summary>
            The current session, only available for rehydrated packets
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricPacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.MetricPacketDictionary">
            <summary>
            A collection of performance counter metric packets, keyed by their unique ID.  This is the persistable form of a performance counter metric.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricPacketDictionary.Add(Gibraltar.Monitor.Serialization.MetricPacket)">
            <summary>
            Add an existing metric packet object to our collection.  It must be for the same analysis as this collection.
            </summary>
            <param name="newMetricPacket">The new metric object to add.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricPacketDictionary.ContainsKey(System.Guid)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricPacketDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key">The performance counter key to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricPacketDictionary.TryGetValue(System.Guid,Gibraltar.Monitor.Serialization.MetricPacket@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricPacketDictionary.TryGetValue(System.String,Gibraltar.Monitor.Serialization.MetricPacket@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The performance counter key to locate in the collection</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricPacketDictionary.Item(System.Int32)">
            <summary>
            Retrieve performance counter metric packet object by numeric index in collection. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricPacketDictionary.Item(System.String)">
            <summary>
            Retrieve metric packet object by its name
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricPacketDictionary.Item(System.Guid)">
            <summary>
            Retrieve performance counter metric packet object by its Id
            </summary>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricPacketDictionary.Remove(Gibraltar.Monitor.Serialization.MetricPacket)">
            <summary>
            Remove the specified victim comment.  If the comment isn't in the collection, no exception is thrown.
            </summary>
            <param name="victim">The object to remove.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricPacketFactory.Register(Gibraltar.Serialization.IPacketReader)">
            <summary>
            Register the packet factory with the packet reader for all packet types it supports
            </summary>
            <param name="packetReader"></param>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.MetricSamplePacket">
            <summary>
            Base object for all metric sample packets
            </summary>
            <remarks>A metric sample packet is the persistable form of a single metric sample.
            This is the base class; inherit from either SampledMetricSamplePacket for a sampled metric or EventMetricSamplePacket for an event metric, or
            a further downstream object as appropriate.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricSamplePacket.#ctor(Gibraltar.Monitor.Metric)">
            <summary>
            Create a new metric sample for the provided metric.
            </summary>
            <param name="metric">The metric this sample applies to</param>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricSamplePacket.ID">
            <summary>
            The globally unique Id if this metric sample packet.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricSamplePacket.Caption">
            <summary>
            The display caption of the metric this sample is for.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricSamplePacket.Description">
            <summary>
            The description of the metric this sample is for.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricSamplePacket.UserPacket">
            <summary>
            Optional.  Extended user information related to this message
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricSamplePacket.Principal">
            <summary>
            Optional.  The raw user principal, used for deferred user lookup
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricSamplePacket.MetricId">
            <summary>
            The unique Id of the metric we are associated with.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricSamplePacket.MetricPacket">
            <summary>
            The performance counter metric packet this sample is for.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricSamplePacket.Persisted">
            <summary>
            Indicates whether the metric packet has been written to the log stream yet.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricSamplePacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricSamplePacket.Equals(Gibraltar.Monitor.Serialization.MetricSamplePacket)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricSamplePacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.MetricSamplePacket.Session">
            <summary>
            The current session, only available for rehydrated packets
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricSamplePacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricSamplePacketFactory.Register(Gibraltar.Serialization.IPacketReader)">
            <summary>
            Register the packet factory with the packet reader for all packet types it supports
            </summary>
            <param name="packetReader"></param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.MetricSamplePacketFactory.CreatePacket(Gibraltar.Serialization.PacketDefinition,Gibraltar.Serialization.IFieldReader)">
            <summary>
            This is the method that is invoked on an IPacketFactory to create an IPacket
            from the data in an IFieldReader given a specified PacketDefinition.
            </summary>
            <param name="definition">Definition of the fields expected in the next packet</param>
            <param name="reader">Data stream to be read</param>
            <returns>An IPacket corresponding to the PacketDefinition and the stream data</returns>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.SampledMetricDefinitionPacket">
            <summary>
            A serializable sampled metric definition.  Provides metadata for metrics based on sampled values.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricDefinitionPacket.#ctor(System.String,System.String,System.String)">
            <summary>
            Base implementation for creating a sampled metric definition packet
            </summary>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricDefinitionPacket.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Base implementation for creating a sampled metric definition packet
            </summary>
            <param name="metricTypeName">The unique metric type</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="unitCaption">The display caption for the calculated values captured under this metric.</param>
            <param name="description">A description of what is tracked by this metric, suitable for end-user display.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricDefinitionPacket.#ctor(Gibraltar.Monitor.Session)">
            <summary>
            Create a sampled metric definition packet for rehydration
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricDefinitionPacket.CompareTo(Gibraltar.Monitor.Serialization.SampledMetricDefinitionPacket)">
            <inheritdoc />
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.SampledMetricDefinitionPacket.UnitCaption">
            <summary>
            The display caption for the calculated values captured under this metric.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricDefinitionPacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricDefinitionPacket.Equals(Gibraltar.Monitor.Serialization.SampledMetricDefinitionPacket)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricDefinitionPacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricDefinitionPacket.OnUnitCaptionGenerate">
            <summary>
            Inheritors will need to implement this to calculate a unit caption when requested.
            </summary>
            <returns>The caption to display for the units of value.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricDefinitionPacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.SampledMetricPacket">
            <summary>
            A serializable sampled metric definition.  Provides metadata for metrics based on sampled values.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricPacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricPacket.Equals(Gibraltar.Monitor.Serialization.SampledMetricPacket)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricPacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.SampledMetricSamplePacket">
            <summary>
            The base class for a single sampled metric data sample.
            </summary>
            <remarks>A sampled metric sample packet must be explicitly logged to be recorded, although when it is logged 
            does not affect any of its data (timestamps and other information are captured during construction).  
            This is a base class and can not be used directly.  Instead, one of its inheritors will be used depending on
            the particular metric type being logged.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricSamplePacket.#ctor(Gibraltar.Monitor.SampledMetric)">
            <summary>
            Create an incomplete sampled metric with just the metric packet
            </summary>
            <remarks>Before the sampled metric packet is valid, a raw value, counter time stamp, and counter type will need to be supplied.</remarks>
            <param name="metric">The metric this sample is for</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricSamplePacket.#ctor(Gibraltar.Monitor.SampledMetric,System.Double)">
            <summary>
            Create a complete sampled metric packet
            </summary>
            <para>Metrics using a sample type of AverageFraction and DeltaFraction should not use this method because
            they require a base value as well as a raw value.</para>
            <param name="rawValue">The raw data value</param>
            <param name="metric">The metric this sample is for</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricSamplePacket.#ctor(Gibraltar.Monitor.SampledMetric,System.Double,System.DateTimeOffset)">
            <summary>
            Create a complete sampled metric packet
            </summary>
            <para>Metrics using a sample type of AverageFraction and DeltaFraction should not use this method because
            they require a base value as well as a raw value.</para>
            <param name="rawValue">The raw data value</param>
            <param name="rawTimeStamp">The exact date and time the raw value was determined</param>
            <param name="metric">The metric this sample is for</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricSamplePacket.#ctor(Gibraltar.Monitor.Session)">
            <summary>
            Create a new sampled metric sample packet for rehydration
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricSamplePacket.CompareTo(Gibraltar.Monitor.Serialization.SampledMetricSamplePacket)">
            <summary>
            Compares this sampled metric packet with another.  See general CompareTo documentation for specifics.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricSamplePacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricSamplePacket.Equals(Gibraltar.Monitor.Serialization.SampledMetricSamplePacket)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricSamplePacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.SampledMetricSamplePacket.RawTimestamp">
            <summary>
            The exact date and time the raw value was determined.
            </summary>
            <remarks>When doing some calculations it is essential to know when the raw value became
            the new value so a difference between it and a subsequent value is given the proper duration.  
            For example, if you want to know bytes per second you need to know exactly when the underlying
            bytes metric was determined, which may not be when it was recorded to the log file.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.SampledMetricSamplePacket.RawValue">
            <summary>
            The raw value as it was sampled
            </summary>
            <remarks>The raw value generally can't be used directly but instead must be processed by comparing
            the raw values of two different samples and their time difference to determine the effective sampled metric value.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SampledMetricSamplePacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.SessionClosePacket">
            <summary>
            Marks the ending status of a session.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionClosePacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionClosePacket.Equals(Gibraltar.Monitor.Serialization.SessionClosePacket)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionClosePacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="F:Gibraltar.Monitor.Serialization.SessionClosePacket.SerializationVersion">
            <summary>
            The current serialization version
            </summary>
            <remarks>
            <para>Version 1: Added Id and EndingStatus field to previously empty packet.</para>
            </remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionClosePacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionFragmentPacket.#ctor(System.Guid)">
            <summary>
            Create a new session file packet for the provided FileID.
            </summary>
            <param name="m_FileID"></param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionFragmentPacket.#ctor">
            <summary>
            Used during rehydration
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionFragmentPacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionFragmentPacket.Equals(Gibraltar.Monitor.Serialization.SessionFragmentPacket)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionFragmentPacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionFragmentPacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionFragmentPacket.Gibraltar#Serialization#IPacket#GetPacketDefinition">
            <summary>
            Get a new, populated definition for this packet.
            </summary>
            <returns>A new Packet Definition object</returns>
            <remarks>Once a definition is cached by the packet writer it won't be requested again.
            Packet Definitions must be invariant for an entire data stream.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionFragmentPacket.Gibraltar#Serialization#IPacket#WriteFields(Gibraltar.Serialization.PacketDefinition,Gibraltar.Serialization.SerializedPacket)">
            <summary>
            Write out all of the fields for the current packet
            </summary>
            <param name="definition">The definition that was used to perisist the packet.</param>
            <param name="packet">The serialized packet to populate with data</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionFragmentPacket.Gibraltar#Serialization#IPacket#ReadFields(Gibraltar.Serialization.PacketDefinition,Gibraltar.Serialization.SerializedPacket)">
            <summary>
            Read back the field values for the current packet.
            </summary>
            <param name="definition">The definition that was used to perisist the packet.</param>
            <param name="packet">The serialized packet to read data from</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionPacketFactory.CreatePacket(Gibraltar.Serialization.PacketDefinition,Gibraltar.Serialization.IFieldReader)">
            <summary>
            This is the method that is invoked on an IPacketFactory to create an IPacket
            from the data in an IFieldReader given a specified PacketDefinition.
            </summary>
            <param name="definition">Definition of the fields expected in the next packet</param>
            <param name="reader">Data stream to be read</param>
            <returns>An IPacket corresponding to the PacketDefinition and the stream data</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionPacketFactory.Register(Gibraltar.Serialization.IPacketReader)">
            <summary>
            Register the packet factory with the packet reader for all packet types it supports
            </summary>
            <param name="packetReader"></param>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.SessionSummaryCollection">
            <summary>
            The session summary collection implementation for the local collection repository
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryCollection.#ctor(Loupe.Extensibility.IRepository)">
            <summary>
            Create an empty session summary collection
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryCollection.#ctor(Loupe.Extensibility.IRepository,System.Collections.Generic.IList{Loupe.Extensibility.Data.ISessionSummary})">
            <summary>
            Create a new collection by loading the provided summaries.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryCollection.Add(Loupe.Extensibility.Data.ISessionSummary)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. 
                            </exception>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryCollection.Contains(System.Guid)">
            <summary>
            Indicates if the collection contains the key
            </summary>
            <param name="key"></param>
            <returns>True if a session summary with the key exists in the collection, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryCollection.Contains(Loupe.Extensibility.Data.ISessionSummary)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryCollection.CopyTo(Loupe.Extensibility.Data.ISessionSummary[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
                            </param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.
                            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.
                            </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
                                -or-
                            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
                                -or-
                                The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
                            </exception>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryCollection.Remove(Loupe.Extensibility.Data.ISessionSummary)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.SessionSummaryCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.SessionSummaryCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryCollection.Find(System.Predicate{Loupe.Extensibility.Data.ISessionSummary})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire List.</summary>
            <param name="match">The <see cref="T:System.Predicate`1">Predicate</see> delegate that defines the conditions of the elements to search for.</param>
            <remarks>
            The <see cref="T:System.Predicate`1">Predicate</see> is a delegate to a method that returns true if the object passed to it matches the
            conditions defined in the delegate. The elements of the current List are individually passed to the <see cref="T:System.Predicate`1">Predicate</see> delegate, moving forward in the List, starting with the first element and ending with the last element. Processing is
            stopped when a match is found.
            </remarks>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, null.</returns>
            <exception caption="Argument Null Exception" cref="T:System.ArgumentNullException">match is a null reference (Nothing in Visual Basic)</exception>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryCollection.FindAll(System.Predicate{Loupe.Extensibility.Data.ISessionSummary})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1">Predicate</see> delegate that defines the conditions of the elements to search for.</param>
            <remarks>
            The <see cref="T:System.Predicate`1">Predicate</see> is a delegate to a method that returns true if the object passed to it matches the
            conditions defined in the delegate. The elements of the current List are individually passed to the <see cref="T:System.Predicate`1">Predicate</see> delegate, moving forward in the List, starting with the first element and ending with the last element.
            </remarks>
            <returns>A List containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty List.</returns>
            <exception caption="Argument Null Exception" cref="T:System.ArgumentNullException">match is a null reference (Nothing in Visual Basic)</exception>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryCollection.Remove(System.Guid)">
            <summary>
            Removes the first occurrence of a specified object
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryCollection.TryGetValue(System.Guid,Loupe.Extensibility.Data.ISessionSummary@)">
            <summary>
            Attempt to get the item with the specified key, returning true if it could be found
            </summary>
            <returns>True if the item could be found, false otherwise</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryCollection.IndexOf(Loupe.Extensibility.Data.ISessionSummary)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryCollection.Insert(System.Int32,Loupe.Extensibility.Data.ISessionSummary)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.
                            </param><param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
                            </exception>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.SessionSummaryCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
                            </exception>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.SessionSummaryCollection.Item(System.Guid)">
            <summary>
            get the item with the specified key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryPacket.#ctor(Gibraltar.Data.SessionHeader)">
            <summary>
            Create a session summary packet from the provided session header
            </summary>
            <param name="sessionHeader"></param>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.SessionSummaryPacket.ComputerId">
            <summary>
            The unique Id of the local computer.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.SessionSummaryPacket.ApplicationVersion">
            <summary>
            The version of the application that recorded the session
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.SessionSummaryPacket.FullyQualifiedUserName">
            <summary>
            The fully qualified user name of the user the application was run as.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Serialization.SessionSummaryPacket.Properties">
            <summary>
            Application provided properties 
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryPacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryPacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryPacket.Equals(Gibraltar.Monitor.Serialization.SessionSummaryPacket)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryPacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.SessionSummaryPacket.SetSafeStringValue(System.String,System.Int32)">
            <summary>
            Eliminates nulls and ensures that the string value isn't too long.
            </summary>
            <param name="value"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Monitor.Serialization.TextParse">
            <summary>
            String parsing utility methods.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.TextParse.CategoryName(System.String)">
            <summary>
            Splits a dot-delimited category name, removing blank entries as well as - and _ characters
            </summary>
            <param name="categoryName"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.TextParse.ClassName(System.String)">
            <summary>
            Splits a dot-delimited class name
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.TextParse.SplitStringWithTrim(System.String,System.Char[])">
            <summary>
            Splits a dot-delimited string trimming each entry and eliminating empty entries.
            </summary>
            <param name="source"></param>
            <param name="additionalIgnoreCharacters"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.ThreadInfoPacket.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.ThreadInfoPacket.Equals(Gibraltar.Monitor.Serialization.ThreadInfoPacket)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.ThreadInfoPacket.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            an int representing the hash code calculated for the contents of this object
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.Serialization.ThreadInfoPacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.Session">
            <summary>
            Contains the log information for a single execution cycle
            </summary>
            <remarks>A session contains all of the thread, event, and metric information captured when it originally was executing
            and can be extended with analysis information including comments and markers.</remarks>
        </member>
        <member name="F:Gibraltar.Monitor.Session.LogCategory">
            <summary>
            The log category
            </summary>
        </member>
        <member name="E:Gibraltar.Monitor.Session.PropertyChanged">
            <summary>
            Occurs when a property value changes. 
            </summary>
            <remarks>The PropertyChanged event can indicate all properties on the object have changed by using a null reference or String.Empty as the property name.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Session.#ctor(Gibraltar.Data.GLFReader)">
            <summary>
            Create a new session by reading the specified packet stream
            </summary>
            <param name="dataReader">The data stream reader to load as all or part of a session</param>
        </member>
        <member name="M:Gibraltar.Monitor.Session.SendPropertyChanged(System.String)">
            <summary>
            Notify our subscribers that a property has changed and mark that we're dirty.
            </summary>
            <param name="propertyName">The property that changed</param>
        </member>
        <member name="M:Gibraltar.Monitor.Session.IntegrateHeader(Gibraltar.Data.SessionHeader)">
            <summary>
            Integrate the provided session header into the session
            </summary>
            <param name="newHeader"></param>
        </member>
        <member name="M:Gibraltar.Monitor.Session.EnsureDataLoaded">
            <summary>
            Load any session files into the session that haven't already been loaded.
            </summary>
            <remarks>If all files are loaded this method returns immediately.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.Session.DefaultCaption(Gibraltar.Monitor.SessionSummary)">
            <summary>
            Generates a reasonable default caption for the provided session that has no caption
            </summary>
            <param name="sessionSummary">The session summary object to generate a default caption for</param>
            <returns>The default caption</returns>
        </member>
        <member name="P:Gibraltar.Monitor.Session.FileStorageSummary">
            <summary>
            The file storage summary tracking information for this session.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Session.AddPacketStream(Gibraltar.Data.GLFReader)">
            <summary>
            Add the provided GLF stream (could be for an entire session or a session fragment) to the list of streams to be loaded.
            </summary>
            <param name="glfReader">The GLFReader which owns the stream to be added.</param>
        </member>
        <member name="P:Gibraltar.Monitor.Session.UnloadedStreamLength">
            <summary>
            The number of bytes of unloaded stream data.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Session.MetricDefinitions">
            <summary>
            The set of all metrics tracked in this session.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Session.Write(System.IO.Stream)">
            <summary>
            Write our data to the specified stream.  This does not directly clear the dirty or new flags
            because the object can't confirm that the stream was persisted.
            </summary>
            <param name="stream">The writable stream to persist to</param>
        </member>
        <member name="M:Gibraltar.Monitor.Session.Write(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Write our data to the specified stream.  This does not directly clear the dirty or new flags
            because the object can't confirm that the stream was persisted.
            </summary>
            <param name="stream">The writable stream to persist to</param>
            <param name="majorVersion">Major version of the serialization protocol</param>
            <param name="minorVersion">Minor version of the serialization protocol</param>
        </member>
        <member name="P:Gibraltar.Monitor.Session.Properties">
            <summary>
            Session properties from the session start process.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Session.Fragments">
            <summary>
            The collection of data files that were recorded for this session.
            </summary>
            <remarks>There may be many files for a single session.  Each file has a unique ID
            and can only be loaded once.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Session.Threads">
            <summary>
            The list of threads associated with this session.  Threads are sorted by their unique thread Id.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Session.Users">
            <summary>
            The list of users associated with this application.  
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Session.Gibraltar#Monitor#Serialization#ISessionPacketCache#Threads">
            <summary>
            The list of threads associated with this session.  Threads are sorted by their unique thread Id.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Session.Gibraltar#Monitor#Serialization#ISessionPacketCache#Users">
            <summary>
            The list of users associated with this application.  
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Session.Messages">
            <summary>
            The list of log messages associated with this session.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Session.GetMessages">
            <summary>
            The set of log messages for this session.
            </summary>
            <returns>An enumerable of the messages</returns>
            <remarks>This method provides an enumerable that reads the session data from the data file each time it is iterated
            so it won't consume excessive memory even if the file is very large or contains very large messages.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Session.Caption">
            <summary>
            A short end-user display caption 
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Session.Description">
            <summary>
            An extended description without formatting.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Session.Summary">
            <summary>
            The summary properties for this session.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Session.Id">
            <summary>
            A constant, unique identifier for this session.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Session.IsLoaded">
            <summary>
            Indicates if the session has been loaded into memory or not.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Session.Load">
            <summary>
            Force the session to completely load into memory.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Session.Load(System.Guid[])">
            <summary>
            Force the session to load, but only the specified fragments.
            </summary>
            <param name="fragmentIds"></param>
        </member>
        <member name="P:Gibraltar.Monitor.Session.Status">
            <summary>
            The final status of the session.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Session.TopSeverity">
            <summary>
            The worst severity of the log messages in the session
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Session.MessageCount">
            <summary>
            The number of messages in the messages collection.
            </summary>
            <remarks>This value is cached for high performance and reflects all of the known messages.  If only part
            of the files for a session are loaded, the totals as of the latest file loaded are used.  This means the
            count of items may exceed the actual number of matching messages in the messages collection if earlier
            files are missing.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Session.CriticalCount">
            <summary>
            The number of critical messages in the messages collection.
            </summary>
            <remarks>This value is cached for high performance and reflects all of the known messages.  If only part
            of the files for a session are loaded, the totals as of the latest file loaded are used.  This means the
            count of items may exceed the actual number of matching messages in the messages collection if earlier
            files are missing.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Session.ErrorCount">
            <summary>
            The number of error messages in the messages collection.
            </summary>
            <remarks>This value is cached for high performance and reflects all of the known messages.  If only part
            of the files for a session are loaded, the totals as of the latest file loaded are used.  This means the
            count of items may exceed the actual number of matching messages in the messages collection if earlier
            files are missing.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Session.WarningCount">
            <summary>
            The number of error messages in the messages collection.
            </summary>
            <remarks>This value is cached for high performance and reflects all of the known messages.  If only part
            of the files for a session are loaded, the totals as of the latest file loaded are used.  This means the
            count of items may exceed the actual number of matching messages in the messages collection if earlier
            files are missing.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.Session.IsDirty">
            <summary>
            Indicates whether there are changes to this session that have not been saved.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Session.IsNew">
            <summary>
            Indicates whether a session is new to this package (has never been saved)
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Session.HasCorruptData">
            <summary>
            Indicates whether a session had errors during deserialization and has lost some packets.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Session.PacketsLostCount">
            <summary>
            Indicates how many packets were lost due to errors in deserialization.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.Session.LastSequence">
            <summary>
            The last sequence number in the session data.  Will force the session to be entirely parsed.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.Session.CompareTo(Gibraltar.Monitor.Session)">
            <summary>
            Compares this Session object to another to determine sorting order.
            </summary>
            <remarks>Session instances are sorted primarily by their StartDateTime property.</remarks>
            <param name="other">The other Session object to compare this object to.</param>
            <returns>An int which is less than zero, equal to zero, or greater than zero to reflect whether
            this Session should sort as being less-than, equal to, or greater-than the other
            Session, respectively.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Session.Equals(Gibraltar.Monitor.Session)">
            <summary>
            Determines whether the provided Session object is equal to this Session object.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">The Session object to compare with this Session object.</param>
        </member>
        <member name="M:Gibraltar.Monitor.Session.Equals(System.Object)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="obj">The object to compare this object to</param>
            <returns>True if the other object is also a Session and represents the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Session.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            An int representing the hash code calculated for the contents of this object.
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.Session.op_Equality(Gibraltar.Monitor.Session,Gibraltar.Monitor.Session)">
            <summary>
            Compares two Session instances for equality.
            </summary>
            <param name="left">The Session to the left of the operator</param>
            <param name="right">The Session to the right of the operator</param>
            <returns>True if the two Sessions are equal.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Session.op_Inequality(Gibraltar.Monitor.Session,Gibraltar.Monitor.Session)">
            <summary>
            Compares two Session instances for inequality.
            </summary>
            <param name="left">The Session to the left of the operator</param>
            <param name="right">The Session to the right of the operator</param>
            <returns>True if the two Sessions are not equal.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Session.op_LessThan(Gibraltar.Monitor.Session,Gibraltar.Monitor.Session)">
            <summary>
            Compares if one Session instance should sort less than another.
            </summary>
            <param name="left">The Session to the left of the operator</param>
            <param name="right">The Session to the right of the operator</param>
            <returns>True if the Session to the left should sort less than the Session to the right.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Session.op_GreaterThan(Gibraltar.Monitor.Session,Gibraltar.Monitor.Session)">
            <summary>
            Compares if one Session instance should sort greater than another.
            </summary>
            <param name="left">The Session to the left of the operator</param>
            <param name="right">The Session to the right of the operator</param>
            <returns>True if the Session to the left should sort greater than the Session to the right.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.Session.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.Session.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.
            </summary>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="T:Gibraltar.Monitor.SessionCollection">
            <summary>
            A collection of loaded sessions
            </summary>
            <remarks>Used to load sessions from their raw file streams</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.SessionCollection.Add(System.String)">
            <summary>
            Add a session from the specified file
            </summary>
            <param name="fileNamePath">The fully qualified file name to load.</param>
            <returns>The session object that was affected</returns>
        </member>
        <member name="M:Gibraltar.Monitor.SessionCollection.Add(System.IO.Stream)">
            <summary>
            Add a session from the provided GLF File Stream
            </summary>
            <param name="fileStream">A file stream of a GLF File to read (may always be disposed by caller upon return).</param>
            <returns>The session object that was affected</returns>
            <remarks>The stream will be copied immediately and its Position will be restored before returning, so the caller is
            responsible for eventually disposing it.  Use the other overload to pass a stream which is no longer needed by the
            caller.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.SessionCollection.Add(System.IO.Stream,System.Boolean)">
            <summary>
            Add a session from the provided GLF File stream
            </summary>
            <param name="fileStream">A file stream of a GLF File to read.</param>
            <param name="useOriginalStream">If true, the caller no longer owns the stream and must not further use or dispose
            it. If false, the method will copy the contents of the stream before returning and will restore its Position,
            so the caller is responsible for eventually disposing it.</param>
            <returns>The session object that was affected.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.SessionCollection.Add(Gibraltar.Monitor.Session)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:Gibraltar.Monitor.SessionCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
        </member>
        <member name="M:Gibraltar.Monitor.SessionCollection.Contains(Gibraltar.Monitor.Session)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Gibraltar.Monitor.SessionCollection.CopyTo(Gibraltar.Monitor.Session[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
        </member>
        <member name="M:Gibraltar.Monitor.SessionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.SessionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.SessionCollection.Remove(System.Guid)">
            <summary>
            Removes the occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            true if <paramref name="sessionId" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="sessionId" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="sessionId">They of the session to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:Gibraltar.Monitor.SessionCollection.Remove(Gibraltar.Monitor.Session)">
            <summary>
            Removes the occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="P:Gibraltar.Monitor.SessionCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Gibraltar.Monitor.SessionCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.SessionCollection.IndexOf(Gibraltar.Monitor.Session)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:Gibraltar.Monitor.SessionCollection.IndexOf(System.Guid)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <returns>
            The index of <paramref name="ID" /> if found in the list; otherwise, -1.
            </returns>
            <param name="ID">The unique ID of the session to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:Gibraltar.Monitor.SessionCollection.Insert(System.Int32,Gibraltar.Monitor.Session)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="M:Gibraltar.Monitor.SessionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="P:Gibraltar.Monitor.SessionCollection.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="P:Gibraltar.Monitor.SessionCollection.Item(System.Guid)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="ID">The name of the field to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ID" /> is not a valid name in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="M:Gibraltar.Monitor.SessionCollection.TryGetValue(System.Guid,Gibraltar.Monitor.Session@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.SessionCollection.ContainsKey(System.Guid)">
            <summary>
            Determines whether the collection contaions an element with the specified key.
            </summary>
            <param name="key">The key to locate in the collection</param>
            <returns>true if the collection contains an element iwth the key; otherwise, false.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.SessionFileInfo`1">
            <summary>
            Tracks session headers and fragments from one or more fragments
            </summary>
            <remarks>Designed to help assemble a virtual index from a set of file fragments.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFileInfo`1.#ctor(Gibraltar.Data.SessionHeader,`0,System.Boolean)">
            <summary>
            Create a new file information tracking object
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFileInfo`1.Id">
            <summary>
            The session id
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFileInfo`1.IsRunning">
            <summary>
            Indicates if the session is actually running (regardless of its session state)
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFileInfo`1.Header">
            <summary>
            The best session header from all the loaded fragments
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFileInfo`1.Fragments">
            <summary>
            The list of fragments that have been found
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFileInfo`1.AddFragment(Gibraltar.Data.SessionHeader,`0,System.Boolean)">
            <summary>
            Add another fragment to this session's information
            </summary>
            <param name="sessionHeader"></param>
            <param name="fileInfo"></param>
            <param name="isNew"></param>
        </member>
        <member name="T:Gibraltar.Monitor.SessionFragment">
            <summary>
            A single stream of the session's information as it was originally recorded.
            </summary>
            <remarks>When a session is originally recorded to a log file it may be split
            between multiple files due to the length of the session, time it was running,
            or to allow part of the session to be submitted for review while the session is 
            still running.  Once closed, a session fragment is immutable.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFragment.Id">
            <summary>
            The unique Id of this session fragment.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFragment.StartDateTime">
            <summary>
            The date &amp; time the fragment was started.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFragment.EndDateTime">
            <summary>
            The date &amp; time the fragment was closed.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFragment.IsLastFile">
            <summary>
            Indicates if this is the last fragment of the session.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFragment.MessageCount">
            <summary>
            The number of messages recorded in the entire session up through this fragment.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFragment.CriticalCount">
            <summary>
            The number of critical messages recorded in the entire session up through this fragment.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFragment.ErrorCount">
            <summary>
            The number of error messages recorded in the entire session up through this fragment.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFragment.WarningCount">
            <summary>
            The number of warning messages recorded in the entire session up through this fragment.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFragment.Size">
            <summary>
            The compressed stream size
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFragment.Loaded">
            <summary>
            Indicates if the fragment has been parsed and loaded into memory.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFragment.RawStream">
            <summary>
            The raw binary stream of the packets within the session fragment. (Generally use Reader property instead.)
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFragment.Reader">
            <summary>
            The GLFReader which owns the open stream for this fragment (could be null if not created from one).
            </summary>
        </member>
        <member name="T:Gibraltar.Monitor.SessionFragmentCollection">
            <summary>
            An ordered list of the individual fragments that were captured for the session.
            </summary>
        </member>
        <member name="E:Gibraltar.Monitor.SessionFragmentCollection.CollectionChanged">
            <summary>
            Raised every time the collection's contents are changed to allow subscribers to automatically track changes.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFragmentCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFragmentCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFragmentCollection.Add(Gibraltar.Data.GLFReader)">
            <summary>
            Add a new session file from the provided data stream.
            </summary>
            <param name="glfReader"></param>
            <returns>The session file object for the provided data stream.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFragmentCollection.Add(Gibraltar.Monitor.SessionFragment)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFragmentCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFragmentCollection.Contains(Gibraltar.Monitor.SessionFragment)">
            <summary>
            Determines whether the dictionary contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item" /> is found in the dictionary; otherwise, false.
            </returns>
            <param name="item">The object to locate in the dictionary.</param>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFragmentCollection.Contains(System.Guid)">
            <summary>
            Determines whether the dictionary contains an item with the provided key.
            </summary>
            <returns>
            true if <paramref name="fileID" /> is found in the dictionary; otherwise, false.
            </returns>
            <param name="fileID">The ID of the object to locate in the dictionary.</param>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFragmentCollection.CopyTo(Gibraltar.Monitor.SessionFragment[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array" /> is multidimensional.-or-<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type <cref name="Gibraltar.Agent.SessionFragment" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFragmentCollection.Remove(Gibraltar.Monitor.SessionFragment)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFragmentCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFragmentCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFragmentCollection.IndexOf(Gibraltar.Monitor.SessionFragment)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFragmentCollection.IndexOf(System.Guid)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" /> by its id.
            </summary>
            <returns>
            The index of the session fragment with the provided <paramref name="ID" /> if found in the list; otherwise, -1.
            </returns>
            <param name="ID">The unique ID of the session fragment to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFragmentCollection.Insert(System.Int32,Gibraltar.Monitor.SessionFragment)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFragmentCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFragmentCollection.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="P:Gibraltar.Monitor.SessionFragmentCollection.Item(System.Guid)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="ID">The name of the field to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ID" /> is not a valid name in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFragmentCollection.TryGetValue(System.Guid,Gibraltar.Monitor.SessionFragment@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFragmentCollection.OnCollectionChanged(Gibraltar.Monitor.CollectionChangedEventArgs{Gibraltar.Monitor.SessionFragmentCollection,Gibraltar.Monitor.SessionFragment})">
            <summary>
            Called whenever the collection changes.
            </summary>
            <param name="e"></param>
            <remarks>Note to inheritors:  If overriding this method, you must call the base implmenetation to ensure
            that the appropriate events are raised.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.SessionFragmentCollection.AddItem(Gibraltar.Monitor.SessionFragment)">
            <summary>
            Add a new session fragment to the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Gibraltar.Monitor.SessionSummary">
            <summary>
            Summary information about the entire session.
            </summary>
            <remarks>This information is available from sessions without loading the entire session into memory.</remarks>
        </member>
        <member name="F:Gibraltar.Monitor.SessionSummary.UnknownProduct">
            <summary>
            A default value for when the product name is unknown.
            </summary>
        </member>
        <member name="F:Gibraltar.Monitor.SessionSummary.UnknownApplication">
            <summary>
            A default value for when the application name is unknown.
            </summary>
        </member>
        <member name="E:Gibraltar.Monitor.SessionSummary.PropertyChanged">
            <summary>
            Raised whenever a property changes on the object
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.SessionSummary.#ctor(Loupe.Configuration.AgentConfiguration)">
            <summary>
            Create a new session summary as the live collection session for the current process
            </summary>
            <remarks>This constructor figures out all of the summary information when invoked, which can take a moment.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.SessionSummary.ApplyMappingOverrides(System.String,System.String,System.Version,System.String,System.String)">
            <summary>
            Overrides the native recorded product and application information with the specified values to reflect the server rules.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.SessionSummary.Loupe#Extensibility#Data#ISessionSummary#Session">
            <summary>
            Get a copy of the full session detail this session refers to.  
            </summary>
            <remarks>Session objects can be large in memory.  This method will return a new object
            each time it is called which should be released by the caller as soon as feasible to control memory usage.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Id">
            <summary>
            The unique Id of the session
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Uri">
            <summary>
            The link to this item on the server
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Loupe#Extensibility#Data#ISessionSummary#IsNew">
            <summary>
            Indicates if the session has ever been viewed or exported
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Loupe#Extensibility#Data#ISessionSummary#IsComplete">
            <summary>
            Indicates if all of the session data is stored that is expected to be available
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Loupe#Extensibility#Data#ISessionSummary#IsLive">
            <summary>
            Indicates if the session is currently running and a live stream is available.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Loupe#Extensibility#Data#ISessionSummary#HasData">
            <summary>
            Indicates if session data is available.
            </summary>
            <remarks>The session summary can be transfered separately from the session details
            and isn't subject to pruning so it may be around long before or after the detailed data is.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.ComputerId">
            <summary>
            The unique Id of the local computer.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.TimeZoneCaption">
            <summary>
            The display caption of the time zone where the session was recorded
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.StartDateTime">
            <summary>
            The date and time the session started
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.DisplayStartDateTime">
            <summary>
            The date and time the session started
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.EndDateTime">
            <summary>
            The date and time the session ended or was last confirmed running
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.DisplayEndDateTime">
            <summary>
            The date and time the session ended or was last confirmed running in the time zone the user has requested for display
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Duration">
            <summary>
            The time range between the start and end of this session, or the last message logged if the session ended unexpectedly.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Loupe#Extensibility#Data#ISessionSummary#AddedDateTime">
            <summary>
            The date and time the session was added to the repository
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Loupe#Extensibility#Data#ISessionSummary#DisplayAddedDateTime">
            <summary>
            The date and time the session was added to the repository in the time zone the user has requested for display
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Loupe#Extensibility#Data#ISessionSummary#UpdatedDateTime">
            <summary>
            The date and time the session was added to the repository
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Loupe#Extensibility#Data#ISessionSummary#DisplayUpdatedDateTime">
            <summary>
            The date and time the session header was last updated locally in the time zone the user has requested for display
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.DurationShort">
            <summary>
            The time range between the start and end of this session, or the last message logged if the session ended unexpectedly.
            Formatted as a string in HH:MM:SS format.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Caption">
            <summary>
            A display caption for the session
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Product">
            <summary>
            The product name of the application that recorded the session
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Application">
            <summary>
            The title of the application that recorded the session
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Environment">
            <summary>
            Optional.  The environment this session is running in.
            </summary>
            <remarks>Environments are useful for categorizing sessions, for example to 
            indicate the hosting environment. If a value is provided it will be 
            carried with the session data to upstream servers and clients.  If the 
            corresponding entry does not exist it will be automatically created.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.PromotionLevel">
            <summary>
            Optional.  The promotion level of the session.
            </summary>
            <remarks>Promotion levels are useful for categorizing sessions, for example to 
            indicate whether it was run in development, staging, or production. 
            If a value is provided it will be carried with the session data to upstream servers and clients.  
            If the corresponding entry does not exist it will be automatically created.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.ApplicationType">
            <summary>
            The type of process the application ran as (as declared or detected for recording).  (See AgentAppType for internal Agent use.)
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.AgentAppType">
            <summary>
            The type of process the application ran as (as seen by the Agent internally).
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.ApplicationDescription">
            <summary>
            The description of the application from its manifest.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.ApplicationVersion">
            <summary>
            The version of the application that recorded the session
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.AgentVersion">
            <summary>
            The version of the Gibraltar Agent used to monitor the session
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.HostName">
            <summary>
            The host name / NetBIOS name of the computer that recorded the session
            </summary>
            <remarks>Does not include the domain name portion of the fully qualified DNS name.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.DnsDomainName">
            <summary>
            The DNS domain name of the computer that recorded the session.  May be empty.
            </summary>
            <remarks>Does not include the host name portion of the fully qualified DNS name.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.FullyQualifiedUserName">
            <summary>
            The fully qualified user name of the user the application was run as.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.UserName">
            <summary>
            The user Id that was used to run the session
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.UserDomainName">
            <summary>
            The domain of the user id that was used to run the session
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.OSVersion">
            <summary>
            The version information of the installed operating system (without service pack or patches)
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.OSServicePack">
            <summary>
            The operating system service pack, if any.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.OSCultureName">
            <summary>
            The culture name of the underlying operating system installation
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.OSArchitecture">
            <summary>
            The processor architecture of the operating system.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.OSBootMode">
            <summary>
            The boot mode of the operating system.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.OSPlatformCode">
            <summary>
            The OS Platform code, nearly always 1 indicating Windows NT
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.OSProductType">
            <summary>
            The OS product type code, used to differentiate specific editions of various operating systems.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.OSSuiteMask">
            <summary>
            The OS Suite Mask, used to differentiate specific editions of various operating systems.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.OSFamilyName">
            <summary>
            The well known operating system family name, like Windows Vista or Windows Server 2003.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.OSEditionName">
            <summary>
            The edition of the operating system without the family name, such as Workstation or Standard Server.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.OSFullName">
            <summary>
            The well known OS name and edition name
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.OSFullNameWithServicePack">
            <summary>
            The well known OS name, edition name, and service pack like Windows XP Professional Service Pack 3
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.RuntimeVersion">
            <summary>
            The version of the .NET runtime that the application domain is running as.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.RuntimeArchitecture">
            <summary>
            The processor architecture the process is running as.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.CurrentCultureName">
            <summary>
            The current application culture name.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.CurrentUICultureName">
            <summary>
            The current user interface culture name.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.MemoryMB">
            <summary>
            The number of megabytes of installed memory in the host computer.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Processors">
            <summary>
            The number of physical processor sockets in the host computer.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.ProcessorCores">
            <summary>
            The total number of processor cores in the host computer.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.UserInteractive">
            <summary>
            Indicates if the session was run in a user interactive mode.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.TerminalServer">
            <summary>
            Indicates if the session was run through terminal server.  Only applies to User Interactive sessions.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.ScreenWidth">
            <summary>
            The number of pixels wide of the virtual desktop.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.ScreenHeight">
            <summary>
            The number of pixels tall for the virtual desktop.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.ColorDepth">
            <summary>
            The number of bits of color depth.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.CommandLine">
            <summary>
            The complete command line used to execute the process including arguments.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Status">
            <summary>
            The final status of the session.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.MessageCount">
            <summary>
            The number of messages in the messages collection.
            </summary>
            <remarks>This value is cached for high performance and reflects all of the known messages.  If only part
            of the files for a session are loaded, the totals as of the latest file loaded are used.  This means the
            count of items may exceed the actual number of matching messages in the messages collection if earlier
            files are missing.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.CriticalCount">
            <summary>
            The number of critical messages in the messages collection.
            </summary>
            <remarks>This value is cached for high performance and reflects all of the known messages.  If only part
            of the files for a session are loaded, the totals as of the latest file loaded are used.  This means the
            count of items may exceed the actual number of matching messages in the messages collection if earlier
            files are missing.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.ErrorCount">
            <summary>
            The number of error messages in the messages collection.
            </summary>
            <remarks>This value is cached for high performance and reflects all of the known messages.  If only part
            of the files for a session are loaded, the totals as of the latest file loaded are used.  This means the
            count of items may exceed the actual number of matching messages in the messages collection if earlier
            files are missing.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.WarningCount">
            <summary>
            The number of error messages in the messages collection.
            </summary>
            <remarks>This value is cached for high performance and reflects all of the known messages.  If only part
            of the files for a session are loaded, the totals as of the latest file loaded are used.  This means the
            count of items may exceed the actual number of matching messages in the messages collection if earlier
            files are missing.</remarks>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Properties">
            <summary>
            A collection of application specific properties.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.SessionSummary.Computer">
            <summary>
            Optional. Represents the computer that sent the session
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.SessionSummary.DefaultCaption(Gibraltar.Monitor.SessionSummary)">
            <summary>
            Generates a reasonable default caption for the provided session that has no caption
            </summary>
            <param name="sessionSummary">The session summary object to generate a default caption for</param>
            <returns>The default caption</returns>
        </member>
        <member name="M:Gibraltar.Monitor.SessionSummary.UpdateMessageStatistics(Gibraltar.Monitor.Serialization.LogMessagePacket)">
            <summary>
            Inspect the provided packet to update relevant statistics
            </summary>
            <param name="packet">A Log message packet to count</param>
        </member>
        <member name="M:Gibraltar.Monitor.SessionSummary.ClearMessageStatistics">
            <summary>
            Clear the existing statistic counters
            </summary>
            <remarks>Typically used before the messages are recounted to ensure
            they can be correctly updated.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.SessionSummary.GetApplicationNameSafe(System.String@,System.String@,System.Version@,System.String@)">
            <summary>
            Determine the correct application name for logging purposes of the current process.
            </summary>
            <param name="productName">The product name the logging system will use for this process.</param>
            <param name="applicationName">The application name the logging system will use for this process.</param>
            <param name="applicationVersion">The version of the application the logging system will use for this process.</param>
            <param name="applicationDescription">A description of the current application.</param>
            <remarks>This method isn't the complete story; the SessionSummary constructor has a more complete mechanism that takes into account
            the full scope of overrides.  This method will not throw exceptions if it is unable to determine suitable values.  Instead, default values of product name 'Unknown Product'
            application name 'Unknown Application', version 0.0, and an empty description will be used.</remarks>
        </member>
        <member name="T:Gibraltar.Monitor.SimpleLogMessage">
            <summary>
            An intermediary class to log a simple log message (as from Trace). 
            </summary>
            <remarks>This class knows how to translate from a simple logging API like Trace into our more all-encompassing
            Gibraltar Log collector.  Importantly, it knows how to acquire information about the source of a log message
            from the current call stack, and acts as its own IMessageSourceProvider when handing it off to the central Log.
            Thus, this object must be created while still within the same call stack as the origination of the log message.
            It can also scan the format args for the first Exception object, or an Exception object to attach (or null) may be
            specified directly.  Used internally by our Trace Listener and external Gibraltar log API.</remarks>
        </member>
        <member name="M:Gibraltar.Monitor.SimpleLogMessage.#ctor(Loupe.Extensibility.Data.LogMessageSeverity,System.String,System.String,System.Int32,System.String,System.Object[])">
            <summary>
            Creates a SimpleLogMessage object with default LogWriteMode behavior and automatically scan for an Exception object among args.
            </summary>
            <remarks>This constructor creates a SimpleLogMessage with the default LogWriteMode behavior (Queued)
            and will also automatically look for any Exception passed among the params args and attach the first
            one found as the Exception object for this log message (if any).</remarks>
            <param name="severity">The severity of the log message.</param>
            <param name="logSystem">The name of the logging system the message was issued through, such as "Trace" or
            "Gibraltar".</param>
            <param name="categoryName">The logging category or application subsystem category that the log message
            is associated with, such as "Trace", "Console", "Exception", or the logger name in Log4Net.</param>
            <param name="skipFrames">The number of stack frames to skip over to find the first candidate to be
            identified as the source of the log message.</param>
            <param name="message">A message string with optional formatting, which may span multiple lines.</param>
            <param name="args">Optional additional args to match up with the formatting string.</param>
        </member>
        <member name="M:Gibraltar.Monitor.SimpleLogMessage.#ctor(Loupe.Extensibility.Data.LogMessageSeverity,Gibraltar.Monitor.LogWriteMode,System.String,System.String,System.Int32,System.String,System.Object[])">
            <summary>
            Creates a SimpleLogMessage object with specified LogWriteMode behavior and automatically scan for an Exception object among args.
            </summary>
            <remarks>This constructor creates a SimpleLogMessage with a specified LogWriteMode behavior (queue-and-return
            or wait-for-commit) and will also automatically look for any Exception passed among the params args
            and attach the first one found as the Exception object for this log message (if any).</remarks>
            <param name="severity">The severity of the log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="logSystem">The name of the logging system the message was issued through, such as "Trace" or
            "Gibraltar".</param>
            <param name="categoryName">The logging category or application subsystem category that the log message
            is associated with, such as "Trace", "Console", "Exception", or the logger name in Log4Net.</param>
            <param name="skipFrames">The number of stack frames to skip over to find the first candidate to be
            identified as the source of the log message.</param>
            <param name="message">A message string with optional formatting, which may span multiple lines.</param>
            <param name="args">Optional additional args to match up with the formatting string.</param>
        </member>
        <member name="M:Gibraltar.Monitor.SimpleLogMessage.#ctor(Loupe.Extensibility.Data.LogMessageSeverity,Gibraltar.Monitor.LogWriteMode,System.String,System.String,System.Int32,System.Exception,System.String,System.Object[])">
            <summary>
            Creates a SimpleLogMessage object with specified LogWriteMode behavior and specified Exception object to attach.
            </summary>
            <remarks>This constructor creates a SimpleLogMessage with a specified LogWriteMode behavior (queue-and-return
            or wait-for-commit) and with a specified Exception object (which may be null) to attach to this log message.
            The format args will not be scanned for an Exception object by this overload.</remarks>
            <param name="severity">The severity of the log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="logSystem">The name of the logging system the message was issued through, such as "Trace" or
            "Gibraltar".</param>
            <param name="categoryName">The logging category or application subsystem category that the log message
            is associated with, such as "Trace", "Console", "Exception", or the logger name in Log4Net.</param>
            <param name="skipFrames">The number of stack frames to skip over to find the first candidate to be
            identified as the source of the log message.</param>
            <param name="exception">An exception associated with this log message (or null for none).</param>
            <param name="message">A message string with optional formatting, which may span multiple lines.</param>
            <param name="args">Optional additional args to match up with the formatting string.</param>
        </member>
        <member name="P:Gibraltar.Monitor.ThreadInfo.ThreadInstance">
            <summary>
            A uniquifier for display purposes (set by Analyst)
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ThreadInfo.IsStillAlive">
            <summary>
            Is the thread this instance is about still active in memory?  Only legitimate within the session where
            the thread was running.  Do not query this for playback outside the original running session.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfo.IsThreadStillAlive(System.Int32)">
            <summary>
            Is the thread with the specified threadIndex still active in memory?  Only legitimate within the session where
            the thread was running.  Do not query this for playback outside the original running session.
            </summary>
            <param name="threadIndex">The unique ThreadIndex value which the Agent assigned to the thread in question.</param>
            <returns>Reports true if the managed thread which was assigned the specified threadIndex still exists
            or has not yet garbage collected its [ThreadStatic] variables.  Reports false after garbage collection.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfo.GetCurrentThreadIndex">
            <summary>
            Returns the unique threadIndex value assigned to the current thread.
            </summary>
            <returns>The threadIndex value for the current thread which is unique across the life of this log session.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfo.CompareTo(Gibraltar.Monitor.ThreadInfo)">
            <summary>
            Compares this ThreadInfo object to another to determine sorting order.
            </summary>
            <remarks>ThreadInfo instances are sorted by their ThreadId property.</remarks>
            <param name="other">The other ThreadInfo object to compare this object to.</param>
            <returns>An int which is less than zero, equal to zero, or greater than zero to reflect whether
            this ThreadInfo should sort as being less-than, equal to, or greater-than the other
            ThreadInfo, respectively.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfo.Equals(Gibraltar.Monitor.ThreadInfo)">
            <summary>
            Determines if the provided ThreadInfo object is identical to this object.
            </summary>
            <param name="other">The ThreadInfo object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfo.Equals(System.Object)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="obj">The object to compare this object to</param>
            <returns>True if the other object is also a ThreadInfo and represents the same data.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfo.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            An int representing the hash code calculated for the contents of this object.
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfo.op_Equality(Gibraltar.Monitor.ThreadInfo,Gibraltar.Monitor.ThreadInfo)">
            <summary>
            Compares two ThreadInfo instances for equality.
            </summary>
            <param name="left">The ThreadInfo to the left of the operator</param>
            <param name="right">The ThreadInfo to the right of the operator</param>
            <returns>True if the two ThreadInfos are equal.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfo.op_Inequality(Gibraltar.Monitor.ThreadInfo,Gibraltar.Monitor.ThreadInfo)">
            <summary>
            Compares two ThreadInfo instances for inequality.
            </summary>
            <param name="left">The ThreadInfo to the left of the operator</param>
            <param name="right">The ThreadInfo to the right of the operator</param>
            <returns>True if the two ThreadInfos are not equal.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfo.op_LessThan(Gibraltar.Monitor.ThreadInfo,Gibraltar.Monitor.ThreadInfo)">
            <summary>
            Compares if one ThreadInfo instance should sort less than another.
            </summary>
            <param name="left">The ThreadInfo to the left of the operator</param>
            <param name="right">The ThreadInfo to the right of the operator</param>
            <returns>True if the ThreadInfo to the left should sort less than the ThreadInfo to the right.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfo.op_GreaterThan(Gibraltar.Monitor.ThreadInfo,Gibraltar.Monitor.ThreadInfo)">
            <summary>
            Compares if one ThreadInfo instance should sort greater than another.
            </summary>
            <param name="left">The ThreadInfo to the left of the operator</param>
            <param name="right">The ThreadInfo to the right of the operator</param>
            <returns>True if the ThreadInfo to the left should sort greater than the ThreadInfo to the right.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.ThreadInfo.ThreadToken">
            <summary>
            A class to help detect when a managed thread no longer exists.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfo.ThreadToken.#ctor(System.Int32)">
            <summary>
            This class can not be instantiated elsewhere.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ThreadInfo.ThreadToken.ThreadIndex">
            <summary>
            Get the unique-within-this-session ThreadIndex value.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfo.ThreadToken.GetCurrentThreadIndex">
            <summary>
            Register the current thread so that we can detect when it no longer exists, and return its unique ThreadIndex.
            </summary>
            <returns>The unique ThreadIndex value assigned to the current thread.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfo.ThreadToken.IsThreadStillAlive(System.Int32)">
            <summary>
            Determine whether an identifed thread likely still exists or definitely no longer exists in this process.
            </summary>
            <param name="threadIndex">The unique ThreadIndex value which the Agent assigned to the thread in question.</param>
            <returns>Reports true if the managed thread which was assigned the specified threadIndex still exists
            or has not yet garbage collected its [ThreadStatic] variables.  Reports false after garbage collection.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfo.ThreadToken.GetNextThreadIndex">
            <summary>
            Get an integer to identify a thread uniquely across the entire life of this session.
            </summary>
            <returns>A unique index which will not be reused within the life of this session.</returns>
        </member>
        <member name="T:Gibraltar.Monitor.ThreadInfoCollection">
            <summary>
            A (sorted) collection of ThreadInfo objects.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.#ctor">
            <summary>
            Create a new empty ThreadInfoCollection.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.EnsureSorted">
            <summary>
            Makes sure any new ThreadInfo items added to the collection have been re-sorted.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.Add(Gibraltar.Monitor.ThreadInfo)">
            <summary>
            Adds an item to the ThreadInfoCollection.
            </summary>
            <param name="item">The ThreadInfo item to add.</param>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.Clear">
            <summary>
            Clear the ThreadInfoCollection.
            </summary>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.Contains(Gibraltar.Monitor.ThreadInfo)">
            <summary>
            Determines whether a given ThreadInfo item is already present in the ThreadInfoCollection.
            </summary>
            <param name="item">The ThreadInfo item of interest.</param>
            <returns>True if present, false if not.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.ContainsKey(System.Guid)">
            <summary>
            Determines whether the ThreadInfoCollection contains a ThreadInfo with a specified Guid ID.
            </summary>
            <param name="id">The Guid ID of the ThreadInfo of interest.</param>
            <returns>True if present, false if not.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.ContainsKey(System.Int32)">
            <summary>
            Determines whether the ThreadInfoCollection contains a ThreadInfo with a specified ThreadIndex.
            </summary>
            <param name="threadIndex">The unique ThreadIndex of the ThreadInfo of interest.</param>
            <returns>True if present, false if not.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.CopyTo(Gibraltar.Monitor.ThreadInfo[],System.Int32)">
            <summary>
            Copy the collected ThreadInfo objects to a target array, in sorted order.
            </summary>
            <param name="array">The target array (must be large enough to hold the Count of items starting at arrayIndex).</param>
            <param name="arrayIndex">The starting index in the target array at which to begin copying.</param>
        </member>
        <member name="P:Gibraltar.Monitor.ThreadInfoCollection.Count">
            <summary>
            Gets the number of ThreadInfo items in the ThreadInfoCollection.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ThreadInfoCollection.MaxThreadIndex">
            <summary>
            Gets the maximum ThreadIndex value ever added to the ThreadInfoCollection.
            </summary>
        </member>
        <member name="P:Gibraltar.Monitor.ThreadInfoCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the ThreadInfoCollection is read-only.
            </summary>
            <returns>
            False because a ThreadInfoCollection is never read-only.
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.Remove(Gibraltar.Monitor.ThreadInfo)">
            <summary>
            Removes a specified ThreadInfo item from the ThreadInfoCollection.
            </summary>
            <param name="item">The ThreadInfo item to remove.</param>
            <returns>True if item was found and removed from the ThreadInfoCollection, false if not found.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.RemoveKey(System.Guid)">
            <summary>
            Removes any ThreadInfo item with the specified Guid ID from the ThreadInfoCollection.
            </summary>
            <param name="id">The Guid ID of the ThreadInfo to remove.</param>
            <returns>True if an item was found and removed from the ThreadInfoCollection, false if not found.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.RemoveKey(System.Int32)">
            <summary>
            Removes any ThreadInfo item with the specified ThreadIndex from the ThreadInfoCollection.
            </summary>
            <param name="threadIndex">The unique ThreadIndex of the ThreadInfo to remove.</param>
            <returns>True if an item was found and removed from the ThreadInfoCollection, false if not found.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.IndexOf(Gibraltar.Monitor.ThreadInfo)">
            <summary>
            Determines the index of a specific ThreadInfo in the ThreadInfoCollection (in sorted order).
            </summary>
            <param name="item">The ThreadInfo item to locate in the ThreadInfoCollection.</param>
            <returns>
            The index of the ThreadInfo item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.Insert(System.Int32,Gibraltar.Monitor.ThreadInfo)">
            <summary>
            ThreadInfoCollection is sorted and does not support direct modification.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the ThreadInfo item found at a specified index in the ThreadInfoCollection (in sorted order). (Supported but not recommended.)
            </summary>
            <param name="index">The index (in the sorted order) of a ThreadInfo item to remove.</param>
        </member>
        <member name="P:Gibraltar.Monitor.ThreadInfoCollection.System#Collections#Generic#IList{Gibraltar#Monitor#ThreadInfo}#Item(System.Int32)">
            <summary>
            Gets the element at the specified index. (Setting by index is not supported in ThreadInfoCollection.)
            </summary>
            <param name="sortIndex">The index (in the sorted order) of a ThreadInfo item to extract.</param>
            <returns>The ThreadInfo item at that index in the sorted order of this ThreadInfoCollection.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.ThreadInfoCollection.Item(System.Int32)">
            <summary>
            Gets a ThreadInfo item at a specified index (in the sorted order). (NOT BY ThreadId or ThreadIndex!
            Use TryGetValue to lookup by ThreadIndex or TryFindThreadId to lookup by ThreadId.)
            </summary>
            <param name="sortIndex">The index (in the sorted order) of a ThreadInfo item to extract.</param>
            <returns>The ThreadInfo item at that index in the sorted order of this ThreadInfoCollection.</returns>
        </member>
        <member name="P:Gibraltar.Monitor.ThreadInfoCollection.Item(System.Guid)">
            <summary>
            Gets a ThreadInfo item with a specified Guid ID.
            </summary>
            <param name="id">The Guid ID of the desired ThreadInfo.</param>
            <returns>The ThreadInfo item with the specified Guid ID.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.TryGetValue(System.Guid,Gibraltar.Monitor.ThreadInfo@)">
            <summary>
            Get the ThreadInfo with a specified Guid ID.
            </summary>
            <param name="id">The Guid ID of the desired ThreadInfo.</param>
            <param name="threadInfo">Gets the ThreadInfo with the specified Guid ID if it exists in the ThreadInfoCollection.</param>
            <returns>True if found, false if not found.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.TryGetValue(System.Int32,Gibraltar.Monitor.ThreadInfo@)">
            <summary>
            Get the ThreadInfo with a specified ThreadIndex. (Use TryFindThreadId() to look up by ManagedThreadId.)
            </summary>
            <param name="threadIndex">The ThreadId of the desired ThreadInfo.</param>
            <param name="threadInfo">Gets the ThreadInfo with the specified ThreadIndex if it exists in the ThreadInfoCollection.</param>
            <returns>True if found, false if not found.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.TryFindThreadId(System.Int32,Gibraltar.Monitor.ThreadInfo@)">
            <summary>
            Get the ThreadInfo with a specified ThreadId.  (Finds earliest match, but ThreadId may not be unique!  Use Guid if possible.)
            </summary>
            <param name="threadId">The ThreadId of the desired ThreadInfo.</param>
            <param name="threadInfo">Gets the ThreadInfo with the specified ThreadId if it exists in the ThreadInfoCollection.</param>
            <returns>True if found, false if not found.</returns>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the ThreadInfoCollection (in sorted order).
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the ThreadInfoCollection (in sorted order).
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Monitor.ThreadInfoCollection.UniquifyThreadNames">
            <summary>
            Scan the set of ThreadInfo in the collection and assign ThreadInstance numbers to ThreadName collisions.
            </summary>
        </member>
        <member name="T:Gibraltar.IName">
            <summary>
            An interface to get the Name of NameValuePair&lt;TValue&gt; of any value type.
            </summary>
        </member>
        <member name="P:Gibraltar.IName.Name">
            <summary>
            The name of the item
            </summary>
        </member>
        <member name="T:Gibraltar.NameValuePair`1">
            <summary>
            Simple class that contains a name and corresponding value
            </summary>
            <remarks>NameValuePairs are compared to each other by Name for sorting purposes.</remarks>
        </member>
        <member name="P:Gibraltar.NameValuePair`1.Name">
            <summary>
            The name of the item
            </summary>
        </member>
        <member name="P:Gibraltar.NameValuePair`1.Value">
            <summary>
            The value of the item
            </summary>
        </member>
        <member name="M:Gibraltar.NameValuePair`1.#ctor">
            <summary>
            Default constructor used to initialize the class
            </summary>
            <remarks>No Remarks</remarks>
        </member>
        <member name="M:Gibraltar.NameValuePair`1.#ctor(System.String,`0)">
            <summary>
            Default constructor used to initialize the class
            </summary>
            <param name="name">The name of the item</param>
            <param name="value">The value of the corresponding item</param>
            <remarks>No Remarks</remarks>
        </member>
        <member name="M:Gibraltar.NameValuePair`1.ToString">
            <summary>
            Returns a System.String that represents current System.Object
            </summary>
            <returns>Returns a System.String that represents current System.Object</returns>
            <remarks>No Remarks</remarks>
        </member>
        <member name="M:Gibraltar.NameValuePair`1.CompareTo(System.Object)">
            <summary>
            Compares this object with the passed in object, if it is an INameValuePair.
            </summary>
            <param name="obj">The other object that is to be compared with this instance.</param>
            <returns>A value that is less than, equal to, or greater than zero.</returns>
        </member>
        <member name="M:Gibraltar.NameValuePair`1.CompareTo(Gibraltar.IName)">
            <summary>
            Compares this IName with another of any data type.
            </summary>
            <param name="other">The other IName that is to be compared with this instance.</param>
            <returns>A value that is less than, equal to, or greater than zero.</returns>
        </member>
        <member name="M:Gibraltar.NameValuePair`1.CompareTo(Gibraltar.NameValuePair{`0})">
            <summary>
            Compares this NameValuePair&lt;TValue&gt; with another with the same data type.
            </summary>
            <param name="other">The other NameValuePair&lt;TValue&gt; that is to be compared with this instance.</param>
            <returns>A value that is less than, equal to, or greater than zero.</returns>
        </member>
        <member name="T:Gibraltar.PipeStream">
            <summary>
            A derivative of a MemoryStream primarily for reading which provides additional methods to append data and
            periodically truncate (discard already-read data which won't be needed again).  (Currently no safety locking!)
            </summary>
        </member>
        <member name="M:Gibraltar.PipeStream.#ctor">
            <summary>
            Initializes a new PipeStream with an expandable capacity.
            </summary>
        </member>
        <member name="M:Gibraltar.PipeStream.#ctor(System.Int32)">
            <summary>
            Initializes a new PipeStream with an expandable capacity starting as specified. 
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="P:Gibraltar.PipeStream.UnreadLength">
            <summary>
            The number of bytes we haven't read yet in the stream.
            </summary>
        </member>
        <member name="M:Gibraltar.PipeStream.Append(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends a block of bytes to the end of the current stream using data read from buffer.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing from.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. For additional information
                see <see cref="P:System.IO.Stream.CanWrite"/>. -or- The current position is closer than
                <paramref name="count"/> bytes to the end of the stream, and the capacity cannot be modified.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="offset"/> subtracted from the buffer length is less
                than <paramref name="count"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> are
                negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The current stream instance is closed.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to the current stream using data read from buffer.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing from.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. For additional information
                see <see cref="P:System.IO.Stream.CanWrite"/>. -or- The current position is closer than
                <paramref name="count"/> bytes to the end of the stream, and the capacity cannot be modified.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="offset"/> subtracted from the buffer length is less
                than <paramref name="count"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> are
                negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The current stream instance is closed.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.PipeStream.Trim">
            <summary>
            Discard already-read data (up to the read Position) from the stream buffer and reset the buffer length to free memory.
            </summary>
            <returns>The number of bytes discarded from the stream.</returns>
        </member>
        <member name="T:Gibraltar.PrivateTaskErrorEventArgs">
            <summary>
            Event arguments for the TaskException event 
            </summary>
        </member>
        <member name="M:Gibraltar.PrivateTaskErrorEventArgs.#ctor(System.Object,System.Exception)">
            <summary>
            Create a new event argument object for the provided task information
            </summary>
            <param name="state"></param>
            <param name="ex"></param>
        </member>
        <member name="P:Gibraltar.PrivateTaskErrorEventArgs.State">
            <summary>
            The state object provided for the task (if any)
            </summary>
        </member>
        <member name="P:Gibraltar.PrivateTaskErrorEventArgs.Exception">
            <summary>
            The exception that was generated.
            </summary>
        </member>
        <member name="T:Gibraltar.PrivateTaskErrorEventHandler">
            <summary>
            Event handler for using the Private Task Error event args.
            </summary>
            <param name="state"></param>
            <param name="e"></param>
        </member>
        <member name="T:Gibraltar.ProgressMonitor">
            <summary>
            Observes the progress of one process for the purpose of progress reporting in user interfaces.
            </summary>
            <remarks></remarks>
        </member>
        <member name="E:Gibraltar.ProgressMonitor.Canceled">
            <summary>
            Raised when the monitor stack is in the process of cancelling.
            </summary>
        </member>
        <member name="E:Gibraltar.ProgressMonitor.Updated">
            <summary>
            Raised whenever the monitor's information is updated.
            </summary>
        </member>
        <member name="P:Gibraltar.ProgressMonitor.Complete">
            <summary>
            Explicitly indicate this monitored task is complete.
            </summary>
            <remarks>Once marked complete, the monitor will be set to 100% and will not accept future updates.</remarks>
        </member>
        <member name="P:Gibraltar.ProgressMonitor.CompletedSteps">
            <summary>
            The number of steps that have been completed.
            </summary>
            <remarks>Used to calculate percent complete by comparing with MaxSteps.  To update, call Update 
            which will notify subscribers that this object has changed.</remarks>
        </member>
        <member name="M:Gibraltar.ProgressMonitor.Dispose">
            <summary>
            Indicates that the monitor is complete and should be immediately disposed
            </summary>
            <remarks>Internally equivalent to setting Complete to true.</remarks>
        </member>
        <member name="M:Gibraltar.ProgressMonitor.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.
            </summary>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="P:Gibraltar.ProgressMonitor.MaxSteps">
            <summary>
            The maximum number of steps in the process being monitored
            </summary>
            <remarks>Used to calculate percent complete by comparing with CurrentStep.  To update, call Update
            which will notify subscribers that this object has changed.  For the best user experience, attempt to change
            this value as rarely as feasible so that the percentage doesn't appear to go down.</remarks>
        </member>
        <member name="P:Gibraltar.ProgressMonitor.Owner">
            <summary>
            The object that owns this monitor.
            </summary>
            <remarks>Occasionally useful for development/debugging purposes when the status message isn't sufficiently descriptive.</remarks>
        </member>
        <member name="P:Gibraltar.ProgressMonitor.PercentComplete">
            <summary>
            The percentage of steps currently complete for this monitor, with 1 representing 100 percent.
            </summary>
        </member>
        <member name="P:Gibraltar.ProgressMonitor.StatusMessage">
            <summary>
            An end-user status message to display for the current state of the monitor
            </summary>
        </member>
        <member name="M:Gibraltar.ProgressMonitor.Update(System.String)">
            <summary>
            Update the progress of the monitor.
            </summary>
            <remarks>Subscribers will be notified of changes whenever Update is called.</remarks>
            <param name="status">A new user status message</param>
        </member>
        <member name="M:Gibraltar.ProgressMonitor.Update(System.String,System.Int32)">
            <summary>
            Update the progress of the monitor.
            </summary>
            <remarks>Subscribers will be notified of changes whenever Update is called.</remarks>
            <param name="status">A new user status message</param>
            <param name="completedSteps">The number of steps that have been completed. (should be less than or equal to the maximum number of steps)</param>
        </member>
        <member name="M:Gibraltar.ProgressMonitor.Update(System.String,System.Int32,System.Int32)">
            <summary>
            Update the progress of the monitor.
            </summary>
            <remarks>Subscribers will be notified of changes whenever Update is called.
            When updating the maximum number of steps it is best to guess high at first then reduce over time
            instead of the reverse to give the user the impression of continuous forward progress instead of 
            losing progress.</remarks>
            <param name="status">A new user status message</param>
            <param name="completedSteps">The number of steps that have been completed. (should be less than or equal to the maximum number of steps)</param>
            <param name="maxSteps">The maximum number of steps in this process.</param>
        </member>
        <member name="M:Gibraltar.ProgressMonitor.OnMonitorCanceled">
            <summary>
            Called to raise the MonitorCanceled event.
            </summary>
            <remarks>Any inheritors that override this event must add a call to Base.OnMonitorCanceled at the end of their routine to ensure the event is raised.</remarks>
        </member>
        <member name="M:Gibraltar.ProgressMonitor.OnMonitorUpdated">
            <summary>
            Called to raise the MonitorUpdated event.
            </summary>
            <remarks>Any inheritors that override this event must add a call to Base.OnMonitorUpdated at the end of their routine to ensure the event is raised.</remarks>
        </member>
        <member name="M:Gibraltar.ProgressMonitor.Cancel">
            <summary>
            Called by the monitor stack to indicate that this monitor should cancel.
            </summary>
            <remarks>This is only for use by the progress monitor stack. Any other use will cause problems.</remarks>
        </member>
        <member name="T:Gibraltar.ProgressMonitorEventArgs">
            <summary>
            Information about monitor changes
            </summary>
        </member>
        <member name="M:Gibraltar.ProgressMonitorEventArgs.#ctor(Gibraltar.ProgressMonitorStack,Gibraltar.ProgressMonitor)">
            <summary>
            Create a new monitor changed event arguments object.
            </summary>
            <param name="progressMonitors">The monitor stack that changed.</param>
            <param name="progressMonitor">The monitor object (if any) affected by the change.</param>
        </member>
        <member name="P:Gibraltar.ProgressMonitorEventArgs.ProgressMonitors">
            <summary>
            The stack of all monitors currently in use.
            </summary>
        </member>
        <member name="P:Gibraltar.ProgressMonitorEventArgs.ProgressMonitor">
            <summary>
            The monitor that was changed (may not be the top monitor on the stack)
            </summary>
        </member>
        <member name="T:Gibraltar.ProgressMonitorStack">
            <summary>
            The default progress monitor stack implementation.
            </summary>
        </member>
        <member name="F:Gibraltar.ProgressMonitorStack.DefaultMaximumSteps">
            <summary>
            The default maximum number of steps for tracking progress if not otherwise specified.
            </summary>
        </member>
        <member name="E:Gibraltar.ProgressMonitorStack.Canceled">
            <summary>
            Raised when the monitor stack is cancelled.  No complete event will then be raised.
            </summary>
        </member>
        <member name="E:Gibraltar.ProgressMonitorStack.Changed">
            <summary>
            Raised whenever a monitor object is pushed or popped from the stack, effectively changing what monitor is on the top of the stack.
            </summary>
        </member>
        <member name="E:Gibraltar.ProgressMonitorStack.Completed">
            <summary>
            Raised when the monitor stack completes.
            </summary>
        </member>
        <member name="E:Gibraltar.ProgressMonitorStack.Updated">
            <summary>
            Raised when the progress information is updated.
            </summary>
        </member>
        <member name="M:Gibraltar.ProgressMonitorStack.#ctor(System.String)">
            <summary>
            Create a new monitor stack to monitor a process.
            </summary>
            <param name="title">An end-user display title for the overall business process</param>
        </member>
        <member name="M:Gibraltar.ProgressMonitorStack.Cancel">
            <summary>
            Request to cancel the monitor stack.
            </summary>
            <remarks>This is designed to signal each monitor object to cancel their work.  It will block until the cancel is complete.</remarks>
        </member>
        <member name="P:Gibraltar.ProgressMonitorStack.Complete">
            <summary>
            Explicitly indicate the entire monitor stack is complete
            </summary>
            <remarks>Each monitor in the stack will be marked complete.  Once marked complete, 
            the monitor will be set to 100% and will not accept future updates.</remarks>
        </member>
        <member name="P:Gibraltar.ProgressMonitorStack.CompletedSteps">
            <summary>
            The number of completed steps (between zero and the maximum number of steps).
            </summary>
        </member>
        <member name="P:Gibraltar.ProgressMonitorStack.Count">
            <summary>
            The current number of monitors in the stack
            </summary>
        </member>
        <member name="M:Gibraltar.ProgressMonitorStack.Dispose">
            <summary>
            Consider the monitor stack complete and prepare it for immediate disposal.
            </summary>
            <remarks>Internally this is the same as setting Complete to true.</remarks>
        </member>
        <member name="P:Gibraltar.ProgressMonitorStack.MaximumSteps">
            <summary>
            The current maximum number of steps.
            </summary>
        </member>
        <member name="M:Gibraltar.ProgressMonitorStack.NewMonitor(System.Object,System.String,System.Int32)">
            <summary>
            Create a new monitor with the specified owning object, status, and number of steps
            </summary>
            <remarks>While it is possible to specify zero for the number of steps, it is recommended
            that a guess be made for the maximum number of steps to provide the best UI experience.  When in
            doubt, guess high and reduce later which will make the progress appear to accelerate.</remarks>
            <param name="owner">The object that is responsible for the proces being tracked (for development purposes, never displayed)</param>
            <param name="status">A short status message for the user</param>
            <param name="maxSteps">The maximum number of steps in the process being monitored</param>
            <returns>A new monitor object which will be at the top of the stack</returns>
        </member>
        <member name="P:Gibraltar.ProgressMonitorStack.StatusMessage">
            <summary>
            A user display message for the current status.
            </summary>
        </member>
        <member name="P:Gibraltar.ProgressMonitorStack.Title">
            <summary>
            An end-user display title of the overall process being monitored
            </summary>
        </member>
        <member name="P:Gibraltar.ProgressMonitorStack.IsCanceled">
            <summary>
            Indicates if the progress monitor stack was canceled.
            </summary>
        </member>
        <member name="M:Gibraltar.ProgressMonitorStack.OnCanceled">
            <summary>
            Raised by the progress monitor stack when canceling the operation being monitored/
            </summary>
            <remarks>If overriding this method, be sure to call Base.OnCanceled to ensure that the event is still raised to its caller.</remarks>
        </member>
        <member name="M:Gibraltar.ProgressMonitorStack.OnChanged">
            <summary>
            Called when the ProgressMonitor that is the top monitor is changed.
            </summary>
            <remarks>If overriding this method, be sure to call Base.OnChanged to ensure that the event is still raised to its caller.</remarks>
        </member>
        <member name="M:Gibraltar.ProgressMonitorStack.OnCompleted">
            <summary>
            Called to raise the Completed event when the task being monitored has been completed.
            </summary>
            <remarks>If overriding this method, be sure to call Base.OnCompleted to ensure that the event is still raised to its caller.</remarks>
        </member>
        <member name="M:Gibraltar.ProgressMonitorStack.OnUpdated">
            <summary>
            Called to raise the Updated event whenever the progress information (message, steps, etc.) is updated.
            </summary>
            <remarks>If overriding this method, be sure to call Base.OnUpdated to ensure that the event is still raised to its caller.</remarks>
        </member>
        <member name="M:Gibraltar.ProgressMonitorStack.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            </summary>
            <remarks>
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.
            </remarks>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="M:Gibraltar.ProgressMonitorStack.UpdateProgress">
            <summary>
            Called whenever the information that drives progress should be updated.
            </summary>
        </member>
        <member name="T:Gibraltar.ProgressMonitorStackEventArgs">
            <summary>
            Information about monitor changes
            </summary>
        </member>
        <member name="M:Gibraltar.ProgressMonitorStackEventArgs.#ctor(Gibraltar.ProgressMonitorStack,System.String,System.Int32,System.Int32)">
            <summary>
            Create a new monitor changed event arguments object.
            </summary>
            <param name="progressMonitors">The monitor stack that changed</param>
            <param name="statusMessage">A user display message for the current status</param>
            <param name="completedSteps">The current progress step (between zero and the maximum number of steps)</param>
            <param name="maximumSteps">The current maximum number of steps</param>
        </member>
        <member name="P:Gibraltar.ProgressMonitorStackEventArgs.ProgressMonitors">
            <summary>
            The stack of all monitors currently in use.
            </summary>
        </member>
        <member name="P:Gibraltar.ProgressMonitorStackEventArgs.StatusMessage">
            <summary>
            A user display message for the current status.
            </summary>
        </member>
        <member name="P:Gibraltar.ProgressMonitorStackEventArgs.CompletedSteps">
            <summary>
            The number of completed steps (between zero and the maximum number of steps).
            </summary>
        </member>
        <member name="P:Gibraltar.ProgressMonitorStackEventArgs.MaximumSteps">
            <summary>
            The current maximum number of steps.
            </summary>
        </member>
        <member name="T:Gibraltar.ProgressMonitorStackEventHandler">
            <summary>
            The delegate for progress monitor stack events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Gibraltar.Serialization.FieldDefinition">
            <summary>
            FieldDefinition is only used internally by PacketDefinition to hold the name and type of a field
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FieldDefinition.#ctor(System.String,Gibraltar.Serialization.FieldType)">
            <summary>
            Create a new field definition.
            </summary>
            <param name="fieldName"></param>
            <param name="fieldType"></param>
        </member>
        <member name="P:Gibraltar.Serialization.FieldDefinition.FieldType">
            <summary>
            The exact serializable field type of the field
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.FieldDefinition.Name">
            <summary>
            The unique name of this field within the packet
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FieldDefinition.IsCompatible(Gibraltar.Serialization.FieldType)">
            <summary>
            Indicates if this field definition can store data of the provided type losslessly.
            </summary>
            <param name="type">The prospective value type to be serialized</param>
            <returns>True if the provided type can be converted into this field type without
            losing precision.</returns>
            <remarks>This method will indicate if a provided value type is sufficiently compatible
            with the exact type of this field to be converted without losing data.  For example,
            a signed integer can be stored in an unsigned integer field.  A short can be stored 
            as a long, etc.</remarks>
        </member>
        <member name="M:Gibraltar.Serialization.FieldDefinitionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Gibraltar.Serialization.FieldDefinitionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Serialization.FieldDefinitionCollection.Add(Gibraltar.Serialization.FieldDefinition)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:Gibraltar.Serialization.FieldDefinitionCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
        </member>
        <member name="M:Gibraltar.Serialization.FieldDefinitionCollection.Contains(Gibraltar.Serialization.FieldDefinition)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Gibraltar.Serialization.FieldDefinitionCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the FieldDefinitionCollection contains a FieldDefinition for the specified fieldName.
            </summary>
            <param name="fieldName">The name of the field of interest.</param>
            <returns>True if found, false if not.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldDefinitionCollection.CopyTo(Gibraltar.Serialization.FieldDefinition[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
                            </param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.
                            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.
                            </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
                                -or-
                            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
                                -or-
                                The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
                                -or-
                                Type cannot be cast automatically to the type of the destination <paramref name="array"/>.
                            </exception>
        </member>
        <member name="M:Gibraltar.Serialization.FieldDefinitionCollection.Remove(Gibraltar.Serialization.FieldDefinition)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="P:Gibraltar.Serialization.FieldDefinitionCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Gibraltar.Serialization.FieldDefinitionCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldDefinitionCollection.IndexOf(Gibraltar.Serialization.FieldDefinition)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:Gibraltar.Serialization.FieldDefinitionCollection.IndexOf(System.String)">
            <summary>
            Determines the index of a FieldDefinition by its specified fieldName.
            </summary>
            <param name="fieldName">The name of the field of interest.</param>
            <returns>The index of the FieldDefinition with the specified fieldName, or -1 if not found.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldDefinitionCollection.Insert(System.Int32,Gibraltar.Serialization.FieldDefinition)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="M:Gibraltar.Serialization.FieldDefinitionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="P:Gibraltar.Serialization.FieldDefinitionCollection.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="P:Gibraltar.Serialization.FieldDefinitionCollection.Item(System.String)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="fieldName">The name of the field to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fieldName" /> is not a valid name in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="T:Gibraltar.Serialization.FieldReader">
            <summary>
            Provides low-level decompression of the basic data types we pass over the wire.
            
            This class consumes a compressed stream of bytes to be produced by FieldWriter
            to reinstate the original stream of basic data types passed to FiedWriter.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.#ctor(System.IO.Stream,Gibraltar.Serialization.UniqueStringList,System.Int32,System.Int32)">
            <summary>
            Initialize a FieldReader to read the specified stream using
            the provided encoding for strings.  Also, share state with the
            specified parent reader.
            </summary>
            <param name="stream">Data to be read</param>
            <param name="stringList">The cache of unique strings that have been previously read</param>
            <param name="majorVersion">Major version of the serialization protocol</param>
            <param name="minorVersion">Minor version of the serialization protocol</param>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.#ctor(System.IO.Stream)">
            <summary>
            Initialize a FieldReader to read the specified stream using
            the provided encoding for strings.
            </summary>
            <param name="stream">Data to be read</param>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.#ctor(System.Byte[])">
            <summary>
            Initialize a FieldReader to read the specified data using
            the default encoding for strings.
            </summary>
            <param name="data">Data to be read</param>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.#ctor(System.Byte[],Gibraltar.Serialization.UniqueStringList)">
            <summary>
            Initialize a FieldReader to read the specified data using
            the default encoding for strings.  Also, share state with the
            specified parent reader.
            </summary>
            <param name="data">Data to be read</param>
            <param name="stringList">The cache of unique strings that have been previously read</param>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReplaceStream(System.IO.Stream)">
            <summary>
            Allows the stream being read by a FieldReader to be replaced without having to re-instance a new object.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.FieldReader.Strings">
            <summary>
            Returns the cache of unique string values that have been written
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.PeekUInt64">
            <summary>
            Returns a UInt64 value from the stream without repositioning the stream
            </summary>
            <returns>A UInt64 value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadBool">
            <summary>
            Returns a bool value from the stream.
            </summary>
            <returns>A bool value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadBoolArray">
            <summary>
            Returns an array of bool values from the stream.
            </summary>
            <remarks>
            The idea here is to compress the bool[] down to a bit vector which is then further
            compressed as an array of Int32 words.
            </remarks>
            <returns>An array bool values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadString">
            <summary>
            Read a string from the stream.
            <remarks>
            We optimize strings by maintaining a hash table of each unique string 
            we have seen.  Each string is sent with as an integer index into the table.
            When a new string is encountered, it's index is followed by the string value.
            </remarks>
            </summary>
            <returns>Returns the string</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.CompensateForPossibleSerializationError(System.String)">
            <summary>
            We found that there is an occasional error in the way Agent serializes strings under
            protocol version 1.0.  Every once in a while, a string that has already been entered
            into the string table has its value passed again as well as its string token.
            
            We suspect that this may be do to a threading issue but since we diagnosed the
            problem at the time we were already implementing protocol version 2.0, we didn't
            spend the time to exactly work out the precise circumstances that would cause the
            error to occur. At least, we didn't investigate further than identifying these potentially
            un-thread-safe lines in FieldWriter.Write:
            <code>
                int newStringIndex = m_Strings.Count + 1;
                int stringIndex = m_Strings.AddOrGet(value) + 1;
                Write((UInt32)stringIndex);
                if (stringIndex == newStringIndex) 
                   WriteString(value);
            </code>
            i.e. The error seen empirically could occur if two threads execute that code snippet concurrently.
            </summary>
            <param name="stringValue"></param>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadStringArray">
            <summary>
            Read an array of strings from the stream.
            </summary>
            <returns>Returns an array of string values</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadInt32">
            <summary>
            Returns an Int32 value from the stream.
            </summary>
            <returns>An Int32 value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadInt32Array">
            <summary>
            Returns an array of Int32 values from the stream.
            </summary>
            <returns>An array of Int32 values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadInt64">
            <summary>
            Returns an Int64 value from the stream.
            </summary>
            <returns>An Int64 value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadInt64Array">
            <summary>
            Returns an array of Int64 values from the stream.
            </summary>
            <returns>An array of Int64 values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadUInt32">
            <summary>
            Returns a UInt32 value from the stream.
            </summary>
            <returns>A UInt32 value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadUInt32Array">
            <summary>
            Returns an array of UInt32 values from the stream.
            </summary>
            <returns>An array of UInt32 values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadUInt64">
            <summary>
            Returns a UInt64 value from the stream.
            </summary>
            <returns>A UInt64 value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadUInt64Array">
            <summary>
            Returns an array of UInt64 values from the stream.
            </summary>
            <returns>An array of UInt64 values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadDouble">
            <summary>
            Returns a double value from the stream.
            </summary>
            <returns>A double value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadDoubleArray">
            <summary>
            Returns an array of double values from the stream.
            </summary>
            <returns>An array of double values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadTimeSpan">
            <summary>
            Returns a TimeSpan value from the stream.
            </summary>
            <returns>A double value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadTimeSpanArray">
            <summary>
            Returns an array of TimeSpan values from the stream.
            </summary>
            <returns>An array of TimeSpan values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadDateTime">
            <summary>
            Returns a DateTime value from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadDateTimeOffset">
            <summary>
            Returns a DateTimeOffset value from the stream.
            </summary>
            <returns>A DateTimeOffset value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadDateTimeArray">
            <summary>
            Returns an array of DateTime values from the stream.
            </summary>
            <returns>An array of DateTime values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadDateTimeOffsetArray">
            <summary>
            Returns an array of DateTimeOffset values from the stream.
            </summary>
            <returns>An array of DateTimeOffset values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadTimestamp">
            <summary>
            Returns a Timestamp value from the stream (seconds only).
            </summary>
            <remarks>This is a place-holder for a new concept which is not yet implemented.</remarks>
            <returns>A DateTime value (with whole seconds only).</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadTimestampTimeArray">
            <summary>
            Returns an array of Timestamp values from the stream.
            </summary>
            <remarks>This is a place-holder for a new concept which is not yet implemented.</remarks>
            <returns>An array of DateTime values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadGuid">
            <summary>
            Returns a Guid value from the stream.
            </summary>
            <returns>A Guid value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadGuidArray">
            <summary>
            Returns an array of Guid values from the stream.
            </summary>
            <returns>An array of Guid values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadField">
            <summary>
            Returns a field value from the stream.
            </summary>
            <returns>An object value holding a value (see FieldType.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadField(Gibraltar.Serialization.FieldType)">
            <summary>
            Returns a field value from the stream for the provided field type
            </summary>
            <param name="fieldType">The field type of the next field in the stream to read</param>
            <returns>An object with the value that was read.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadFieldArray">
            <summary>
            Returns an array of field values from the stream.
            </summary>
            <returns>An array of objects each holding a field value (see FieldType).</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadFieldType">
            <summary>
            Returns a FieldType enum value from the stream.
            </summary>
            <returns>A FieldType enum value</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadFieldTypeArray">
            <summary>
            Read an array of FieldType enum values from the stream.
            </summary>
            <returns>Returns an array of FieldType enum values</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadByte">
            <summary>
            Helper method to read a single byte from the underlying stream
            </summary>
            <remarks>
            NOTE: In DEBUG builds, this method will throw an exception if
            the a byte cannot be read (past end-of-file). Otherwise, it returns zero.
            </remarks>
            <returns>The next byte in the stream.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldReader.ReadStringDirect">
            <summary>
            Helper method to read a string from the underlying stream.
            
            NOTE: In DEBUG builds, this method will throw an exception if a
            valid string is not read completely.  Otherwise, it returns null.
            </summary>
            <returns>A string read with the expected encoding</returns>
        </member>
        <member name="T:Gibraltar.Serialization.FieldType">
            <summary>
            This is the set of data types that can be read/written using
            FieldReader/FieldWriter.
            </summary>
            <remarks>
            The enum starts at 1 to allow 0 to be clearly understood as unknown (and therefore fail)
            </remarks>
        </member>
        <member name="T:Gibraltar.Serialization.DateTimeEncoding">
            <summary>
            This is the set of encoding options for DateTime compression
            by FieldReader/FieldWriter (for FieldType.DateTime and elements
            of FieldType.DateTimeArray).
            <remarks>
            <para>Once these options are set, they should not be changed.  Extending
            with additional options should not be done without serious thought
            as to handling compatibility with prior versions of FieldReader!
            Enum values should never exceed 63 (encodes as single byte) without a
            a good reason.</para>
            <para>After the first four special cases, they must be added as
            Later/Earlier pairs (indicates sign bit for direction of offset so
            that unsigned encoding can be used for longer range before needing
            another byte to represent the value).  These encoding options take
            advantage of the opportunity to evenly divide the .NET Ticks by a
            larger clock resolution (eg. divide by 160,000 for 16ms resolution) used
            on typical platforms, to encode a smaller value and thus save bytes.</para>
            <para>The generic factor support is provided to allow for cases not
            anticipated at rollout, since new enum options can not be added without
            breaking older code.  Both SetFactor and SetReference cases expect another
            DateTime encoding to follow the value of Factor or Reference given (which
            could include the other Set... case and yet another DateTime encoding
            after that).</para>
            </remarks>
            </summary>
        </member>
        <member name="T:Gibraltar.Serialization.FieldWriter">
            <summary>
            Provides low-level compression of the basic data types we pass over the wire.
            
            This class produces a compressed stream of bytes to be consumed by FieldReader
            which will reinstate the original stream of basic data types.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.#ctor(System.IO.Stream,Gibraltar.Serialization.UniqueStringList,System.Int32,System.Int32)">
            <summary>
            Initialize a FieldWriter to write to the specified stream using
            the provided encoding for strings.
            </summary>
            <param name="stream">Stream to write data into</param>
            <param name="stringList">The cache of unique strings that have been previously written</param>
            <param name="majorVersion">Major version of the serialization protocol</param>
            <param name="minorVersion">Minor version of the serialization protocol</param>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.#ctor(System.IO.Stream)">
            <summary>
            Initialize a FieldWriter to write to the specified stream using
            the provided encoding for strings.
            </summary>
            <param name="stream">Stream to write data into</param>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.#ctor">
            <summary>
            Initialize a FieldWriter to write to a memory stream using
            the default encoding for strings.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.FieldWriter.Position">
            <summary>
            Returns the current position within the stream.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.FieldWriter.Length">
            <summary>
            Returns the length of the stream.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.FieldWriter.Strings">
            <summary>
            Returns the cache of unique string values that have been written
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Commit">
            <summary>
            Ensure that all pending state changes are committed.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Rollback">
            <summary>
            Rollback any pending state changes that have not been committed
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.Object)">
            <summary>
            Write an object to the stream as its serializable type
            </summary>
            <param name="value">The object (or boxed integral value) to write.</param>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.Object,Gibraltar.Serialization.FieldType)">
            <summary>
            Write an object to the stream as its serializable type
            </summary>
            <param name="value">The object (or boxed integral value) to write.</param>
            <param name="fieldType">The field type to write the value out as.</param>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.Boolean)">
            <summary>
            Write a bool to the stream.
            </summary>
            <returns>A bool value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.Boolean[])">
            <summary>
            Write an array of bool to the stream.
            </summary>
            <returns>An array of bool values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.String)">
            <summary>
            Write a string to the stream.
            <remarks>
            We optimize strings by maintaining a hash table of each unique string 
            we have seen.  Each string is sent with as an integer index into the table.
            When a new string is encountered, it's index is followed by the string value.
            </remarks>
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.String[])">
            <summary>
            Write an array of string to the stream.
            </summary>
            <returns>An array of string values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.Int32)">
            <summary>
            Stores a 32-bit signed value into the stream using 7-bit encoding.
            <remarks>
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            </remarks>
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.Int32[])">
            <summary>
            Write an array of Int32 to the stream.
            </summary>
            <returns>An array of Int32 values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.Int64)">
            <summary>
            Stores a 64-bit signed value into the stream using 7-bit encoding.
            <remarks>
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            </remarks>
            </summary>
            <param name="value">The Int64 value to encode.</param>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.Int64[])">
            <summary>
            Write an array of Int64 to the stream.
            </summary>
            <returns>An array of Int64 values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.UInt32)">
            <summary>
            Stores a 32-bit unsigned value into the stream using 7-bit encoding.
            <remarks>
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            </remarks>
            </summary>
            <param name="value">The UInt32 value to encode.</param>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.UInt32[])">
            <summary>
            Write an array of UInt32 to the stream.
            </summary>
            <returns>An array of UInt32 values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.UInt64)">
            <summary>
            Stores a 64-bit unsigned value into the stream using 7-bit encoding.
            <remarks>
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            There is a special optimization for UInt64 because after passing 8 7-bit values we know that
            there can only be 8 bits left (since the original data was 64 bits long).  So, for that last byte,
            we can use all 8 bits.  This means that the worst case size for a double is 9 bytes versus
            10 which would otherwise sometimes be necessary to pass that very last bit.
            </remarks>
            </summary>
            <param name="value">The UInt64 value to encode.</param>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.WriteLength(System.Int64)">
            <summary>
            Efficiently encodes a packet length as a variable length byte array using 7-bit encoding
            </summary>
            <param name="length">Packet length to be encoded</param>
            <returns>Returns a MemoryStream containing the encoded length</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.UInt64[])">
            <summary>
            Write an array of UInt64 to the stream.
            </summary>
            <returns>An array of UInt64 values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.Double)">
            <summary>
            Stores a 64-bit double value int the stream in the fewest bytes possible.
            <remarks>
            For many common numbers the bit representation of a double includes lots of
            trailing zeros.  This creates an opportunity to optimize these values in a
            similar way to how we optimize UInt64.  The difference is just that in this case
            we are interested in the high-order bits whereas with UInt64 we are interested
            in the low order bits.
            </remarks>
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.Double[])">
            <summary>
            Write an array of double to the stream.
            </summary>
            <returns>An array of double values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.TimeSpan)">
            <summary>
            Stores a TimeSpan value to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.TimeSpan[])">
            <summary>
            Write an array of TimeSpan to the stream.
            </summary>
            <returns>An array of TimeSpan values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.DateTime)">
            <summary>
            Stores a DateTime value to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.DateTimeOffset)">
            <summary>
            Stores a DateTime value to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.DateTime[])">
            <summary>
            Write an array of DateTime to the stream.
            </summary>
            <returns>An array of DateTime values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.DateTimeOffset[])">
            <summary>
            Write an array of DateTimeOffset to the stream.
            </summary>
            <returns>An array of DateTimeOffset values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.WriteTimestamp(System.DateTime)">
            <summary>
            Stores a DateTime value to the stream
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.WriteTimestamp(System.DateTime[])">
            <summary>
            Write an array of Timestamp to the stream.
            </summary>
            <returns>An array of DateTime values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.Guid)">
            <summary>
            Stores a 128-bit Guid value to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.Write(System.Guid[])">
            <summary>
            Write an array of Guid to the stream.
            </summary>
            <returns>An array of Guid values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.ToArray">
            <summary>
            This is a helper method for unit testing.  It only works for the case
            the underlying stream is a MemoryStream.
            </summary>
            <returns>The stream data as a byte array</returns>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.WriteByte(System.Byte)">
            <summary>
            Helper method to write a single byte to the underlying stream.
            </summary>
            <param name="value">byte to be written</param>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.WriteBytes(System.Byte[])">
            <summary>
            Helper method to write a single byte to the underlying stream.
            </summary>
            <param name="values">byte array to be written</param>
        </member>
        <member name="M:Gibraltar.Serialization.FieldWriter.WriteString(System.String)">
            <summary>
            Helper method to write a string to the underlying stream.
            </summary>
            <param name="value">String to be written</param>
        </member>
        <member name="T:Gibraltar.Serialization.FileStorageSummary">
            <summary>
            Consolidates storage summary information for all packet types and fragments in a session
            </summary>
        </member>
        <member name="F:Gibraltar.Serialization.FileStorageSummary.PacketList">
            <summary>
            List of records providing storage summary info about each packet type in the session fragments
            Note that PacketSize is calculated by scaling the uncompressed packet sizes to their portion of TotalRawFileSize
            </summary>
        </member>
        <member name="F:Gibraltar.Serialization.FileStorageSummary.FragmentList">
            <summary>
            List of records providing storage summary info about each fragment associated with this session.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.FileStorageSummary.TotalRawFileSize">
            <summary>
            Returns the total number of bytes for all fragments
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.FileStorageSummary.TotalPacketSize">
            <summary>
            Returns the total number of bytes for all uncompressed packets
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FileStorageSummary.Merge(System.Collections.Generic.List{Gibraltar.Serialization.PacketTypeStorageSummary},Gibraltar.Serialization.FragmentStorageSummary)">
            <summary>
            Merge data from one session fragment
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FileStorageSummary.Summarize">
            <summary>
            Summarize the data about fragments and packet types
            </summary>
        </member>
        <member name="T:Gibraltar.Serialization.FragmentStorageSummary">
            <summary>
            Records a summary of size for one specific session fragment
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.FragmentStorageSummary.StartTime">
            <summary>
            Start time of fragment
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.FragmentStorageSummary.EndTime">
            <summary>
            End time of fragment
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.FragmentStorageSummary.FragmentSize">
            <summary>
            Number of bytes in the fragment
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FragmentStorageSummary.#ctor(System.DateTimeOffset,System.DateTimeOffset,System.Int64)">
            <summary>
            Create a storage summary instance for a particular session fragment
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.FragmentStorageSummary.CompareTo(Gibraltar.Serialization.FragmentStorageSummary)">
            <summary>
            Compare two FragmentStorageSummary for sorting purposes
            </summary>
        </member>
        <member name="T:Gibraltar.Serialization.PacketTypeStorageSummary">
            <summary>
            Records a summary of packet count and aggregate size for one specific packet type
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.PacketTypeStorageSummary.QualifiedTypeName">
            <summary>
            Qualified type name from the related PacketDefinition
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.PacketTypeStorageSummary.TypeName">
            <summary>
            Short type name from the related PacketDefinition
            </summary>
            <remarks>
            In particular, there can be many instances of EventMetricSamplePacket that
            vary only by QualifiedTypeName
            </remarks>
        </member>
        <member name="P:Gibraltar.Serialization.PacketTypeStorageSummary.PacketCount">
            <summary>
            Number of packets of this type that were read
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.PacketTypeStorageSummary.PacketSize">
            <summary>
            Total number of bytes of this packet type read from the file
            </summary>
            <remarks>
            Packet sizes are collected as uncompressed bytes.  But once all fragments have been read,
            the FileStorageSummary.Summarize method is called from Session to scale all the PacketSize
            values such that they represent compressed bytes.
            </remarks>
        </member>
        <member name="P:Gibraltar.Serialization.PacketTypeStorageSummary.AveragePacketSize">
            <summary>
            Returns the average number of bytes per packet (rounded up)
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketTypeStorageSummary.#ctor(Gibraltar.Serialization.PacketDefinition)">
            <summary>
            Create a storage summary instance referencing a particualr PacketDefinition
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketTypeStorageSummary.CompareTo(System.Object)">
            <summary>
            Default sort is descending by PacketCount within descending PacketSize
            </summary>
        </member>
        <member name="T:Gibraltar.Serialization.GenericPacket">
            <summary>
            This is the class returned by PacketReader when an unknown packet type
            is read from the input stream.  </summary>
            <remarks>This class is designed to allow the
            underlying data to be serialized back out just as it was read.  This
            handles the use case of an old 
            </remarks>
        </member>
        <member name="M:Gibraltar.Serialization.GenericPacket.#ctor(Gibraltar.Serialization.PacketDefinition,Gibraltar.Serialization.IFieldReader)">
            <summary>
            Read any packet based solely on its PacketDefinition
            </summary>
            <param name="definition">PacketDefinition describing the next packet in the stream</param>
            <param name="reader">Data stream to be read</param>
        </member>
        <member name="M:Gibraltar.Serialization.GenericPacket.Gibraltar#Serialization#IPacket#GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.GenericPacket.Gibraltar#Serialization#IPacket#GetPacketDefinition">
            <summary>
            The key idea of a GenericPacket is that it allows an unknown packet type to be read and rewritten
            such that it can subsequently be read properly when the appropriate IPacketFactory is registered.
            </summary>
            <returns>The original PacketDefinition read from the input stream</returns>
        </member>
        <member name="M:Gibraltar.Serialization.GenericPacket.Gibraltar#Serialization#IPacket#WriteFields(Gibraltar.Serialization.PacketDefinition,Gibraltar.Serialization.SerializedPacket)">
            <summary>
            Write out all of the fields for the current packet
            </summary>
            <param name="definition">The definition that was used to persist the packet.</param>
            <param name="packet">The serialized packet to populate with data</param>
        </member>
        <member name="M:Gibraltar.Serialization.GenericPacket.Gibraltar#Serialization#IPacket#ReadFields(Gibraltar.Serialization.PacketDefinition,Gibraltar.Serialization.SerializedPacket)">
            <summary>
            Read back the field values for the current packet.
            </summary>
            <param name="definition">The definition that was used to persist the packet.</param>
            <param name="packet">The serialized packet to read data from</param>
        </member>
        <member name="T:Gibraltar.Serialization.GibraltarSerializationException">
            <summary>
            This is a base class for any new serialization Exception types we define and for generic exceptions
            generated in Serialization.
            </summary>
            <remarks>Any generation of an ApplicationException in Serialization should probably use this class instead.</remarks>
        </member>
        <member name="M:Gibraltar.Serialization.GibraltarSerializationException.#ctor">
            <summary>
            Initializes a new instance of the GibraltarSerializationException class.
            </summary>
            <remarks>This contructor initializes the Message property of the new instance to a system-supplied
            message that describes the error and takes into account the current system culture.
            For more information, see the base constructor in Exception.</remarks>
        </member>
        <member name="M:Gibraltar.Serialization.GibraltarSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the GibraltarSerializationException class with a specified error message.
            </summary>
            <param name="message">The error message string.</param>
            <remarks>This constructor initializes the Message property of the new instance using the
            message parameter.  The InnerException property is left as a null reference.
            For more information, see the base contructor in Exception.</remarks>
        </member>
        <member name="M:Gibraltar.Serialization.GibraltarSerializationException.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the GibraltarSerializationException class with a specified error message.
            </summary>
            <param name="message">The error message string.</param>
            <param name="streamFailed">Indicates if the entire stream is now considered corrupt and no further packets can be retrieved.</param>
            <remarks>This constructor initializes the Message property of the new instance using the
            message parameter.  The InnerException property is left as a null reference.
            For more information, see the base contructor in Exception.</remarks>
        </member>
        <member name="M:Gibraltar.Serialization.GibraltarSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the GibraltarSerializationException class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message string.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a
            null reference if no inner exception is specified.</param>
            <remarks>An exception that is thrown as a direct result of a previous exception should include
            a reference to the previous exception in the innerException parameter.
            For more information, see the base constructor in Exception.</remarks>
        </member>
        <member name="M:Gibraltar.Serialization.GibraltarSerializationException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the GibraltarSerializationException class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message string.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a
            null reference if no inner exception is specified.</param>
            <param name="streamFailed">Indicates if the entire stream is now considered corrupt and no further packets can be retrieved.</param>
            <remarks>An exception that is thrown as a direct result of a previous exception should include
            a reference to the previous exception in the innerException parameter.
            For more information, see the base constructor in Exception.</remarks>
        </member>
        <member name="P:Gibraltar.Serialization.GibraltarSerializationException.StreamFailed">
            <summary>
            Indicates if the exception is a stream error, so no further packets can be serialized
            </summary>
        </member>
        <member name="T:Gibraltar.Serialization.ICachedPacket">
            <summary>Implemented on invariant packets that can be cached</summary>
            <remarks>
            This interface extends IPacket to handle packets that are referenced
            by multiple packets and should only be serialized once.
            </remarks>
        </member>
        <member name="P:Gibraltar.Serialization.ICachedPacket.ID">
            <summary>
            The unique Id of the packet
            </summary>
        </member>
        <member name="T:Gibraltar.Serialization.IDynamicPacket">
            <remarks>
            Most packets have a static structure of fields that is the same for all
            packet instances.  But some packets are dynamic in that the number and
            type of fields can vary across different packet instances.  A great 
            example of this is EventMetricDefinitionPacket.  Each event metric
            has a different set of fields.  So, in terms of caching PacketDefinition
            objects, each instance can be thought of as a dynamic type.  On the
            other hand, only a single PacketFactory need be registered that should
            be invoked for all dynamic packets of that base type.
            </remarks>
        </member>
        <member name="P:Gibraltar.Serialization.IDynamicPacket.DynamicTypeName">
            <summary>
            The consistent, unique type name for the packet
            </summary>
        </member>
        <member name="T:Gibraltar.Serialization.IFieldReader">
            <summary>
            Standard interface for objects that can read individual fields
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.IFieldReader.Strings">
            <summary>
            Returns the cache of unique string values that have been written
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.PeekUInt64">
            <summary>
            Returns a UInt64 value from the stream without repositioning the stream
            </summary>
            <returns>A UInt64 value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadBool">
            <summary>
            Returns a bool value from the stream.
            </summary>
            <returns>A bool value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadBoolArray">
            <summary>
            Returns an array of bool values from the stream.
            </summary>
            <returns>An array bool values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadString">
            <summary>
            Read a string from the stream.
            <remarks>
            We optimize strings by maintaining a hash table of each unique string 
            we have seen.  Each string is sent with as an integer index into the table.
            When a new string is encountered, it's index is followed by the string value.
            </remarks>
            </summary>
            <returns>Returns the string</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadStringArray">
            <summary>
            Read an array of strings from the stream.
            </summary>
            <returns>Returns an array of string values</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadInt32">
            <summary>
            Returns an Int32 value from the stream.
            </summary>
            <returns>An Int32 value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadInt32Array">
            <summary>
            Returns an array of Int32 values from the stream.
            </summary>
            <returns>An array of Int32 values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadInt64">
            <summary>
            Returns an Int64 value from the stream.
            </summary>
            <returns>An Int64 value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadInt64Array">
            <summary>
            Returns an array of Int64 values from the stream.
            </summary>
            <returns>An array of Int64 values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadUInt32">
            <summary>
            Returns a UInt32 value from the stream.
            </summary>
            <returns>A UInt32 value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadUInt32Array">
            <summary>
            Returns an array of UInt32 values from the stream.
            </summary>
            <returns>An array of UInt32 values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadUInt64">
            <summary>
            Returns a UInt64 value from the stream.
            </summary>
            <returns>A UInt64 value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadUInt64Array">
            <summary>
            Returns an array of UInt64 values from the stream.
            </summary>
            <returns>An array of UInt64 values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadDouble">
            <summary>
            Returns a double value from the stream.
            </summary>
            <returns>A double value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadDoubleArray">
            <summary>
            Returns an array of double values from the stream.
            </summary>
            <returns>An array of double values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadTimeSpan">
            <summary>
            Returns a TimeSpan value from the stream.
            </summary>
            <returns>A TimeSpan value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadTimeSpanArray">
            <summary>
            Returns an array of TimeSpan values from the stream.
            </summary>
            <returns>An array of TimeSpan values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadDateTime">
            <summary>
            Returns a DateTime value from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadDateTimeArray">
            <summary>
            Returns an array of DateTime values from the stream.
            </summary>
            <returns>An array of DateTime values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadDateTimeOffset">
            <summary>
            Returns a DateTimeOffset value from the stream.
            </summary>
            <returns>A DateTimeOffset value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadDateTimeOffsetArray">
            <summary>
            Returns an array of DateTimeOffset values from the stream.
            </summary>
            <returns>An array of DateTimeOffset values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadGuid">
            <summary>
            Returns a Guid value from the stream.
            </summary>
            <returns>A Guid value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadGuidArray">
            <summary>
            Returns an array of Guid values from the stream.
            </summary>
            <returns>An array of Guid values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadField">
            <summary>
            Returns a field value from the stream that was written as an object
            </summary>
            <returns>An object value holding a value (see FieldType).</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadField(Gibraltar.Serialization.FieldType)">
            <summary>
            Returns a field value from the stream for the specified field type
            </summary>
            <param name="fieldType">The field type of the next field</param>
            <returns>An object value holding a value (see FieldType).</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldReader.ReadFieldArray">
            <summary>
            Returns an array of field values from the stream.
            </summary>
            <returns>An array of objects each holding a value (see FieldType).</returns>
        </member>
        <member name="T:Gibraltar.Serialization.IFieldWriter">
            <summary>
            Standard interface for objects that can write individual serialized fields
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.IFieldWriter.Position">
            <summary>
            Returns the current position within the stream.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.IFieldWriter.Length">
            <summary>
            Returns the length of the stream.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.IFieldWriter.Strings">
            <summary>
            Returns the cache of unique string values tht have been written
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Commit">
            <summary>
            Ensure that all pending state changes are committed.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Rollback">
            <summary>
            Rollback any pending state changes that have not been committed
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.Object)">
            <summary>
            Write an object to the stream as its serializable type
            </summary>
            <param name="value">The object (or boxed integral value) to write.</param>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.Object,Gibraltar.Serialization.FieldType)">
            <summary>
            Write an object to the stream as its serializable type
            </summary>
            <param name="value">The object (or boxed integral value) to write.</param>
            <param name="fieldType">The field type to write the value out as.</param>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.Boolean)">
            <summary>
            Write a bool to the stream.
            </summary>
            <returns>A bool value.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.Boolean[])">
            <summary>
            Write an array of bool to the stream.
            </summary>
            <returns>An array of bool values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.String)">
            <summary>
            Write a string to the stream.
            <remarks>
            We optimize strings by maintaining a hash table of each unique string 
            we have seen.  Each string is sent with as an integer index into the table.
            When a new string is encountered, it's index is followed by the string value.
            </remarks>
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.String[])">
            <summary>
            Write an array of string to the stream.
            </summary>
            <returns>An array of string values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.Int32)">
            <summary>
            Stores a 32-bit signed value into the stream using 7-bit encoding.
            <remarks>
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            </remarks>
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.Int32[])">
            <summary>
            Write an array of Int32 to the stream.
            </summary>
            <returns>An array of Int32 values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.Int64)">
            <summary>
            Stores a 64-bit signed value into the stream using 7-bit encoding.
            <remarks>
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            </remarks>
            </summary>
            <param name="value">The Int64 value to encode.</param>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.Int64[])">
            <summary>
            Write an array of Int64 to the stream.
            </summary>
            <returns>An array of Int64 values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.UInt32)">
            <summary>
            Stores a 32-bit unsigned value into the stream using 7-bit encoding.
            <remarks>
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            </remarks>
            </summary>
            <param name="value">The UInt32 value to encode.</param>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.UInt32[])">
            <summary>
            Write an array of UInt32 to the stream.
            </summary>
            <returns>An array of UInt32 values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.UInt64)">
            <summary>
            Stores a 64-bit unsigned value into the stream using 7-bit encoding.
            <remarks>
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            There is a special optimization for UInt64 because after passing 8 7-bit values we know that
            there can only be 8 bits left (since the original data was 64 bits long).  So, for that last byte,
            we can use all 8 bits.  This means that the worst case size for a double is 9 bytes versus
            10 which would otherwise sometimes be necessary to pass that very last bit.
            </remarks>
            </summary>
            <param name="value">The UInt64 value to encode.</param>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.UInt64[])">
            <summary>
            Write an array of UInt64 to the stream.
            </summary>
            <returns>An array of UInt64 values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.Double)">
            <summary>
            Stores a 64-bit double value int the stream in the fewest bytes possible.
            <remarks>
            For many common numbers the bit representation of a double includes lots of
            trailing zeros.  This creates an opportunity to optimize these values in a
            similar way to how we optimize UInt64.  The difference is just that in this case
            we are interested in the high-order bits whereas with UInt64 we are interested
            in the low order bits.
            </remarks>
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.Double[])">
            <summary>
            Write an array of double to the stream.
            </summary>
            <returns>An array of double values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.TimeSpan)">
            <summary>
            Stores a TimeSpan value to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.TimeSpan[])">
            <summary>
            Write an array of TimeSpan to the stream.
            </summary>
            <returns>An array of TimeSpan values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.DateTime)">
            <summary>
            Stores a DateTime value to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.DateTime[])">
            <summary>
            Write an array of DateTime to the stream.
            </summary>
            <returns>An array of DateTime values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.DateTimeOffset)">
            <summary>
            Stores a DateTime value to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.DateTimeOffset[])">
            <summary>
            Write an array of DateTime to the stream.
            </summary>
            <returns>An array of DateTime values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.Guid)">
            <summary>
            Stores a 128-bit Guid value to the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.Write(System.Guid[])">
            <summary>
            Write an array of Guid to the stream.
            </summary>
            <returns>An array of Guid values.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IFieldWriter.ToArray">
            <summary>
            This is a helper method for unit testing.  It only works for the case
            the underlying stream is a MemoryStream.
            </summary>
            <returns>The stream data as a byte array</returns>
        </member>
        <member name="T:Gibraltar.Serialization.Internal.ArrayEncoder`1">
            <summary>
            This helper class implements an enhanced run length encoding strategy
            to compress arrays.  It's enhanced in that it has an optimization for
            the case of a sequence of unique values.  The length of the sequence
            is written as a negative value.  This avoind the waste of preceding each
            value with a runlength of 1 as would occur in classic RLE encoding.
            </summary>
            <typeparam name="T">Type of value contained in the array</typeparam>
        </member>
        <member name="M:Gibraltar.Serialization.Internal.ArrayEncoder`1.ReadValue(Gibraltar.Serialization.IFieldReader)">
            <summary>
            This helper method uses reflection to invoke the proper method to read
            a value from the stream of type T.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.Internal.ArrayEncoder`1.WriteValue(Gibraltar.Serialization.IFieldWriter,`0)">
            <summary>
            This helper method uses reflection to invoke the proper method to write
            a value to the stream of type T.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.Internal.ArrayEncoder`1.Read(Gibraltar.Serialization.IFieldReader)">
            <summary>
            Reads an array of type T from the stream.
            </summary>
            <param name="reader">Data stream to read</param>
            <returns>Array of type T</returns>
        </member>
        <member name="M:Gibraltar.Serialization.Internal.ArrayEncoder`1.Write(`0[],Gibraltar.Serialization.IFieldWriter)">
            <summary>
            Writes an array of type T to the stream.
            </summary>
            <param name="array">Data to be written</param>
            <param name="writer">Stream to write the data into</param>
        </member>
        <member name="M:Gibraltar.Serialization.Internal.ArrayEncoder`1.WriteRun(`0[],Gibraltar.Serialization.IFieldWriter,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Helper method to write out a single run (either repating or unique values)
            </summary>
        </member>
        <member name="T:Gibraltar.Serialization.Internal.GenericPacketFactory">
            <summary>
            Helper class used by PacketFactory to wrapper the creation of GenericPacket
            </summary>
        </member>
        <member name="T:Gibraltar.Serialization.Internal.PacketFactory">
            <summary>
            This helper class is used by PacketReader to manage the list of IPacketFactory
            classes used to deserialize a stream of packets.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.Internal.PacketFactory.#ctor">
            <summary>
            Creates an empty list of IPacketFactory objects.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.Internal.PacketFactory.RegisterType(System.Type)">
            <summary>
            Registers a SimplePacketFactory wrappering the specified type.
            </summary>
            <param name="type">Type must implement IPacket.</param>
        </member>
        <member name="M:Gibraltar.Serialization.Internal.PacketFactory.RegisterFactory(System.String,Gibraltar.Serialization.IPacketFactory)">
            <summary>
            Associates the specified IPacketFactory with a type name
            </summary>
            <param name="typeName">Should refer to a type that implements IPacket</param>
            <param name="factory">IPacketFactory class used to </param>
        </member>
        <member name="M:Gibraltar.Serialization.Internal.PacketFactory.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers a SimplePacketFactory for each IPacket in an assembly
            </summary>
            <param name="assembly">Assembly to be searched for IPacket implementations</param>
        </member>
        <member name="T:Gibraltar.Serialization.Internal.SimplePacketFactory">
            <summary>
            SimplePacketFactory is the IPacketFactory used when an IPacket
            implementation knows how to use when a type
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.Internal.SimplePacketFactory.#ctor(System.Type)">
            <summary>
            Creates an IPacketFactory wrappering a type that implements IPacket.
            </summary>
            <param name="type">The type must implement IPacket and provide a default constructor</param>
        </member>
        <member name="P:Gibraltar.Serialization.Internal.SimplePacketFactory.IsValid">
            <summary>
            This method is used by caller to detect if the constructor failed.
            This is necessary because we suppress exceptions in release builds.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.Internal.SimplePacketFactory.CreatePacket(Gibraltar.Serialization.PacketDefinition,Gibraltar.Serialization.IFieldReader)">
            <summary>
            This is the method that is invoked on an IPacketFactory to create an IPacket
            from the data in an IFieldReader given a specified PacketDefinition.
            </summary>
            <param name="definition">Definition of the fields expected in the next packet</param>
            <param name="reader">Data stream to be read</param>
            <returns>An IPacket corresponding to the PacketDefinition and the stream data</returns>
        </member>
        <member name="T:Gibraltar.Serialization.IPacket">
            <summary>
            This is the key interface objects implement to be serializable by Gibraltar.
            </summary>
            <remarks>
            To properly implement IPacket the class should also provide a default constructor.
            This is needed to be compatible with the SimplePacketFactory implementation of IPacketFactory.
            </remarks>
        </member>
        <member name="M:Gibraltar.Serialization.IPacket.GetRequiredPackets">
            <summary>
            The list of packets that this packet depends on.
            </summary>
            <returns>An array of IPackets, or null if there are no dependencies.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.IPacket.GetPacketDefinition">
            <summary>
            Get a new, populated definition for this packet.
            </summary>
            <returns>A new Packet Definition object</returns>
            <remarks>Once a definition is cached by the packet writer it won't be requested again.
            Packet Definitions must be invariant for an entire data stream.</remarks>
        </member>
        <member name="M:Gibraltar.Serialization.IPacket.WriteFields(Gibraltar.Serialization.PacketDefinition,Gibraltar.Serialization.SerializedPacket)">
            <summary>
            Write out all of the fields for the current packet
            </summary>
            <param name="definition">The definition that was used to persist the packet.</param>
            <param name="packet">The serialized packet to populate with data</param>
        </member>
        <member name="M:Gibraltar.Serialization.IPacket.ReadFields(Gibraltar.Serialization.PacketDefinition,Gibraltar.Serialization.SerializedPacket)">
            <summary>
            Read back the field values for the current packet.
            </summary>
            <param name="definition">The definition that was used to persist the packet.</param>
            <param name="packet">The serialized packet to read data from</param>
        </member>
        <member name="T:Gibraltar.Serialization.IPacketFactory">
            <summary>
            Defines the interface necessary for a packet factory to be
            registered with IPacketReader.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.IPacketFactory.CreatePacket(Gibraltar.Serialization.PacketDefinition,Gibraltar.Serialization.IFieldReader)">
            <summary>
            This is the method that is invoked on an IPacketFactory to create an IPacket
            from the data in an IFieldReader given a specified PacketDefinition.
            </summary>
            <param name="definition">Definition of the fields expected in the next packet</param>
            <param name="reader">Data stream to be read</param>
            <returns>An IPacket corresponding to the PacketDefinition and the stream data</returns>
        </member>
        <member name="P:Gibraltar.Serialization.IPacketReader.Position">
            <summary>
            Returns the current position within the stream.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.IPacketReader.Length">
            <summary>
            Returns the length of the stream.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.IPacketReader.Read">
            <summary>
            Read and return the next IPacket from the stream
            </summary>
        </member>
        <member name="T:Gibraltar.Serialization.IPacketWriter">
            <summary>
            Implemented to support writing packets
            </summary>
            <remarks>Having everything use an interface allows us to support NMOCK</remarks>
        </member>
        <member name="P:Gibraltar.Serialization.IPacketWriter.Position">
            <summary>
            Returns the current position within the stream.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.IPacketWriter.Length">
            <summary>
            Returns the length of the stream.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.IPacketWriter.Write(Gibraltar.Serialization.IPacket)">
            <summary>
            Write the data needed to serialize the state of the packet
            </summary>
            <param name="packet">Object to be serialized, must implement IPacket</param>
        </member>
        <member name="T:Gibraltar.Serialization.PacketDefinition">
            <summary>
            Holds the metadata needed to correctly interpret the stream of fields associated with a serialized packet
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketDefinition.CreatePacketDefinition(Gibraltar.Serialization.IPacket)">
            <summary>
            Create a PacketDefinition describing the fields and serialization version information for the
            IPacket object passed by the caller.
            </summary>
            <param name="packet">IPacket object to generate a PacketDefinition for</param>
            <returns>PacketDefinition describing fields to be serialized, including nested types</returns>
        </member>
        <member name="M:Gibraltar.Serialization.PacketDefinition.ReadPacketDefinition(Gibraltar.Serialization.IFieldReader)">
            <summary>
            Returns a PacketDefinition from the stream (including nested PacketDefinition
            objects for cases in which an IPacket is subclassed and has serialized state
            at multiple levels).
            </summary>
            <param name="reader">Stream to read data from</param>
            <returns>PacketDefinition (including nested definitions for subclassed packets)</returns>
        </member>
        <member name="P:Gibraltar.Serialization.PacketDefinition.CanHaveRequiredPackets">
            <summary>
            Indicates if this level of the definition can have required packets.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.PacketDefinition.SubPackets">
            <summary>
            This list allows for the possiblity of a Packet that aggregates other sub-packets
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketDefinition.GetSerializableType(System.Type)">
            <summary>
            Get the lossless equivalent type for serialization
            </summary>
            <param name="type">A .NET type to serialize</param>
            <returns>The Field Type that will provide lossless serialization</returns>
            <remarks>If no lossless type is found, an exception will be thrown.</remarks>
        </member>
        <member name="M:Gibraltar.Serialization.PacketDefinition.TryGetSerializableType(System.Type,Gibraltar.Serialization.FieldType@)">
            <summary>
            Get the lossless equivalent type for serialization
            </summary>
            <param name="type">A .NET type to serialize</param>
            <param name="bestType">The optimal field type for the provided .NET type, or 0 if none can be determined.</param>
            <returns>A boolean indicating that no matching type was found.</returns>
            <remarks>No exception is raised if no matching type can be found, instead the best type is set to zero (invalid)
            and false is returned.</remarks>
        </member>
        <member name="M:Gibraltar.Serialization.PacketDefinition.WriteFields(Gibraltar.Serialization.IPacket,Gibraltar.Serialization.IFieldWriter)">
            <summary>
            Request the packet object write out all of its fields.
            </summary>
            <param name="packet"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Gibraltar.Serialization.PacketDefinition.Equals(Gibraltar.Serialization.PacketDefinition)">
            <summary>
            Compare this PacketDefinition to another to verify that they are equivalent
            for purposes of order-dependant field deserialization.
            </summary>
        </member>
        <member name="T:Gibraltar.Serialization.PacketDefinitionList">
            <summary>
            Helper class used by PacketRead and PacketWriter to maintain a
            cache of PacketDefinition instances for used IPacket types
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketDefinitionList.#ctor">
            <summary>
            Returns an empty list.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.PacketDefinitionList.Count">
            <summary>
            Gets the number of elements in the list.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.PacketDefinitionList.Item(System.Int32)">
            <summary>
            Gets a particular item from the list.
            </summary>
            <param name="index">Zero-based index of the desired element</param>
            <returns>Returns a PacketDefinition if a valid index is requested, otherwise throws an exception.</returns>
        </member>
        <member name="M:Gibraltar.Serialization.PacketDefinitionList.IndexOf(Gibraltar.Serialization.IPacket)">
            <summary>
            Gets the index of the corresponding PacketDefinition, if cached.
            Otherwise, returns -1.
            </summary>
            <param name="packet">IPacket object for which a PacketDefinition may be cached</param>
        </member>
        <member name="M:Gibraltar.Serialization.PacketDefinitionList.IndexOf(System.String)">
            <summary>
            Gets the index of the corresponding PacketDefinition, if cached.
            Otherwise, returns -1.
            </summary>
            <param name="qualifiedTypeName">Type name of the corresponding IPacket object for which a PacketDefinition may be cached</param>
        </member>
        <member name="M:Gibraltar.Serialization.PacketDefinitionList.Add(Gibraltar.Serialization.PacketDefinition)">
            <summary>
            Adds a PacketDefinition to the list.
            </summary>
            <param name="item">PacketDefinition to add</param>
            <returns>
            Returns the index of the newly added item.
            If a PacketDefinition for this type has already been added, an exception is raised.
            </returns>
        </member>
        <member name="M:Gibraltar.Serialization.PacketDefinitionList.Commit">
            <summary>
            This method is called after a packet is successfully written to "lock-in"
            any changes to state data.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketDefinitionList.Rollback">
            <summary>
            This method is called if a packet write fails to undo any changes to
            state data that will not be available to the IPacketReader reading
            the stream.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketDefinitionList.System#Collections#Generic#IEnumerable{Gibraltar#Serialization#PacketDefinition}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Gibraltar.Serialization.PacketDefinitionList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Gibraltar.Serialization.PacketManager">
            <summary>
            Efficiently manage the deserialization of log packets.
            </summary>
            <remarks>
            The idea is that PacketManager will extract and deserialize a sequence of packets from an sequence of buffers.
            
            This class uses a double-buffering strategy that allows efficient reading of a file with a minimum of
            superfluous object allocation or memory copying.
            </remarks>
        </member>
        <member name="M:Gibraltar.Serialization.PacketManager.#ctor(System.IO.Stream)">
            <summary>
            Bind to a stream to of data from which a sequence of packets can be read.
            </summary>
            <remarks>
            This class is intended for reading session data from a file.  The GetPacketStream method will
            "pull" the relevant data from the stream to complete each request.  Use PacketManagerAsync for
            reading packets from the network where data must be pushed in from the network.
            </remarks>
        </member>
        <member name="M:Gibraltar.Serialization.PacketManager.FetchBuffer(Gibraltar.Serialization.PacketManagerBase.Buffer)">
            <summary>
            Read another buffer of data to be deserialized into packets
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketManager.SwapBuffers">
            <summary>
            Swap the buffers we use for double-buffering stream data.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketManager.GetNextPacket">
            <summary>
            Get the next packet from the stream
            </summary>
            <returns>If another packet exists, return a MemoryStream to the packet data.  Return null at end-of-file.</returns>
        </member>
        <member name="T:Gibraltar.Serialization.PacketManagerAsync">
            <summary>
            Efficiently manage the deserialization of log packets with asynchronous reading of buffers
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketManagerAsync.#ctor(System.IO.Stream)">
            <summary>
            TBD: Need to integrate optimized version of PipeStream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Gibraltar.Serialization.PacketManagerAsync.GetNextPacket">
            <summary>
            Get the next packet from the stream
            </summary>
            <returns>Returns a Packet or null if a Packet is not available</returns>
        </member>
        <member name="T:Gibraltar.Serialization.PacketManagerBase">
            <summary>
            Efficiently manage the deserialization of log packets from a sequence of buffers.
            </summary>
            <remarks>
            Gibraltar session files are large and complex.  Reading them fast is important to user satisfaction
            -- particularly the time to open a session in Gibraltar Analyst. Sessions are read from a stream in
            a series of buffers.  Each buffer contains some number of packets. This base class provides common
            infrastructure to support higher-level concrete classes to support synchronous and asynchronous 
            reading of buffers.
            </remarks>
        </member>
        <member name="T:Gibraltar.Serialization.PacketManagerBase.Buffer">
            <summary>
            Helper class for PacketManager to provide needed operations on a single buffer
            </summary>
            <remarks>
            This class addresses the three key variants that can occur when trying to read a sequence
            of variable length packets from a sequence of buffers:
            
            <para><pre>
            1. Packet is contained entirely in one buffer (simple, nominal case)
            2. Packet length is within current buffer but data extends into one or more subsequent buffers
            3. The packet length itself extends into the next buffer
            </pre></para>
            </remarks>
        </member>
        <member name="F:Gibraltar.Serialization.PacketManagerBase.Buffer.BufferSize">
            <summary>
            Initial size of buffer, which may be expended in multiples of this size
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.PacketManagerBase.Buffer.DataBytes">
            <summary>
            Actual byte array holding buffer data
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.PacketManagerBase.Buffer.Length">
            <summary>
            Logical length of buffer (may be less than physical length of DataBytes)
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.PacketManagerBase.Buffer.Position">
            <summary>
            Current index position within DataBytes
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketManagerBase.Buffer.#ctor">
            <summary>
            Initializes a new, empty Buffer of the appropriate default size
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketManagerBase.Buffer.Reset">
            <summary>
            Resets this Buffer to be logically empty
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketManagerBase.Buffer.ExpandIfNeeded(System.Int32)">
            <summary>
            Destructively expands the size of this buffer.
            Note that existing data is lost if the buffer is expanded
            </summary>
            <remarks>
            If this was a generic class, we'd include an option to retain
            the existing data. But, in fact, this is a very specialized
            class and this method is only used in the specific circumstance
            of preparing a Buffer to receive packet data copied from other 
            buffers. Therefore, we have no need for retaining existing data.
            </remarks>
        </member>
        <member name="M:Gibraltar.Serialization.PacketManagerBase.Buffer.IsEmpty">
            <summary>
            Boolean indicating whether this Buffer is logically empty
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketManagerBase.Buffer.BytesAvailable">
            <summary>
            Returns the number of number of remaining bytes in the buffer.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.PacketManagerBase.Buffer.PrependToNextBuffer">
            <summary>
            Boolean that is only true if we have a few stray bytes at the end of
            this Buffer that must be prepended to the next logical buffer to be
            able to even deserialize the length of the next packet.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.PacketManagerBase.Buffer.NeededFromNextBuffer">
            <summary>
            Integer value indicating the number of bytes needed from the next Buffer
            to complete the next Packet.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketManagerBase.Buffer.GetPacketStream">
            <summary>
            Read the length of the next packet and return a MemoryStream for the next packet, if possible.
            Otherwise, return null and set flags to indicate what must happen next.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketManagerBase.Buffer.GetPacketStream(System.Int32)">
            <summary>
            Return a MemoryStream for the next packet assuming a valid packet length has already been read.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketManagerBase.Buffer.ReadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes to the destination array adjusting Position accordingly.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketManagerBase.Buffer.ReadPacketLength">
            <summary>
            This method is used to read a packet length from this Buffer.
            </summary>
            <returns>Returns packet length or -1 if the encoding of the packet length extends beyond this Buffer</returns>
            <remarks>
            This method deserializes using a decoding algorithm taken from FieldReader.ReadUInt64 but adapted slightly
            to handle the possibility of the complete value extending into the next Buffer.
            </remarks>
        </member>
        <member name="M:Gibraltar.Serialization.PacketManagerBase.GetNextPacket">
            <summary>
            Read a Packet from the buffer.
            </summary>
            <returns>Returns the next Packet from the Buffer, if possible or null if there is 
            not data available to read another packet</returns>
        </member>
        <member name="T:Gibraltar.Serialization.PacketReader">
            <summary>
            Reads a packet data stream, recreating the packets it contains
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initialize a PacketReader to read the specified stream using
            the provided encoding for strings.
            </summary>
            <param name="stream">Data to be read</param>
            <param name="inputIsReadOnly">Indicates if the input can be assumed fixed in length</param>
        </member>
        <member name="M:Gibraltar.Serialization.PacketReader.#ctor(System.IO.Stream,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initialize a PacketReader to read the specified stream using
            the provided encoding for strings.
            </summary>
            <param name="stream">Data to be read</param>
            <param name="inputIsReadOnly">Indicates if the input can be assumed fixed in length</param>
            <param name="majorVersion">Major version of the serialization protocol</param>
            <param name="minorVersion">Minor version of the serialization protocol</param>
        </member>
        <member name="M:Gibraltar.Serialization.PacketReader.#ctor(System.Byte[])">
            <summary>
            Initialize a PacketReader to read the specified data using
            the default encoding for strings.
            </summary>
            <param name="data">Data to be read</param>
        </member>
        <member name="P:Gibraltar.Serialization.PacketReader.DataAvailable">
            <summary>
            Indicates if there are any more packets available on the current stream.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.PacketReader.Position">
            <summary>
            Returns the current position within the stream.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.PacketReader.Length">
            <summary>
            Returns the length of the stream.
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketReader.Read">
            <summary>
            Read and return the next IPacket from the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketReader.ReadPacket(System.IO.Stream)">
            <summary>
            Read and return the next IPacket from the stream
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketReader.GetStorageSummary">
            <summary>
            Returns a summary of packet count and size for each packet type
            </summary>
            <remarks>
            The returned list is sorted using the default sort implied by the
            PacketTypeStorageSummary.CompareTo method.
            </remarks>
        </member>
        <member name="M:Gibraltar.Serialization.PacketReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Serialization.PacketReader.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.
            </summary>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="M:Gibraltar.Serialization.PacketWriter.#ctor(System.IO.Stream)">
            <summary>
            Initialize a PacketWriter to read the specified stream using
            the provided encoding for strings.
            </summary>
            <param name="stream">Destination for data written</param>
        </member>
        <member name="M:Gibraltar.Serialization.PacketWriter.#ctor(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Initialize a PacketWriter to read the specified stream using
            the provided encoding for strings.
            </summary>
            <param name="stream">Destination for data written</param>
            <param name="majorVersion">Major version of the serialization protocol</param>
            <param name="minorVersion">Minor version of the serialization protocol</param>
        </member>
        <member name="P:Gibraltar.Serialization.PacketWriter.Position">
            <summary>
            Returns the current position within the stream.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.PacketWriter.Length">
            <summary>
            Returns the length of the stream.
            </summary>
        </member>
        <member name="P:Gibraltar.Serialization.PacketWriter.PacketCache">
            <summary>
            Exposes the PacketCache
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.PacketWriter.Write(Gibraltar.Serialization.IPacket)">
            <summary>
            Write the data needed to serialize the state of the packet
            </summary>
            <param name="packet">Object to be serialized, must implement IPacket</param>
        </member>
        <member name="M:Gibraltar.Serialization.PacketWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Serialization.PacketWriter.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.
            </summary>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="M:Gibraltar.Serialization.SerializedPacket.#ctor(Gibraltar.Serialization.PacketDefinition)">
            <summary>
            Create a new serialized packet for serialization
            </summary>
            <param name="definition"></param>
        </member>
        <member name="M:Gibraltar.Serialization.SerializedPacket.#ctor(Gibraltar.Serialization.PacketDefinition,System.Object[])">
            <summary>
            Create a new serailized packet for deserialization
            </summary>
            <param name="definition"></param>
            <param name="values"></param>
        </member>
        <member name="T:Gibraltar.Serialization.UniqueStringList">
            <summary>
            Helper class used by FieldReader and FieldWriter to maintain a cache of unique strings that have
            been read/written.
            <remarks>
            Provides a faster way to store string tokens both maintaining the order that they were added and
            providing a fast lookup.
            
            Based on code developed by ewbi at http://ewbi.blogs.com/develops/2006/10/uniquestringlis.html
            </remarks>
            </summary>
        </member>
        <member name="M:Gibraltar.Serialization.UniqueStringList.Clear">
            <summary>
            Clears this string table and frees associated unused memory.
            Note that method also packs the StringReference table and invokes a GC.Collect.
            </summary>
        </member>
        <member name="T:Gibraltar.Server.Client.CachedCredentialsManager">
            <summary>
            Manages the cached credentials for the current process
            </summary>
            <remarks>By retrieving repository credentials from the credential manager you ensure coordination
            between all of the channels in the process.  This eliminates cases where two threads presenting 
            alternate credentials cause reauthentication which dramatically decreases efficiency of communication.</remarks>
        </member>
        <member name="E:Gibraltar.Server.Client.CachedCredentialsManager.CredentialsRequired">
            <summary>
            Event raised when a connection requires credentials and they aren't present.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.CachedCredentialsManager.GetCredentials(Gibraltar.Server.Client.WebChannel,System.Boolean,System.Guid,System.String,System.Boolean)">
            <summary>
            Get credentials for the specified URL target and repository information
            </summary>
            <param name="targetChannel">The web channel representing the endpoint that the credentials are for</param>
            <param name="useApiKey">True if an API key was used to originally set up the connection</param>
            <param name="repositoryId">The owner Id to specify to the server (for example repository Id)</param>
            <param name="keyContainerName">The name of the key container to retrieve the private key from</param>
            <param name="useMachineStore">True to use the machine store instead of the user store for the digital certificate</param>
            <returns></returns>
            <remarks>If existing credentials are available they will be provided, otherwise a new credentials object will be created and returned.
            This method is Multithread safe.</remarks>
        </member>
        <member name="M:Gibraltar.Server.Client.CachedCredentialsManager.GetCachedCredentials(Gibraltar.Server.Client.WebChannel,System.Boolean,System.Guid,System.String,System.Boolean)">
            <summary>
            Get credentials for the specified URL target and repository information
            </summary>
            <param name="targetChannel">The web channel representing the endpoint that the credentials are for</param>
            <param name="useApiKey">True if an API key was used to originally set up the connection</param>
            <param name="repositoryId">The owner Id to specify to the server (for example repository Id)</param>
            <param name="keyContainerName">The name of the key container to retrieve the private key from</param>
            <param name="useMachineStore">True to use the machine store instead of the user store for the digital certificate</param>
            <returns></returns>
            <remarks>If existing credentials are available they will be provided, otherwise null will be returned.
            This method is Multithread safe.</remarks>
        </member>
        <member name="M:Gibraltar.Server.Client.CachedCredentialsManager.GetEntryUri(Gibraltar.Server.Client.WebChannel)">
            <summary>
            Determine the entry URI used for credential keys
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.CachedCredentialsManager.GetEntryUri(System.String)">
            <summary>
            Determine the entry URI used for credential keys
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.CachedCredentialsManager.GetCredentials(System.String,System.Boolean,System.Guid,System.String,System.Boolean)">
            <summary>
            Get credentials for the specified URL target and repository information
            </summary>
            <param name="entryUri">The URI of the endpoint that the credentials are for</param>
            <param name="useApiKey">True if an API key was used to originally set up the connection</param>
            <param name="repositoryId">The owner Id to specify to the server (for example repository Id)</param>
            <param name="keyContainerName">The name of the key container to retrieve the private key from</param>
            <param name="useMachineStore">True to use the machine store instead of the user store for the digital certificate</param>
            <returns></returns>
            <remarks>If existing credentials are available they will be provided, otherwise a new credentials object will be created and returned.
            This method is Multithread safe.</remarks>
        </member>
        <member name="M:Gibraltar.Server.Client.CachedCredentialsManager.RequestCredentials(Gibraltar.Server.Client.WebChannel,System.Guid)">
            <summary>
            Request user credentials, coordinating between multiple threads looking for the same credentials.
            </summary>
            <remarks>Unlike Update, this will not re-prompt the user if they previously declined to provide credentials</remarks>
        </member>
        <member name="M:Gibraltar.Server.Client.CachedCredentialsManager.RequestCredentials(System.String,System.Guid)">
            <summary>
            Request user credentials, coordinating between multiple threads looking for the same credentials.
            </summary>
            <remarks>Unlike Update, this will not re-prompt the user if they previously declined to provide credentials and it will assume any cached credentials work.</remarks>
        </member>
        <member name="M:Gibraltar.Server.Client.CachedCredentialsManager.RequestUserCredentials(System.String,System.Guid)">
            <summary>
            Request user credentials, coordinating between multiple threads looking for the same credentials.
            </summary>
            <remarks>Unlike Update, this will not re-prompt the user if they previously declined to provide credentials and it will assume any cached credentials work.</remarks>
            <returns>The new authentication provider</returns>
            <exception cref="T:Gibraltar.Server.Client.WebChannelAuthorizationException">Thrown when no credentials were provided</exception>
        </member>
        <member name="M:Gibraltar.Server.Client.CachedCredentialsManager.UpdateCredentials(Gibraltar.Server.Client.WebChannel,System.Boolean)">
            <summary>
            Attempt to re-query the credentials for the specified URI
            </summary>
            <param name="targetChannel">The web channel to update credentials for</param>
            <param name="forceUpdate">True to force a requery to the user even if they previously canceled requesting credentials</param>
        </member>
        <member name="M:Gibraltar.Server.Client.CachedCredentialsManager.UpdateCredentials(Gibraltar.Server.Client.WebChannel,System.Guid,System.Boolean)">
            <summary>
            Attempt to re-query the credentials for the specified URI
            </summary>
            <param name="targetChannel">The web channel to update credentials for</param>
            <param name="repositoryId">The owner Id to specify to the server (for example repository Id)</param>
            <param name="forceUpdate">True to force a requery to the user even if they previously canceled requesting credentials</param>
        </member>
        <member name="M:Gibraltar.Server.Client.CachedCredentialsManager.UpdateCredentials(System.String,System.Guid,System.Boolean)">
            <summary>
            Attempt to re-query the credentials for the specified URI
            </summary>
            <param name="entryUri">The entry URI to update credentials for</param>
            <param name="repositoryId">The owner Id to specify to the server (for example repository Id)</param>
            <param name="forceUpdate">True to force a requery to the user even if they previously canceled requesting credentials</param>
            <returns>True if the user provided updated credentials, false if they canceled</returns>
        </member>
        <member name="T:Gibraltar.Server.Client.ChannelConnectionState">
            <summary>
            The status of the subscription connection
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.ChannelConnectionState.Disconnected">
            <summary>
            The subscription is disconnected
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.ChannelConnectionState.Connecting">
            <summary>
            The subscription is attempting to connect
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.ChannelConnectionState.Connected">
            <summary>
            The subscription is connected.
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.ChannelConnectionState.TransferingData">
            <summary>
            The subscription is actively transferring data
            </summary>
        </member>
        <member name="T:Gibraltar.Server.Client.ChannelConnectionStateChangedEventArgs">
            <summary>
            The event arguments for the connection state changed event
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.ChannelConnectionStateChangedEventArgs.State">
            <summary>
            The current connection state
            </summary>
        </member>
        <member name="T:Gibraltar.Server.Client.ChannelConnectionStateChangedEventHandler">
            <summary>
            Event handler for the connection state changed event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Gibraltar.Server.Client.ClientLogger">
            <summary>
            Client logger implementation for our core Loupe logging interface
            </summary>
        </member>
        <member name="T:Gibraltar.Server.Client.ClientRepositoryUploadRequest">
            <summary>
            Uploads the state of a client repository, adding it if necessary.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.ClientRepositoryUploadRequest.#ctor(Gibraltar.Server.Client.Data.ClientRepositoryXml)">
            <summary>
            Create a new sessions version request
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.ClientRepositoryUploadRequest.InputRepository">
            <summary>
            The repository data to commit to the server
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.ClientRepositoryUploadRequest.ResponseRepository">
            <summary>
            The repository data returned by the server as a result of the request.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.ClientRepositoryUploadRequest.OnProcessRequest(Gibraltar.Server.Client.IWebChannelConnection)">
            <summary>
            Implemented by inheritors to perform the request on the provided web client.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:Gibraltar.Server.Client.CredentialsRequiredEventArgs">
            <summary>
            Information used in the CredentialsRequired event.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.CredentialsRequiredEventArgs.#ctor(System.String,System.Guid,System.Boolean,Gibraltar.Server.Client.IWebAuthenticationProvider)">
            <summary>
            Create a new event data object
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.CredentialsRequiredEventArgs.EndpointUri">
            <summary>
            The server being connected to
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.CredentialsRequiredEventArgs.RepositoryId">
            <summary>
            The repository being connected to
            </summary>
            <remarks>In extraordinary cases - like authentication is required to the server configuration page - this will be an empty GUID.</remarks>
        </member>
        <member name="P:Gibraltar.Server.Client.CredentialsRequiredEventArgs.AuthenticationFailed">
            <summary>
            Indicates if credentials are required because an authentication attempt failed.
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.CredentialsRequiredEventArgs.AuthenticationProvider">
            <summary>
            An authentication provider with the credentials to use.
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.CredentialsRequiredEventArgs.Cancel">
            <summary>
            True to cancel a connection attempt.
            </summary>
        </member>
        <member name="T:Gibraltar.Server.Client.CredentialsRequiredEventHandler">
            <summary>
            The delegate for handling the Credentials Required event.
            </summary>
            <param name="source"></param>
            <param name="e"></param>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.DataConverter">
            <summary>
            Convert between data representations of common repository objects
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.FromFolderXml(Gibraltar.Server.Client.Data.FolderXml,System.Guid@,System.Int64@,System.Boolean@,System.String@,System.Nullable{System.Guid}@,System.String@,System.String@,System.String@)">
            <summary>
            Extract all of the data fields from a folder XML structure, validating it.
            </summary>
            <param name="folderXml"></param>
            <param name="id"></param>
            <param name="version"></param>
            <param name="deleted"></param>
            <param name="name"></param>
            <param name="parentFolderId"></param>
            <param name="typeName"></param>
            <param name="selectCriteriaXml"></param>
            <param name="invalidMessage"></param>
            <returns>True if the structure is valid, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ByteArrayToHubConfigurationXml(System.Byte[])">
            <summary>
            Convert a byte array to a Server Configuration XML object without relying on XML Serializer
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ByteArrayToSessionsListXml(System.Byte[])">
            <summary>
            Convert a byte array to sessions list XML object without relying on XML Serializer
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ByteArrayToSessionFilesListXml(System.Byte[])">
            <summary>
            Convert a raw byte array to a session files list without using .NET XML Serialization
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.SessionXmlToByteArray(Gibraltar.Server.Client.Data.SessionXml)">
            <summary>
            Converts a session XML object to a byte array without relying on XML Serializer
            </summary>
            <param name="sessionXml"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ToClientRepositoryXml(System.Guid,System.String,System.String,System.String,System.DateTimeOffset,System.Int64,System.String,System.DateTimeOffset)">
            <summary>
            convert a client repository set of information from its field form to XML
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ToSessionXml(System.Guid,System.Int64,System.Boolean)">
            <summary>
            Create a single session XML object from its minimal raw information.
            </summary>
            <param name="id"></param>
            <param name="version"></param>
            <param name="deleted"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ToSessionXml(Loupe.Extensibility.Data.ISessionSummary)">
            <summary>
            Create a sessionXml from the session summary provided
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ToSessionXml(System.Guid,System.Nullable{System.Guid},System.Int64,System.Boolean,System.Boolean,System.Boolean,System.DateTimeOffset,System.DateTimeOffset,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTimeOffset,System.DateTimeOffset,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.String,System.Boolean,System.Int32,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Create a single session XML object from its detail information
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ToSessionPropertiesXml(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Convert a properties dictionary to a session property XML array
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ToSessionPropertyXml(System.Guid,System.String,System.String)">
            <summary>
            Create a single session property object from its raw data elements.
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ToSessionFileXml(System.Guid,System.Int32,System.Int64)">
            <summary>
            Create a single session file object from its raw data elements.
            </summary>
            <param name="id"></param>
            <param name="sequence"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ToApplicationTypeXml(System.String)">
            <summary>
            Convert an application type to its XML equivalent.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ToBootModeXml(System.String)">
            <summary>
            Convert a boot mode to its XML equivalent
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ToClientRepositoryStatusXml(System.String)">
            <summary>
            Convert a boot mode to its XML equivalent
            </summary>
            <param name="statusName"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ToFolderType(System.String)">
            <summary>
            Convert a folder type to its XML equivalent
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ToProcessorArchitectureXml(System.String)">
            <summary>
            Convert a processor architecture to its XML equivalent.
            </summary>
            <param name="statusName"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ToSessionStatusXml(System.String)">
            <summary>
            Convert a session status to its XML equivalent. 
            </summary>
            <param name="statusName"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ToDateTimeOffsetXml(System.DateTimeOffset)">
            <summary>
            Convert a DateTimeOffset value to its XML equivalent.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.FromDateTimeOffsetXml(Gibraltar.Server.Client.Data.DateTimeOffsetXml)">
            <summary>
            Convert the DateTimeOffset XML structure to its native form
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.ToLogMessageSeverityXml(System.String)">
            <summary>
            Convert a log message severity to its XML equivalent.
            </summary>
            <param name="severityName"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.FromLogMessageSeverityXml(System.String)">
            <summary>
            Convert a log message severity XML to its native form
            </summary>
            <param name="severityName"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.FromProcessorArchitectureXml(Gibraltar.Server.Client.Data.ProcessorArchitectureXml)">
            <summary>
             Convert the provided processor architecture to our normal enumeration
            </summary>
            <param name="architectureXml"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.Data.DataConverter.FromBootModeXml(Gibraltar.Server.Client.Data.BootModeXml)">
            <summary>
            Convert the provided bot mode to our normal enumeration
            </summary>
            <param name="bootModeXml"></param>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.HubConfigurationXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.expirationDt">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.mailbox">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.clientRepositories">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.publicKey">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.liveStream">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.redirectRequested">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.status">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.timeToLive">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.protocolVersion">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.redirectUseGibraltarSds">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.redirectUseGibraltarSdsSpecified">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.redirectCustomerName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.redirectHostName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.redirectPort">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.redirectPortSpecified">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.redirectUseSsl">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.redirectUseSslSpecified">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.redirectApplicationBaseDirectory">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.HubConfigurationXml.id">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.DateTimeOffsetXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.DateTimeOffsetXml.DateTime">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.DateTimeOffsetXml.Offset">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.StoredCredentialXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.StoredCredentialXml.key">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.StoredCredentialXml.account">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.StoredCredentialXml.password">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.AddInDefinitionXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.AddInDefinitionXml.typeName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.AddInDefinitionXml.enabled">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.AddInDefinitionXml.caption">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.AddInDefinitionXml.description">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.AddInDefinitionXml.version">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.AddInDefinitionXml.source">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.RepositorySubmissionMetricXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubmissionMetricXml.id">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubmissionMetricXml.date">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubmissionMetricXml.sessions">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubmissionMetricXml.criticalSessions">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubmissionMetricXml.errorSessions">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubmissionMetricXml.uniqueHosts">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubmissionMetricXml.bytesReceived">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.SessionFileXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionFileXml.id">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionFileXml.sequence">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionFileXml.version">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.LogMessageClassXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.LogMessageClassXml.id">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.LogMessageClassXml.severity">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.LogMessageClassXml.class">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.LogMessageClassXml.caption">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.LogMessageClassXml.messageCount">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.LogMessageSeverityXml">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.LogMessageSeverityXml.verbose">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.LogMessageSeverityXml.information">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.LogMessageSeverityXml.warning">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.LogMessageSeverityXml.error">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.LogMessageSeverityXml.critical">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.LogMessageCategoryXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.LogMessageCategoryXml.id">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.LogMessageCategoryXml.severity">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.LogMessageCategoryXml.category">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.LogMessageCategoryXml.caption">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.LogMessageCategoryXml.messageCount">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.SessionPropertyXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionPropertyXml.id">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionPropertyXml.name">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionPropertyXml.value">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.SessionDetailXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.startDt">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.endDt">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.addedDt">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.updatedDt">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.properties">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.logMessageCategories">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.logMessageClasses">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.productName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.applicationName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.environmentName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.promotionLevelName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.applicationVersion">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.applicationType">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.applicationDescription">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.caption">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.status">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.timeZoneCaption">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.durationSec">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.agentVersion">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.userName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.userDomainName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.hostName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.dnsDomainName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.isNew">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.isComplete">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.messageCount">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.criticalMessageCount">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.errorMessageCount">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.warningMessageCount">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.updateUser">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.osPlatformCode">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.osVersion">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.osServicePack">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.osCultureName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.osArchitecture">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.osBootMode">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.osSuiteMaskCode">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.osProductTypeCode">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.runtimeVersion">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.runtimeArchitecture">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.currentCultureName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.currentUiCultureName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.memoryMb">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.processors">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.processorCores">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.userInteractive">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.terminalServer">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.screenWidth">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.screenHeight">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.colorDepth">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.commandLine">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.fileSize">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.fileAvailable">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionDetailXml.computerId">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.ApplicationTypeXml">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.ApplicationTypeXml.unknown">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.ApplicationTypeXml.console">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.ApplicationTypeXml.windows">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.ApplicationTypeXml.service">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.ApplicationTypeXml.aspnet">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.SessionStatusXml">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.SessionStatusXml.unknown">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.SessionStatusXml.running">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.SessionStatusXml.normal">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.SessionStatusXml.crashed">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.ProcessorArchitectureXml">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.ProcessorArchitectureXml.unknown">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.ProcessorArchitectureXml.x86">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.ProcessorArchitectureXml.amd64">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.ProcessorArchitectureXml.ia64">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.BootModeXml">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.BootModeXml.unknown">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.BootModeXml.normal">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.BootModeXml.failsafe">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.BootModeXml.failsafewithnetwork">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.SessionXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionXml.sessionDetail">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionXml.files">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionXml.id">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionXml.version">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionXml.deleted">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionXml.isComplete">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionXml.isCompleteSpecified">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.FolderDetailXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.FolderDetailXml.updatedDt">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.FolderDetailXml.sessions">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.FolderDetailXml.addedSessions">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.FolderDetailXml.removedSessions">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.FolderDetailXml.selectionCriteriaXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.FolderDetailXml.name">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.FolderDetailXml.parentFolderId">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.FolderDetailXml.folderType">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.FolderDetailXml.updateUser">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.FolderTypeXml">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.FolderTypeXml.manual">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.FolderTypeXml.search">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.FolderTypeXml.dynamic">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.FolderXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.FolderXml.folderDetail">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.FolderXml.id">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.FolderXml.version">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.FolderXml.deleted">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.LiveStreamServerXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.LiveStreamServerXml.agentPort">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.LiveStreamServerXml.clientPort">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.LiveStreamServerXml.useSsl">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.RepositoryMailboxTrackingXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositoryMailboxTrackingXml.statusMessage">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositoryMailboxTrackingXml.lastContactDt">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositoryMailboxTrackingXml.updatedDt">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositoryMailboxTrackingXml.inError">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.RepositoryMailboxXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositoryMailboxXml.updatedDt">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositoryMailboxXml.tracking">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositoryMailboxXml.id">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositoryMailboxXml.server">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositoryMailboxXml.port">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositoryMailboxXml.useSsl">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositoryMailboxXml.userName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositoryMailboxXml.password">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.ClientRepositoryXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.ClientRepositoryXml.addedDt">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.ClientRepositoryXml.lastContactDt">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.ClientRepositoryXml.id">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.ClientRepositoryXml.hostName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.ClientRepositoryXml.computerKey">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.ClientRepositoryXml.currentSessionsVersion">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.ClientRepositoryXml.currentSessionsVersionSpecified">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.ClientRepositoryXml.publicKey">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.ClientRepositoryXml.status">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.ClientRepositoryXml.statusSpecified">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.ClientRepositoryStatusXml">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.ClientRepositoryStatusXml.active">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.ClientRepositoryStatusXml.pending">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.ClientRepositoryStatusXml.inactive">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.HubStatusXml">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.HubStatusXml.available">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.HubStatusXml.maintenance">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.HubStatusXml.expired">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.FoldersListXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.FoldersListXml.folders">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.FoldersListXml.version">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.SessionsListXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionsListXml.sessions">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionsListXml.version">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.SessionFilesListXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionFilesListXml.files">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionFilesListXml.id">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionFilesListXml.version">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.SessionFilesListXml.singleStreamOnly">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.RepositoryXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositoryXml.folders">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositoryXml.sessions">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.RepositorySubmissionMetricsXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubmissionMetricsXml.metric">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.RepositorySubscriptionXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionXml.addedDt">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionXml.id">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionXml.serverRepositoryId">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionXml.computerKey">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionXml.useGibraltarSds">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionXml.customerName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionXml.hostName">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionXml.port">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionXml.portSpecified">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionXml.useSsl">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionXml.useSslSpecified">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionXml.applicationBaseDirectory">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionXml.repository">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionXml.syncMode">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionXml.useApiKey">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionXml.useApiKeySpecified">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionXml.userName">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.SessionSynchronizationModeXml">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.SessionSynchronizationModeXml.manual">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.SessionSynchronizationModeXml.summaryOnly">
            <remarks/>
        </member>
        <member name="F:Gibraltar.Server.Client.Data.SessionSynchronizationModeXml.automatic">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.RepositorySubscriptionStateXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionStateXml.lastContactDt">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionStateXml.sessionsVersion">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.RepositorySubscriptionStateXml.sessionsDataVersion">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.AddInDefinitionsListXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.AddInDefinitionsListXml.definitions">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.Data.StoredCredentialsListXml">
            <remarks/>
        </member>
        <member name="P:Gibraltar.Server.Client.Data.StoredCredentialsListXml.credential">
            <remarks/>
        </member>
        <member name="T:Gibraltar.Server.Client.GibraltarNetworkException">
            <summary>
            Exceptions related to network operations
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.GibraltarNetworkException.#ctor">
            <summary>
            Initializes a new instance of the GibraltarNetworkException class.
            </summary>
            <remarks>This constructor initializes the Message property of the new instance to a system-supplied
            message that describes the error and takes into account the current system culture.
            For more information, see the base constructor in Exception.</remarks>
        </member>
        <member name="M:Gibraltar.Server.Client.GibraltarNetworkException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the GibraltarNetworkException class with a specified error message.
            </summary>
            <param name="message">The error message string.</param>
            <remarks>This constructor initializes the Message property of the new instance using the
            message parameter.  The InnerException property is left as a null reference.
            For more information, see the base constructor in Exception.</remarks>
        </member>
        <member name="M:Gibraltar.Server.Client.GibraltarNetworkException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the GibraltarNetworkException class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message string.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a
            null reference if no inner exception is specified.</param>
            <remarks>An exception that is thrown as a direct result of a previous exception should include
            a reference to the previous exception in the innerException parameter.
            For more information, see the base constructor in Exception.</remarks>
        </member>
        <member name="P:Gibraltar.Server.Client.GibraltarRateLimitException.Delay">
            <summary>
            The number of seconds to delay before retrying
            </summary>
        </member>
        <member name="T:Gibraltar.Server.Client.GibraltarTimeoutException">
            <summary>
            Thrown when an operation times out
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.GibraltarTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the GibraltarTimeoutException class.
            </summary>
            <remarks>This constructor initializes the Message property of the new instance to a system-supplied
            message that describes the error and takes into account the current system culture.
            For more information, see the base constructor in Exception.</remarks>
        </member>
        <member name="M:Gibraltar.Server.Client.GibraltarTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the GibraltarTimeoutException class with a specified error message.
            </summary>
            <param name="message">The error message string.</param>
            <remarks>This constructor initializes the Message property of the new instance using the
            message parameter.  The InnerException property is left as a null reference.
            For more information, see the base constructor in Exception.</remarks>
        </member>
        <member name="M:Gibraltar.Server.Client.GibraltarTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the GibraltarTimeoutException class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message string.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a
            null reference if no inner exception is specified.</param>
            <remarks>An exception that is thrown as a direct result of a previous exception should include
            a reference to the previous exception in the innerException parameter.
            For more information, see the base constructor in Exception.</remarks>
        </member>
        <member name="T:Gibraltar.Server.Client.HubConfigurationGetRequest">
            <summary>
            Get the current hub configuration information for the hub
            </summary>
            <remarks>We rely on this being anonymously accessible.  First, for performance reasons and second because it's used as a Ping by the agent.</remarks>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConfigurationGetRequest.#ctor">
            <summary>
            Create a new sessions version request
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.HubConfigurationGetRequest.Configuration">
            <summary>
            The current hub configuration from the hub.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConfigurationGetRequest.OnProcessRequest(Gibraltar.Server.Client.IWebChannelConnection)">
            <summary>
            Implemented by inheritors to perform the request on the provided web client.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:Gibraltar.Server.Client.HubConnection">
            <summary>
            A web channel specifically designed to work with the Gibraltar Hub.
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.HubConnection.SHA1HashHeader">
            <summary>
            The web request header to add for our hash
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.HubConnection.Hub30ProtocolVersion">
            <summary>
            The version number for the new Gibraltar 3.0 features
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.HubConnection.Hub38ProtocolVersion">
            <summary>
            The version number for the new Gibraltar 3.8 features
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.HubConnection.ClientProtocolVersion">
            <summary>
            The latest version of the protocol we understand
            </summary>
        </member>
        <member name="E:Gibraltar.Server.Client.HubConnection.ConnectionStateChanged">
            <summary>
            Raised whenever the connection state changes.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.#ctor(Loupe.Configuration.ServerConfiguration)">
            <summary>
            Create a new server connection using the provided configuration
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:Gibraltar.Server.Client.HubConnection.Logger">
            <summary>
            The logger to use in this process
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.HubConnection.EnableLogging">
            <summary>
            Indicates if logging for events on the web channel is enabled or not.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.SetCredentials(System.Guid,System.Boolean,System.String,System.Boolean)">
            <summary>
            Identify our relationship Id and credential configuration for communicating with the server.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.CanConnect">
            <summary>
            Attempts to connect to the server and returns information about the connection status.
            </summary>
            <remarks>This method will keep the connection if it is made, improving efficiency if you are then going to use the connection.</remarks>
            <returns>True if the configuration is valid and the server is available, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.CanConnect(Loupe.Configuration.ServerConfiguration)">
            <summary>
            Attempts to connected to the specified hub and returns information about the connection status.  The connection is then dropped.
            </summary>
            <param name="configuration">The configuration to test</param>
            <returns>The connection status information</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.ExecuteRequest(Gibraltar.Server.Client.IWebRequest,System.Int32)">
            <summary>
            Execute the provided request.
            </summary>
            <param name="newRequest"></param>
            <param name="maxRetries">The maximum number of times to retry the connection.  Use -1 to retry indefinitely.</param>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.CreateSubscription(Gibraltar.Server.Client.Data.ClientRepositoryXml)">
            <summary>
            Create a new subscription to this hub for the supplied repository information and shared secret.
            </summary>
            <param name="repositoryXml"></param>
            <remarks></remarks>
            <returns>The client repository information retrieved from the server.</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.Authenticate">
            <summary>
            Authenticate now (instead of waiting for a request to fail)
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.HubConnection.IsAuthenticated">
            <summary>
            Indicates if the connection is currently authenticated.
            </summary>
            <value>False if no connection, connection doesn't support authentication, or connection is not authenticated.</value>
        </member>
        <member name="P:Gibraltar.Server.Client.HubConnection.IsConnected">
            <summary>
            Indicates if the connection is currently connected without attempting a new connection
            </summary>
            <value>False if no connection.  Connection may fail at any time.</value>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.GetRepository">
            <summary>
            Information about the remote repository
            </summary>
            <remarks>Returns null when no server can be contacted</remarks>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.GetStatus">
            <summary>
            The current connection status
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.Reconnect">
            <summary>
            Reset the current connection and re-establish it, getting the latest hub configuration.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.Dispose(System.Boolean)">
            <summary>
            Dispose managed resources
            </summary>
            <param name="releaseManaged"></param>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.OnConnectionStateChanged(Gibraltar.Server.Client.ChannelConnectionState)">
            <summary>
            Raises the ConnectionStateChanged event
            </summary>
            <param name="state">The new connection state</param>
            <remarks>Note to inheritors:  be sure to call the base implementation to ensure the event is raised.</remarks>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.EnsureConnectAttempted">
            <summary>
            Make sure we've at least tried to connect to the hub.
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.HubConnection.EndUserTestUrl">
            <summary>
            Get a test URL to access through a web browser.
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.HubConnection.UpdateUrl">
            <summary>
            The URL to the server's version info structure.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.ResetChannel">
            <summary>
            Reset the stored channel and reconnect.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.Connect">
            <summary>
            Connect to the hub (or another hub if the configured hub is redirecting)
            </summary>
            <returns>The last web channel it was able to connect to after processing redirections, if that channel is available.</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.Connect(Loupe.Configuration.ServerConfiguration)">
            <summary>
            Connects to the specified hub (or another hub if this hub is redirecting)
            </summary>
            <returns>The last web channel it was able to connect to after processing redirections.</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.CreateChannel(Loupe.Configuration.ServerConfiguration)">
            <summary>
            Create a web channel to the specified server configuration.  Low level primitive that does no redirection.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.EffectiveApplicationBaseDirectory(System.String,System.String,System.String)">
            <summary>
            Combines application base directory (if not null) and repository (if not null) into one merged path.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.HubConnection.IsRootHub(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            Indicates if we're on the original configured server (the "root") or have been redirected.
            </summary>
            <param name="hostName"></param>
            <param name="port"></param>
            <param name="useSsl"></param>
            <param name="applicationBaseDirectory"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Server.Client.HubConnectionStatus.Status">
            <summary>
            The hub status of the final hub connected to.
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.HubConnectionStatus.Message">
            <summary>
            An end-user display message providing feedback on why a connection is not available
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.HubConnectionStatus.IsValid">
            <summary>
            True if the configuration is valid and the server is available, false otherwise.
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.HubConnectionStatus.Channel">
            <summary>
            The channel that was connected
            </summary>
        </member>
        <member name="T:Gibraltar.Server.Client.HubRepository">
            <summary>
            Information about the capabilities and status of a server repository
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.HubRepository.SupportsFileFragments">
            <summary>
            Indicates if the server supports file fragments or just a single stream per session
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.HubRepository.SupportsServerApi">
            <summary>
            Indicates if the server supports the API for log events, etc.
            </summary>
        </member>
        <member name="T:Gibraltar.Server.Client.HubStatus">
            <summary>
            The current status of a server that is accessible over the network
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.HubStatus.Unknown">
            <summary>
            The current status couldn't be determined.
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.HubStatus.Available">
            <summary>
            The server is accessible and operational.
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.HubStatus.Expired">
            <summary>
            The server has no license and should not be communicated with.
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.HubStatus.Maintenance">
            <summary>
            The server is currently undergoing maintenance and is not operational.
            </summary>
        </member>
        <member name="T:Gibraltar.Server.Client.IClientLogger">
            <summary>
            HTTP Client logging interface
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.IClientLogger.SilentMode">
            <summary>
            Indicates if only minimal logging should be performed
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.IClientLogger.Write(Loupe.Extensibility.Data.LogMessageSeverity,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a trace message directly to the Gibraltar log.
            </summary>
            <remarks>The log message will be attributed to the caller of this method.  Wrapper methods should
            instead call the WriteMessage() method in order to attribute the log message to their own outer
            callers.</remarks>
            <param name="severity">The log message severity.</param>
            <param name="category">The category for this log message.</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Server.Client.IClientLogger.Write(Loupe.Extensibility.Data.LogMessageSeverity,System.Exception,System.Boolean,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a log message directly to the Gibraltar log with an attached Exception and specifying
            Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>The log message will be attributed to the caller of this method.  Wrapper methods should
            instead call the WriteMessage() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="severity">The log message severity.</param>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="attributeToException">True if the call stack from where the exception was thrown should be used for log message attribution</param>
            <param name="category">The category for this log message.</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Server.Client.Internal.ServerExtensions.ToServerConfiguration(Gibraltar.Server.Client.Data.HubConfigurationXml)">
            <summary>
            Get a server configuration from a redirect request
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Server.Client.IWebAuthenticationProvider">
            <summary>
            Implemented to provide custom authentication for a web channel
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.IWebAuthenticationProvider.IsAuthenticated">
            <summary>
            Indicates if the authentication provider believes it has authenticated with the channel
            </summary>
            <remarks>If false then no logout will be attempted, and any request that requires authentication will
            cause a login attempt without waiting for an authentication failure.</remarks>
        </member>
        <member name="P:Gibraltar.Server.Client.IWebAuthenticationProvider.LogoutIsSupported">
            <summary>
            indicates if the authentication provider can perform a logout
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.IWebAuthenticationProvider.Login(Gibraltar.Server.Client.WebChannel,System.Net.Http.HttpClient)">
            <summary>
            Perform a login on the supplied channel
            </summary>
            <param name="channel">The channel object</param>
            <param name="client">A web client object to use to perform login operations.</param>
        </member>
        <member name="M:Gibraltar.Server.Client.IWebAuthenticationProvider.Logout(Gibraltar.Server.Client.WebChannel,System.Net.Http.HttpClient)">
            <summary>
            Perform a logout on the supplied channel
            </summary>
            <param name="channel">The channel object</param>
            <param name="client">A web client object to use to perform logout operations.</param>
        </member>
        <member name="M:Gibraltar.Server.Client.IWebAuthenticationProvider.PreProcessRequest(Gibraltar.Server.Client.WebChannel,System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.String,System.Boolean)">
            <summary>
            Perform per-request authentication processing.
            </summary>
            <param name="channel">The channel object</param>
            <param name="client">The web client that is about to be used to execute the request.  It can't be used by the authentication provider to make requests.</param>
            <param name="request">The request that is about to be sent</param>
            <param name="resourceUrl">The resource URL (with query string) specified by the client.</param>
            <param name="requestSupportsAuthentication">Indicates if the request being processed supports authentication or not.</param>
            <remarks>If the request doesn't support authentication, it's a best practice to not provide any authentication information.</remarks>
        </member>
        <member name="T:Gibraltar.Server.Client.IWebChannelConnection">
            <summary>
            The low level web client connection used by the web channel.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.IWebChannelConnection.DownloadData(System.String,System.Nullable{System.Int32})">
            <summary>
            Downloads the resource with the specified URI to a byte array
            </summary>
            <param name="relativeUrl"></param>
            <param name="timeout">The number of seconds to wait for a response to the request</param>
            <returns>A byte array containing the body of the response from the resource</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.IWebChannelConnection.DownloadData(System.String,System.Collections.Generic.IList{Gibraltar.NameValuePair{System.String}},System.Nullable{System.Int32})">
            <summary>
            Downloads the resource with the specified URI to a byte array
            </summary>
            <param name="relativeUrl"></param>
            <param name="additionalHeaders">Extra headers to add to the request</param>
            <param name="timeout">The number of seconds to wait for a response to the request</param>
            <returns>A byte array containing the body of the response from the resource</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.IWebChannelConnection.DownloadFile(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Downloads the resource with the specified URI to a local file.
            </summary>
            <param name="relativeUrl"></param>
            <param name="destinationFileName"></param>
            <param name="timeout">The number of seconds to wait for a response to the request</param>
        </member>
        <member name="M:Gibraltar.Server.Client.IWebChannelConnection.DownloadString(System.String,System.Nullable{System.Int32})">
            <summary>
            Downloads the resource with the specified URI to a string
            </summary>
            <param name="relativeUrl"></param>
            <param name="timeout">The number of seconds to wait for a response to the request</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.IWebChannelConnection.DownloadString(System.String,System.Net.Http.HttpMethod,System.Nullable{System.Int32})">
            <summary>
            Downloads the resource with the specified URI to a string
            </summary>
            <param name="relativeUrl"></param>
            <param name="method">The HTTP method used to send the string to the resource.  If null, the default is GET</param>
            <param name="timeout">The number of seconds to wait for a response to the request</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.IWebChannelConnection.UploadData(System.String,System.Net.Http.HttpMethod,System.String,System.Byte[],System.Collections.Generic.IList{Gibraltar.NameValuePair{System.String}},System.Nullable{System.Int32})">
            <summary>
            Uploads the provided byte array to the specified URI using the provided method.
            </summary>
            <param name="relativeUrl">The URI of the resource to receive the data. This URI must identify a resource that can accept a request sent with the method specified.</param>
            <param name="method">The HTTP method used to send the string to the resource.  If null, the default is POST</param>
            <param name="contentType">The content type to inform the server of for this file</param>
            <param name="data"></param>
            <param name="additionalHeaders">Extra headers to add to the request</param>
            <param name="timeout">The number of seconds to wait for a response to the request</param>
            <returns>A byte array containing the body of the response from the resource</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.IWebChannelConnection.UploadFile(System.String,System.Net.Http.HttpMethod,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Uploads the specified local file to the specified URI using the specified method
            </summary>
            <param name="relativeUrl">The URI of the resource to receive the file. This URI must identify a resource that can accept a request sent with the method specified.</param>
            <param name="method">The HTTP method used to send the string to the resource.  If null, the default is POST</param>
            <param name="contentType">The content type to inform the server of for this file</param>
            <param name="sourceFileNamePath"></param>
            <param name="timeout">The number of seconds to wait for a response to the request</param>
            <returns>A byte array containing the body of the response from the resource</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.IWebChannelConnection.UploadString(System.String,System.Net.Http.HttpMethod,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Uploads the specified string to the specified resource, using the specified method
            </summary>
            <param name="relativeUrl">The URI of the resource to receive the string. This URI must identify a resource that can accept a request sent with the method specified.</param>
            <param name="method">The HTTP method used to send the string to the resource.  If null, the default is POST</param>
            <param name="contentType">The content type to inform the server of for this file</param>
            <param name="data">The string to be uploaded. </param>
            <param name="timeout">The number of seconds to wait for a response to the request</param>
            <returns>A string containing the body of the response from the resource</returns>
        </member>
        <member name="T:Gibraltar.Server.Client.IWebRequest">
            <summary>
            The format of a web request provided to the GibraltarWebClient
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.IWebRequest.RequiresAuthentication">
            <summary>
            Indicates if the web request requires authentication (so the channel should authenticate before attempting the request)
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.IWebRequest.SupportsAuthentication">
            <summary>
            Indicates if the web request supports authentication, so if the server requests credentials the request can provide them.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.IWebRequest.ProcessRequest(Gibraltar.Server.Client.IWebChannelConnection)">
            <summary>
            Perform the request against the specified web client connection.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:Gibraltar.Server.Client.LiveSessionPublisher">
            <summary>
            Communicates between an Agent and a Loupe Server
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.LiveSessionPublisher.#ctor(Gibraltar.Messaging.NetworkMessenger,Gibraltar.Server.Client.NetworkConnectionOptions)">
            <summary>
            Create a new connection with the specified options
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.LiveSessionPublisher.#ctor(Gibraltar.Messaging.NetworkMessenger,Gibraltar.Server.Client.NetworkConnectionOptions,System.Int32,System.Int32)">
            <summary>
            Create a new connection with the specified options
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.LiveSessionPublisher.SendSummary">
            <summary>
            Send a copy of the latest session summary information to the server
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.LiveSessionPublisher.Connect">
            <summary>
            Implemented to complete the protocol connection
            </summary>
            <returns>True if a connection was successfully established, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.LiveSessionPublisher.TransferData">
            <summary>
            Implemented to transfer data on an established connection
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.LiveSessionPublisher.RetryDelay(System.Int32@)">
            <summary>
            Allows a derived class to implement its own retry delay strategy
            </summary>
            <param name="defaultDelayMs">The number of Milliseconds to wait before retrying</param>
            <returns>true if any retry should be attempted</returns>
        </member>
        <member name="T:Gibraltar.Server.Client.NetworkConnectionOptions">
            <summary>
            Connection options used to establish a socket from the local system to an endpoint
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.NetworkConnectionOptions.Port">
            <summary>
            The TCP Port to connect to
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.NetworkConnectionOptions.HostName">
            <summary>
            The host name or IP Address to connect to 
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.NetworkConnectionOptions.UseSsl">
            <summary>
            Indicates if the connection should be encrypted using Ssl or not.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.NetworkConnectionOptions.Clone">
            <summary>
            Create a copy of this set of connection options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.NetworkConnectionOptions.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Server.Client.NetworkConnectionOptions.CompareTo(Gibraltar.Server.Client.NetworkConnectionOptions)">
            <summary>
            Compares this ThreadInfo object to another to determine sorting order.
            </summary>
            <remarks>ThreadInfo instances are sorted by their ThreadId property.</remarks>
            <param name="other">The other ThreadInfo object to compare this object to.</param>
            <returns>An int which is less than zero, equal to zero, or greater than zero to reflect whether
            this ThreadInfo should sort as being less-than, equal to, or greater-than the other
            ThreadInfo, respectively.</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.NetworkConnectionOptions.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Server.Client.NetworkConnectionOptions.Equals(Gibraltar.Server.Client.NetworkConnectionOptions)">
            <summary>
            Determines if the provided NetworkConnectionOptions object is identical to this object.
            </summary>
            <param name="other">The NetworkConnectionOptions object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.NetworkConnectionOptions.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            An int representing the hash code calculated for the contents of this object.
            </returns>
        </member>
        <member name="M:Gibraltar.Server.Client.NetworkConnectionOptions.op_Equality(Gibraltar.Server.Client.NetworkConnectionOptions,Gibraltar.Server.Client.NetworkConnectionOptions)">
            <summary>
            Compares two NetworkConnectionOptions instances for equality.
            </summary>
            <param name="left">The NetworkConnectionOptions to the left of the operator</param>
            <param name="right">The NetworkConnectionOptions to the right of the operator</param>
            <returns>True if the two NetworkConnectionOptionss are equal.</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.NetworkConnectionOptions.op_Inequality(Gibraltar.Server.Client.NetworkConnectionOptions,Gibraltar.Server.Client.NetworkConnectionOptions)">
            <summary>
            Compares two NetworkConnectionOptions instances for inequality.
            </summary>
            <param name="left">The NetworkConnectionOptions to the left of the operator</param>
            <param name="right">The NetworkConnectionOptions to the right of the operator</param>
            <returns>True if the two NetworkConnectionOptionss are not equal.</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.NetworkConnectionOptions.op_LessThan(Gibraltar.Server.Client.NetworkConnectionOptions,Gibraltar.Server.Client.NetworkConnectionOptions)">
            <summary>
            Compares if one NetworkConnectionOptions instance should sort less than another.
            </summary>
            <param name="left">The NetworkConnectionOptions to the left of the operator</param>
            <param name="right">The NetworkConnectionOptions to the right of the operator</param>
            <returns>True if the NetworkConnectionOptions to the left should sort less than the NetworkConnectionOptions to the right.</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.NetworkConnectionOptions.op_GreaterThan(Gibraltar.Server.Client.NetworkConnectionOptions,Gibraltar.Server.Client.NetworkConnectionOptions)">
            <summary>
            Compares if one NetworkConnectionOptions instance should sort greater than another.
            </summary>
            <param name="left">The NetworkConnectionOptions to the left of the operator</param>
            <param name="right">The NetworkConnectionOptions to the right of the operator</param>
            <returns>True if the NetworkConnectionOptions to the left should sort greater than the NetworkConnectionOptions to the right.</returns>
        </member>
        <member name="T:Gibraltar.Server.Client.RepositoryCredentials">
            <summary>
            Authentication credentials for a repository to a shared data service.
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.RepositoryCredentials.AuthorizationPrefix">
            <summary>
            The prefix for the authorization header for this credential type
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.RepositoryCredentials.ClientRepositoryHeader">
            <summary>
            The HTTP Request header identifying the client repository
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.RepositoryCredentials.#ctor(System.Guid,System.String,System.Boolean)">
            <summary>
            Create a new set of repository credentials
            </summary>
            <param name="repositoryId">The owner Id to specify to the server (for example repository Id)</param>
            <param name="keyContainerName">The name of the key container to retrieve the private key from</param>
            <param name="useMachineStore">True to use the machine store instead of the user store for the digital certificate</param>
        </member>
        <member name="P:Gibraltar.Server.Client.RepositoryCredentials.UseMachineStore">
            <summary>
            True to use the machine store instead of the user store for the digital certificate
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.RepositoryCredentials.KeyContainerName">
            <summary>
            The name of the key container to retrieve the private key from
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.RepositoryCredentials.RepositoryId">
            <summary>
            The owner Id to specify to the server (for example repository Id)
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.RepositoryCredentials.IsAuthenticated">
            <summary>
            Indicates if the authentication provider believes it has authenticated with the channel
            </summary>
            <remarks>If false then no logout will be attempted, and any request that requires authentication will
            cause a login attempt without waiting for an authentication failure.</remarks>
        </member>
        <member name="P:Gibraltar.Server.Client.RepositoryCredentials.Gibraltar#Server#Client#IWebAuthenticationProvider#LogoutIsSupported">
            <summary>
            indicates if the authentication provider can perform a logout
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.RepositoryCredentials.Gibraltar#Server#Client#IWebAuthenticationProvider#Login(Gibraltar.Server.Client.WebChannel,System.Net.Http.HttpClient)">
            <summary>
            Perform a login on the supplied channel
            </summary>
            <param name="channel"></param>
            <param name="client"></param>
        </member>
        <member name="M:Gibraltar.Server.Client.RepositoryCredentials.Gibraltar#Server#Client#IWebAuthenticationProvider#Logout(Gibraltar.Server.Client.WebChannel,System.Net.Http.HttpClient)">
            <summary>
            Perform a logout on the supplied channel
            </summary>
            <param name="channel"></param>
            <param name="client"></param>
        </member>
        <member name="M:Gibraltar.Server.Client.RepositoryCredentials.Gibraltar#Server#Client#IWebAuthenticationProvider#PreProcessRequest(Gibraltar.Server.Client.WebChannel,System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.String,System.Boolean)">
            <summary>
            Perform per-request authentication processing.
            </summary>
            <param name="channel">The channel object</param>
            <param name="client">The web client that is about to be used to execute the request.  It can't be used by the authentication provider to make requests.</param>
            <param name="request">The request that is about to be sent</param>
            <param name="resourceUrl">The resource URL (with query string) specified by the client.</param>
            <param name="requestSupportsAuthentication">Indicates if the request being processed supports authentication or not.</param>
            <remarks>If the request doesn't support authentication, it's a best practice to not provide any authentication information.</remarks>
        </member>
        <member name="M:Gibraltar.Server.Client.RepositoryCredentials.CalculateHash(System.String)">
            <summary>
            Calculates the effective hash given the provided salt text.
            </summary>
            <param name="saltText"></param>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Server.Client.RequestedSessionsGetRequest">
            <summary>
            Get the requested sessions for a client from the server
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.RequestedSessionsGetRequest.#ctor(System.Guid)">
            <summary>
            create a new request for the specified client.
            </summary>
            <param name="clientId"></param>
        </member>
        <member name="P:Gibraltar.Server.Client.RequestedSessionsGetRequest.ClientId">
            <summary>
            The unique Id of this client
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.RequestedSessionsGetRequest.RequestedSessions">
            <summary>
            The list of sessions requested from the server.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.RequestedSessionsGetRequest.OnProcessRequest(Gibraltar.Server.Client.IWebChannelConnection)">
            <summary>
            Implemented by inheritors to perform the request on the provided web client.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:Gibraltar.Server.Client.SessionFilesGetRequest">
            <summary>
            Get the list of session fragment files for a session
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.SessionFilesGetRequest.#ctor(System.Guid)">
            <summary>
            Create a new session headers request
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.SessionFilesGetRequest.#ctor(System.Guid,System.Guid)">
            <summary>
            create a new request for the specified client and session.
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.SessionFilesGetRequest.ClientId">
            <summary>
            The unique Id of this client when being used from an Agent
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.SessionFilesGetRequest.SessionId">
            <summary>
            The unique Id of the session we want to get the existing files for
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.SessionFilesGetRequest.Files">
            <summary>
            The list of session files on the server
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.SessionFilesGetRequest.OnProcessRequest(Gibraltar.Server.Client.IWebChannelConnection)">
            <summary>
            Implemented by inheritors to perform the request on the provided web client.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:Gibraltar.Server.Client.SessionHeaderEventArgs">
            <summary>
            Event arguments for session header changes
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.SessionHeaderEventArgs.#ctor(Gibraltar.Data.SessionHeader)">
            <summary>
            Create a new session header event arguments object
            </summary>
            <param name="header"></param>
        </member>
        <member name="P:Gibraltar.Server.Client.SessionHeaderEventArgs.SessionHeader">
            <summary>
            The session header that was affected
            </summary>
        </member>
        <member name="T:Gibraltar.Server.Client.SessionHeaderEventHandler">
            <summary>
            Delegate for handling session header events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Gibraltar.Server.Client.SessionHeaderUploadRequest">
            <summary>
            Uploads a session XML document to the endpoint of the web channel
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.SessionHeaderUploadRequest.#ctor(Gibraltar.Server.Client.Data.SessionXml,System.Guid)">
            <summary>
            Create a new session header upload request.
            </summary>
            <param name="sessionHeader"></param>
            <param name="clientId"></param>
        </member>
        <member name="P:Gibraltar.Server.Client.SessionHeaderUploadRequest.ClientId">
            <summary>
            The unique Id of this client
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.SessionHeaderUploadRequest.SessionHeader">
            <summary>
            The session header to be uploaded.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.SessionHeaderUploadRequest.OnProcessRequest(Gibraltar.Server.Client.IWebChannelConnection)">
            <summary>
            Implemented by inheritors to perform the request on the provided web client.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:Gibraltar.Server.Client.SessionMarkComplete">
            <summary>
            Informs the server that the session is complete (assuming it is a protocol 1.2 or higher server)
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.SessionMarkComplete.#ctor(System.Guid,System.Guid)">
            <summary>
            Create a new session header upload request.
            </summary>
            <param name="sessionId"></param>
            <param name="clientId"></param>
        </member>
        <member name="P:Gibraltar.Server.Client.SessionMarkComplete.ClientId">
            <summary>
            The unique Id of this client
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.SessionMarkComplete.SessionId">
            <summary>
            The unique Id of the session that is complete
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.SessionMarkComplete.OnProcessRequest(Gibraltar.Server.Client.IWebChannelConnection)">
            <summary>
            Implemented by inheritors to perform the request on the provided web client.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:Gibraltar.Server.Client.SessionUploadRequest">
            <summary>
            A web channel request to upload a session file or full session stream
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.SessionUploadRequest.#ctor(System.Guid,Gibraltar.Monitor.LocalRepository,System.Guid,System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Create a new session upload request.
            </summary>
            <param name="clientId"></param>
            <param name="repository"></param>
            <param name="sessionId"></param>
            <param name="fileId"></param>
            <param name="purgeSessionOnSuccess">Indicates if the session should be purged from the repository once it has been sent successfully.</param>
        </member>
        <member name="M:Gibraltar.Server.Client.SessionUploadRequest.PrepareSession">
            <summary>
            Initialize the upload request and underlying session data for transport.
            </summary>
            <returns>True if the session has been initialized and this is the only upload request trying to process this data.</returns>
            <remarks>If the session isn't already being transported to this endpoint then a lock will be set for transport.
            This request must be disposed to ensure this lock is released in a timely manner.</remarks>
        </member>
        <member name="P:Gibraltar.Server.Client.SessionUploadRequest.Repository">
            <summary>
            The repository the session upload request is coming from
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.SessionUploadRequest.ClientId">
            <summary>
            The unique id to use for the client sending the session
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.SessionUploadRequest.SessionId">
            <summary>
            The unique id of the session being sent.
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.SessionUploadRequest.FileId">
            <summary>
            Optional.  The unique id of the file within the session being sent.
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.SessionUploadRequest.PurgeSessionOnSuccess">
            <summary>
            Indicates if the session should be purged from the repository once it has been sent successfully.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.SessionUploadRequest.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Server.Client.SessionUploadRequest.Dispose(System.Boolean)">
            <summary>
            Dispose managed resources
            </summary>
            <param name="releaseManaged"></param>
        </member>
        <member name="M:Gibraltar.Server.Client.SessionUploadRequest.OnProcessRequest(Gibraltar.Server.Client.IWebChannelConnection)">
            <summary>
            Implemented by inheritors to perform the request on the provided web client.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Gibraltar.Server.Client.SessionUploadRequest.SafeDeleteTemporaryData">
            <summary>
            Removes all of the temporary data used to transfer the session without allowing exceptions to propagate on failure.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.SessionUploadRequest.GenerateTemporarySessionPath">
            <summary>
            The temporary path to put all of the transfer information for this session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.SessionUploadRequest.GenerateTemporarySessionFileName">
            <summary>
            The file name (without extension) for this session
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.SessionUploadRequest.GenerateTemporarySessionFileNamePath">
            <summary>
            The full file name and path (without extension) for the transfer information for this session
            </summary>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Server.Client.WebChannel">
            <summary>
            Provides in-order communication with a remote web server.
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.WebChannel.LogCategory">
            <summary>
            The log category for the server client
            </summary>
        </member>
        <member name="E:Gibraltar.Server.Client.WebChannel.ConnectionStateChanged">
            <summary>
            Raised whenever the connection state changes.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.#ctor(Gibraltar.Server.Client.IClientLogger,System.String)">
            <summary>
            Create a new web channel to the specified host.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.#ctor(Gibraltar.Server.Client.IClientLogger,System.Boolean,System.String,System.String,System.Version)">
            <summary>
            Create a new web channel to the specified host.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.#ctor(Gibraltar.Server.Client.IClientLogger,System.Boolean,System.String,System.Int32,System.String,System.Version)">
            <summary>
            Create a new web channel to the specified host.
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.WebChannel.AppProtocolVersion">
            <summary>
            Optional.  The version number to specify in the protocol header.
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.WebChannel.EnableLogging">
            <summary>
            Indicates if logging for events on the web channel is enabled or not.
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.WebChannel.AuthenticationProvider">
            <summary>
            The authentication provider to use for any requests that require authentication.
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.WebChannel.HostName">
            <summary>
            The DNS name of the server being connected to.
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.WebChannel.Port">
            <summary>
            The port number being used
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.WebChannel.UseSsl">
            <summary>
            Indicates if the channel is encrypted using SSL
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.WebChannel.ApplicationBaseDirectory">
            <summary>
            The path from the root of the web server to the start of the application (e.g. the virtual directory path)
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.WebChannel.EntryUri">
            <summary>
            The complete Uri to the start of all requests that can be executed on this channel.
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.WebChannel.ConnectionState">
            <summary>
            The current connection state of the channel.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.ExecuteRequest(Gibraltar.Server.Client.IWebRequest,System.Int32)">
            <summary>
            Execute the provided request.
            </summary>
            <param name="newRequest"></param>
            <param name="maxRetries">The maximum number of times to retry the request.  Use -1 to retry indefinitely.</param>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.Authenticate">
            <summary>
            Authenticate now (instead of waiting for a request to fail)
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.Cancel">
            <summary>
            Cancel the current request.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.DownloadData(System.String,System.Nullable{System.Int32})">
            <summary>
            Downloads the resource with the specified URI to a byte array
            </summary>
            <param name="relativeUrl"></param>
            <param name="timeout">Optional.  The number of seconds to wait for a response to the request.</param>
            <returns>A byte array containing the body of the response from the resource</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.DownloadData(System.String,System.Collections.Generic.IList{Gibraltar.NameValuePair{System.String}},System.Nullable{System.Int32})">
            <summary>
            Downloads the resource with the specified URI to a byte array
            </summary>
            <param name="relativeUrl"></param>
            <param name="additionalHeaders">Extra headers to add to the request</param>
            <param name="timeout">Optional.  The number of seconds to wait for a response to the request.</param>
            <returns>A byte array containing the body of the response from the resource</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.DownloadFile(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Downloads the resource with the specified URI to a local file.
            </summary>
            <param name="relativeUrl"></param>
            <param name="destinationFileName"></param>
            <param name="timeout">Optional.  The number of seconds to wait for a response to the request.</param>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.DownloadString(System.String,System.Nullable{System.Int32})">
            <summary>
            Downloads the resource with the specified URI to a string
            </summary>
            <param name="relativeUrl"></param>
            <param name="timeout">Optional.  The number of seconds to wait for a response to the request.</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.DownloadString(System.String,System.Net.Http.HttpMethod,System.Nullable{System.Int32})">
            <summary>
            Downloads the resource with the specified URI to a string
            </summary>
            <param name="relativeUrl"></param>
            <param name="method">The HTTP method used to send the string to the resource.  If null, the default is GET</param>
            <param name="timeout">Optional.  The number of seconds to wait for a response to the request.</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.UploadData(System.String,System.Net.Http.HttpMethod,System.String,System.Byte[],System.Collections.Generic.IList{Gibraltar.NameValuePair{System.String}},System.Nullable{System.Int32})">
            <summary>
            Uploads the provided byte array to the specified URI using the provided method.
            </summary>
            <param name="relativeUrl">The URI of the resource to receive the data. This URI must identify a resource that can accept a request sent with the method requested.</param>
            <param name="method">The HTTP method used to send the string to the resource.  If null, the default is POST</param>
            <param name="contentType">The content type to inform the server of for this file</param>
            <param name="data"></param>
            <param name="additionalHeaders">Extra headers to add to the request</param>
            <param name="timeout">Optional.  The number of seconds to wait for a response to the request.</param>
            <returns>A byte array containing the body of the response from the resource</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.UploadFile(System.String,System.Net.Http.HttpMethod,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Uploads the specified local file to the specified URI using the specified method
            </summary>
            <param name="relativeUrl">The URI of the resource to receive the file. This URI must identify a resource that can accept a request sent with the method requested.</param>
            <param name="method">The HTTP method used to send the string to the resource.  If null, the default is POST</param>
            <param name="contentType">The content type to inform the server of for this file</param>
            <param name="sourceFileNamePath"></param>
            <param name="timeout">Optional.  The number of seconds to wait for a response to the request.</param>
            <returns>A byte array containing the body of the response from the resource</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.UploadString(System.String,System.Net.Http.HttpMethod,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Uploads the specified string to the specified resource, using the specified method
            </summary>
            <param name="relativeUrl">The URI of the resource to receive the string. This URI must identify a resource that can accept a request sent with the method requested.</param>
            <param name="method">The HTTP method used to send the string to the resource.  If null, the default is POST</param>
            <param name="contentType">The content type to inform the server of for this file</param>
            <param name="data">The string to be uploaded. </param>
            <param name="timeout">Optional.  The number of seconds to wait for a response to the request.</param>
            <returns>A string containing the body of the response from the resource</returns>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.Dispose(System.Boolean)">
            <summary>
            Dispose managed objects
            </summary>
            <param name="releaseManagedObjects"></param>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.OnConnectionStateChanged(Gibraltar.Server.Client.ChannelConnectionState)">
            <summary>
            Raises the ConnectionStateChanged event
            </summary>
            <param name="state">The new connection state</param>
            <remarks>Note to inheritors:  be sure to call the base implementation to ensure the event is raised.</remarks>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.CanRetry(System.Int32,System.Int32)">
            <summary>
            Indicates if we can continue retrying.
            </summary>
            <param name="maxRetries"></param>
            <param name="errorCount"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.PreProcessRequest(System.String@)">
            <summary>
            Performs request processing just prior to execution but after the IWebRequest has called.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.PreProcessRequest(System.String@,System.Collections.Generic.IList{Gibraltar.NameValuePair{System.String}})">
            <summary>
            Performs request processing just prior to execution but after the IWebRequest has called.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.PreProcessRequest(System.String@,System.Net.Http.HttpMethod@,System.Collections.Generic.IList{Gibraltar.NameValuePair{System.String}})">
            <summary>
            Performs request processing just prior to execution but after the IWebRequest has called.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.SetConnectionState(Gibraltar.Server.Client.ChannelConnectionState)">
            <summary>
            Set a new connection state, raising an event if it has changed.
            </summary>
            <param name="newState"></param>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.GetCommonCancellationToken">
            <summary>
            Get a cancellation token for the channel's explicit cancel source
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.GetUseCompatiblilityMethodsOverride(System.String)">
            <summary>
            Get the current cached compatibility method setting for a server.
            </summary>
            <param name="server">The DNS name of the server</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.GetUseHttpVersion10Override(System.String)">
            <summary>
            Get the current cached compatibility method setting for a server.
            </summary>
            <param name="server">The DNS name of the server</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.SetUseCompatiblilityMethodsOverride(System.String,System.Boolean)">
            <summary>
            Update the cached compatibility methods setting for a server (we assume a server will either need it or not)
            </summary>
            <param name="server">The DNS name of the server</param>
            <param name="useCompatibilityMethods">the new setting</param>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannel.SetUseHttpVersion10Override(System.String,System.Boolean)">
            <summary>
            Update the cached HTTP protocol version setting for a server (we assume a server will either need it or not)
            </summary>
            <param name="server">The DNS name of the server</param>
            <param name="useHttpVersion10">the new setting</param>
        </member>
        <member name="T:Gibraltar.Server.Client.WebChannelAuthorizationException">
            <summary>
            Thrown by the web channel when it is unable to authenticate to the remote server.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannelAuthorizationException.#ctor(System.String,System.Exception,System.Uri)">
            <summary>
            Create a new authorization exception
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannelAuthorizationException.#ctor(System.String)">
            <summary>
            Create a new authorization exception
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannelBadRequestException.#ctor(System.String,System.Exception,System.Uri)">
            <summary>
            Create a new Bad Request (400) exception
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="requestUri"></param>
        </member>
        <member name="T:Gibraltar.Server.Client.WebChannelConnectFailureException">
            <summary>
            An exception thrown to indicate a connection failure on the web channel.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannelConnectFailureException.#ctor(System.String,System.Exception,System.Uri)">
            <summary>
            Create a new connection failure exception
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannelConnectFailureException.#ctor(System.String)">
            <summary>
            Create a new connection failure exception
            </summary>
        </member>
        <member name="T:Gibraltar.Server.Client.WebChannelException">
            <summary>
            The base class for all exceptions thrown by the Web Channel
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannelException.#ctor(System.String,System.Exception,System.Uri)">
            <summary>
            Create a new web channel exception
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannelException.#ctor(System.String)">
            <summary>
            Create a new web channel exception
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.WebChannelException.RequestUri">
            <summary>
            the url that was requested.
            </summary>
        </member>
        <member name="T:Gibraltar.Server.Client.WebChannelFileNotFoundException">
            <summary>
            Thrown by the web channel when the server reports that the file was not found..
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannelFileNotFoundException.#ctor(System.String,System.Exception,System.Uri)">
            <summary>
            Create a new file not found exception
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="requestUri"></param>
        </member>
        <member name="T:Gibraltar.Server.Client.WebChannelRequestBase">
            <summary>
            An abstract implementation of a web request that simplifies making new requests.
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.WebChannelRequestBase.GZipContentType">
            <summary>
            The standard content type for GZip'd data.
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.WebChannelRequestBase.BinaryContentType">
            <summary>
            The standard content type for raw binary data.
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.WebChannelRequestBase.ZipContentType">
            <summary>
            The standard content type for a zip file
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.WebChannelRequestBase.XmlContentType">
            <summary>
            The standard content type for XML data
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.WebChannelRequestBase.TextContentType">
            <summary>
            The standard content type for text data
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannelRequestBase.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Create a new web channel request
            </summary>
            <param name="supportsAuthentication"></param>
            <param name="requiresAuthentication"></param>
        </member>
        <member name="P:Gibraltar.Server.Client.WebChannelRequestBase.RequiresAuthentication">
            <summary>
            Indicates if the web request requires authentication (so the channel should authenticate before attempting the request)
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.WebChannelRequestBase.SupportsAuthentication">
            <summary>
            Indicates if the web request supports authentication, so if the server requests credentials the request can provide them.
            </summary>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannelRequestBase.ProcessRequest(Gibraltar.Server.Client.IWebChannelConnection)">
            <summary>
            Perform the request against the specified web client connection.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannelRequestBase.OnProcessRequest(Gibraltar.Server.Client.IWebChannelConnection)">
            <summary>
            Implemented by inheritors to perform the request on the provided web client.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Gibraltar.Server.Client.WebChannelRequestBase.ConvertXmlToByteArray``1(``0)">
            <summary>
            Convert the provided XML fragment to a byte array of UTF8 data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlFragment"></param>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Server.Client.WebRequestEventArgs">
            <summary>
            Event arguments for tracking the state of a web request
            </summary>
        </member>
        <member name="P:Gibraltar.Server.Client.WebRequestEventArgs.State">
            <summary>
            The state of the web request when the event was raised.
            </summary>
        </member>
        <member name="T:Gibraltar.Server.Client.WebRequestState">
            <summary>
            The state of a web request
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.WebRequestState.New">
            <summary>
            Not yet processed
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.WebRequestState.Completed">
            <summary>
            Completed successfully.
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.WebRequestState.Canceled">
            <summary>
            Canceled before it could be completed
            </summary>
        </member>
        <member name="F:Gibraltar.Server.Client.WebRequestState.Error">
            <summary>
            Attempted but generated an error.
            </summary>
        </member>
        <member name="T:Gibraltar.Server.Client.WebRequestEventHandler">
            <summary>
            Delegate definition for a web request event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Gibraltar.StringReference">
            <summary>
            Provides a way to ensure a string is a reference to a single copy instead of creating multiple copies.
            </summary>
        </member>
        <member name="P:Gibraltar.StringReference.Disabled">
            <summary>
            Indicates if the reference cache is disabled.
            </summary>
            <remarks>When disabled each method returns immediately and the input string is returned.  This allows comparision of 
            behavior with and without the cache without changing code.</remarks>
        </member>
        <member name="M:Gibraltar.StringReference.SwapReference(System.String@)">
            <summary>
            Swap the provided string for its common reference
            </summary>
            <param name="baseline">The string to be looked up and exchanged for its reference.</param>
            <remarks>If the baseline isn't already in the reference cache it will be added.  The cache is automatically pruned to
            prevent it from consuming excess memory.</remarks>
        </member>
        <member name="M:Gibraltar.StringReference.GetReference(System.String)">
            <summary>
            Get the reference value for the provided baseline value.
            </summary>
            <param name="baseline"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.StringReference.Pack">
            <summary>
            Check the cache for garbage collected values.
            </summary>
        </member>
        <member name="T:Gibraltar.StringReference.WeakStringCollection">
            <summary>
            Keeps one or more weak references to strings which all have the same hash code.
            </summary>
            <remarks>A single string (the vast majority of cases) will be kept as a single reference.  When collisions
            put more than one string in the same hash code the extras will be stored in an array.  The array will allocate
            in increments of 4 (allowing 3 more before the next expand).  Packing thus requires a linear walk of the array
            to move remaining references up, and this can also be done when simply looking up a reference to consider
            adding it to the collection (which requires a linear walk anyway).</remarks>
        </member>
        <member name="M:Gibraltar.StringReference.WeakStringCollection.#ctor(System.String)">
            <summary>
            Construct a new collection with an initial string reference (required).
            </summary>
            <param name="firstString"></param>
        </member>
        <member name="P:Gibraltar.StringReference.WeakStringCollection.Count">
            <summary>
            Get the total number of string references in this collection.  (Some references may no longer be valid.)
            </summary>
        </member>
        <member name="M:Gibraltar.StringReference.WeakStringCollection.Pack">
            <summary>
            Perform a pack on this collection.
            </summary>
            <returns>The total number of string references remaining after the pack.</returns>
        </member>
        <member name="M:Gibraltar.StringReference.WeakStringCollection.PackAndOrAdd(System.String@)">
            <summary>
            Add an optional new string to this collection and perform a pack on this collection while doing so.
            </summary>
            <param name="newString">A new string to add, or null if only a pack is desired.  If the string already
            exists in this collection, the one from the collection will be stored in the reference.</param>
            <returns>The total number of string references remaining after the pack.</returns>
        </member>
        <member name="M:Gibraltar.StringReference.WeakStringCollection.CheckWeakReference(System.WeakReference@,System.String@)">
            <summary>
            Check a reference for validity and optional match against a given string.
            </summary>
            <param name="reference">The WeakReference to check.  Will be set to null if invalid.</param>
            <param name="newString">The string to match against.  Will be replaced with stored copy if an equal match.</param>
            <returns>True if it was an equal match, false if not a match.</returns>
        </member>
    </members>
</doc>
