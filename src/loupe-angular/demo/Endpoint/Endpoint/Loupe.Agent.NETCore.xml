<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Loupe.Agent.NETCore</name>
    </assembly>
    <members>
        <member name="T:Gibraltar.Agent.AsyncTaskResult">
            <summary>
            The result of processing an asynchronous task
            </summary>
            <remarks>For any value better than Error the task did complete its primary purpose.</remarks>
        </member>
        <member name="F:Gibraltar.Agent.AsyncTaskResult.None">
            <summary>
            The severity level is uninitialized and thus unknown.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.AsyncTaskResult.Canceled">
            <summary>
            The task was canceled before it could complete or fail to complete.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.AsyncTaskResult.Error">
            <summary>
            The task failed.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.AsyncTaskResult.Warning">
            <summary>
            The task at least partially succeeded but there was a noncritical problem.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.AsyncTaskResult.Information">
            <summary>
            The task succeeded but generated an informational message.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.AsyncTaskResult.Success">
            <summary>
            The task succeeded completely.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Data.IApplicationUser">
            <summary>
            Extended information about a single user the application
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.IApplicationUser.Key">
            <summary>
            Optional. An absolute, unique key for the user to use as a primary match
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.IApplicationUser.FullyQualifiedUserName">
            <summary>
            The fully qualified user name
            </summary>
            <remarks>If Key isn't specified this value is used as the alternate key</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Data.IApplicationUser.Caption">
            <summary>
            A display label for the user (such as their full name)
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.IApplicationUser.EmailAddress">
            <summary>
            Optional.  A primary email address for the user
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.IApplicationUser.Phone">
            <summary>
            Optional.  A phone number or other telecommunication alias
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.IApplicationUser.Organization">
            <summary>
            Optional.  A label for the organization this user is a part of
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.IApplicationUser.Role">
            <summary>
            Optional.  A primary role for this user with respect to this application
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.IApplicationUser.Tenant">
            <summary>
            Optional.  The primary tenant this user is a part of.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.IApplicationUser.Properties">
            <summary>
            Application provided properties 
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Data.IExceptionInfo">
            <summary>
            An interface which provides recorded information about an Exception.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.IExceptionInfo.TypeName">
            <summary>
            The full name of the type of the Exception.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.IExceptionInfo.Message">
            <summary>
            The Message string of the Exception.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.IExceptionInfo.Source">
            <summary>
            A formatted string describing the source of an Exception.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.IExceptionInfo.StackTrace">
            <summary>
            A string dump of the Exception stack trace information.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.IExceptionInfo.InnerException">
            <summary>
            The information about this exception's inner exception (or null if none).
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Data.ILogMessage">
            <summary>
            An interface for accessing log message data.
            </summary>
            <remarks>Most string properties of this interface (except where otherwise noted) will not return null values.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.Id">
            <summary>
            A GUID identifying this log message, unique across all sessions.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.Sequence">
            <summary>
            The sequence number assigned to this log message, unique within this session.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.Timestamp">
            <summary>
            The timestamp of this log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.Severity">
            <summary>
            The severity of this log message (from Critical to Verbose).
            </summary>
            <remarks>Severities have lower numerical values the more severe a message is,
            with Critical = 1 and Verbose = 16 enabling numerical comparison to capture
            a given severity and worse or better.  For example, Severity &lt; LogMessageSeverity.Warning
            will match Error and Critical.  The enumeration values are the same as those used in the
            .NET Trace subsystem for equivalent severities.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.LogSystem">
            <summary>
            The log system which issued this log message.
            </summary>
            <remarks>Internally, Gibraltar generally uses &quot;Gibraltar&quot; for its own messages as well as those
            logged directly to the Log object, and &quot;Trace&quot; for messages captured via the .NET Trace subsystem.
            You can use your own value by using the Log.Write methods which are designed to enable forwarding messages
            from other log systems.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.CategoryName">
            <summary>
            The dot-delimited hierarchical category for this log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.UserName">
            <summary>
            The user name associated with this log message (often just the user who started the process).
            </summary>
            <remarks>If user anonymization is enabled in configuration this will reflect the anonymous value.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.Caption">
            <summary>
            The simple caption string for this log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.Description">
            <summary>
            The longer description for this log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.Details">
            <summary>
            The optional details XML for this log message (as a string).  (Or null if none.)
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.MethodName">
            <summary>
            The name of the method which originated this log message, unless unavailable.  (Can be null or empty.)
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.ClassName">
            <summary>
            The full name of the class containing this method which originated the log message, unless unavailable.  (Can be null or empty.)
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.FileName">
            <summary>
            The full path to the file containing this definition of the method which originated the log message, if available.  (Can be null or empty.)
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.LineNumber">
            <summary>
            The line number in the file at which the this message originated, if available.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.HasException">
            <summary>
            Whether or not this log message includes attached Exception information.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.Exception">
            <summary>
            The information about any Exception attached to this log message.  (Or null if none.)
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.ThreadId">
            <summary>
            The Managed Thread Id of the thread which originated this log message.
            </summary>
            <remarks>This is not the operating system thread Id as managed threads do not necessarily
            correspond to OS threads.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.ThreadName">
            <summary>
            The name of the thread which originated this log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.DomainId">
            <summary>
            The application domain identifier of the app domain which originated this log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.DomainName">
            <summary>
            The friendly name of the app domain which originated this log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.IsBackground">
            <summary>
            Indicates whether the thread which originated this log message is a background thread.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Data.ILogMessage.IsThreadPoolThread">
            <summary>
            Indicates whether the thread which originated this log message is a threadpool thread.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Data.ILogMessageCollection">
            <summary>
            A read-only collection of information describing one or more log messages.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Data.ILogMessageCollection.Clear">
            <summary>
            Not a valid operation.  This is a read-only collection.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Data.ILogMessageCollection.Add(Gibraltar.Agent.Data.ILogMessage)">
            <summary>
            Not a valid operation.  This is a read-only collection.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Data.ILogMessageCollection.Remove(Gibraltar.Agent.Data.ILogMessage)">
            <summary>
            Not a valid operation.  This is a read-only collection.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Data.ILogMessageCollection.Insert(System.Int32,Gibraltar.Agent.Data.ILogMessage)">
            <summary>
            Not a valid operation.  This is a read-only collection.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Data.ILogMessageCollection.RemoveAt(System.Int32)">
            <summary>
            Not a valid operation.  This is a read-only collection.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.DelegateApplicationUserProvider">
            <summary>
            Wraps a delegate function for mapping an IPrincipal to an ApplicationUser
            </summary>
            <remarks>To support simple scenarios such as lambda functions, the DelegateApplicationUserProvider
            takes a simple function and uses it to resolve the application user.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.DelegateApplicationUserProvider.#ctor(System.Func{System.Security.Principal.IPrincipal,System.Lazy{Gibraltar.Monitor.ApplicationUser},System.Boolean})">
            <summary>
            Create a new application user provider for the specified function
            </summary>
            <param name="func">THe function to delegate user providing to</param>
        </member>
        <member name="M:Gibraltar.Agent.DelegateApplicationUserProvider.TryGetApplicationUser(System.Security.Principal.IPrincipal,System.Lazy{Gibraltar.Monitor.ApplicationUser})">
            <inheritdoc />
        </member>
        <member name="T:Gibraltar.Agent.DelegatePrincipalResolver">
            <summary>
            Resolve the current IPrincipal using a delegate
            </summary>
            <remarks>This resolver takes a simple function to resolve the IPrincipal, making it easy to
            use a lambda or local function.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.DelegatePrincipalResolver.#ctor(System.Func{System.Security.Principal.IPrincipal})">
            <summary>
            Create a resolver with the provided function.
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:Gibraltar.Agent.DelegatePrincipalResolver.TryResolveCurrentPrincipal(System.Security.Principal.IPrincipal@)">
            <inheritdoc />
        </member>
        <member name="T:Gibraltar.Agent.IMessageSourceProvider">
            <summary>
            An interface used to provided the details of the origin (class, method, and
            source code file) of a log message when passing messages from an external log system to
            the Loupe Agent.
            </summary>
            <remarks>
            	<para>Any field that isn't available can safely return null.</para>
            	<para>
                    This interface is intended for use with the <see cref="M:Gibraltar.Agent.Log.Write(Gibraltar.Agent.LogMessageSeverity,System.String,Gibraltar.Agent.IMessageSourceProvider,System.Security.Principal.IPrincipal,System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
                    Log.Write</see> method when forwarding data from another logging
                    system that has already determined the correct origin of a logging statement.
                    If this information is not available then you can either use the alternate
                    <see cref="M:Gibraltar.Agent.Log.Write(Gibraltar.Agent.LogMessageSeverity,System.String,System.Int32,System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
                    Log.Write</see> method that will automatically determine
                    the message source or pass Null to indicate that no location information is
                    available.
                </para>
            	<para>The Loupe Agent will read all of the properties of this interface during
                the call to Log.Write and will not retain any reference after the call returns.
                Because of this, a range of implementations can be done ranging from creating an
                object that implements this interface being created for every Log call to having
                one object that is passed for every call.</para>
            </remarks>
            <remarks>
            	<para>Any field that isn't available can safely return null.</para>
            	<para>This interface is intended for use with the Log.Write method when forwarding
                data from another logging system that has already determined the correct origin of
                a logging statement. If this information is not available then you can either use
                the alternate Log.Write method that will automatically determine the message source
                or pass Null to indicate that no location information is available.</para>
            	<para>The Loupe Agent will read all of the properties of this interface during
                the call to Log.Write and will not retain any reference after the call returns.
                Because of this, a range of implementations can be done ranging from creating an
                object that implements this interface being created for every Log call to having
                one object that is passed for every call.</para>
            </remarks>
            <seealso cref="T:Gibraltar.Agent.Log">Log Class</seealso>
            <seealso cref="M:Gibraltar.Agent.Log.Write(Gibraltar.Agent.LogMessageSeverity,System.String,Gibraltar.Agent.IMessageSourceProvider,System.Security.Principal.IPrincipal,System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">Write Method (Gibraltar.Agent.Log)</seealso>
        </member>
        <member name="P:Gibraltar.Agent.IMessageSourceProvider.MethodName">
            <summary>
            Should return the simple name of the method which issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.IMessageSourceProvider.ClassName">
            <summary>
            Should return the full name of the class (with namespace) whose method issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.IMessageSourceProvider.FileName">
            <summary>
            Should return the name of the file containing the method which issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.IMessageSourceProvider.LineNumber">
            <summary>
            Should return the line within the file at which the log message was issued.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Internal.ExceptionInfo">
            <summary>
            A wrapper class which provides read-only access to our internal ExceptionInfo properties.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.ExceptionInfo.TypeName">
            <summary>
            The full name of the type of the Exception.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.ExceptionInfo.Message">
            <summary>
            The Message string of the Exception.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.ExceptionInfo.Source">
            <summary>
            A formatted string describing the source of an Exception.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.ExceptionInfo.StackTrace">
            <summary>
            A string dump of the Exception stack trace information.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.ExceptionInfo.InnerException">
            <summary>
            The information about this exception's inner exception (or null if none).
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Internal.LogMessageInfo">
            <summary>
            An interface for accessing log message data.
            </summary>
            <remarks>Most string properties of this interface (except where otherwise noted) will not return null values.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.Session">
            <summary>
            The session this log message refers to
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.Id">
            <summary>
            A Guid identifying this log message, unique across all sessions.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.Sequence">
            <summary>
            The sequence number assigned to this log message, unique within this session.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.Timestamp">
            <summary>
            The timestamp of this log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.Severity">
            <summary>
            The severity of this log message (from Critical = 1 to Verbose = 16).
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.Loupe#Extensibility#Data#ILogMessage#Severity">
            <summary>
            The internal severity of this log message (from Critical = 1 to Verbose = 16).
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.LogSystem">
            <summary>
            The log system which issued this log message (e.g. "Trace" or "Gibraltar").
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.CategoryName">
            <summary>
            The dot-delimited hierarchical category for this log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.UserName">
            <summary>
            The user name associated with this log message (often just the user who started the process).
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.Caption">
            <summary>
            The simple caption string for this log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.Description">
            <summary>
            The longer description for this log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.Details">
            <summary>
            The optional details XML for this log message (as a string). (Or null if none.)
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.MethodName">
            <summary>
            The name of the method which originated this log message, unless unavailable.  (Can be null or empty.)
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.ClassName">
            <summary>
            The full name of the class containing this method which originated the log message, unless unavailable.  (Can be null or empty.)
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.FileName">
            <summary>
            The full path to the file containing this definition of the method which originated the log message, if available.  (Can be null or empty.)
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.LineNumber">
            <summary>
            The line number in the file at which the this message originated, if available.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.HasException">
            <summary>
            Whether or not this log message includes attached Exception information.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.Loupe#Extensibility#Data#ILogMessage#Exception">
            <summary>
            The information about any Exception attached to this log message.  (Or null if none.)
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.Exception">
            <summary>
            The information about any Exception attached to this log message.  (Or null if none.)
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.ThreadId">
            <summary>
            The managed thread ID of the thread which originated this log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.ThreadName">
            <summary>
            The name of the thread which originated this log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.DomainId">
            <summary>
            The application domain identifier of the app domain which originated this log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.DomainName">
            <summary>
            The friendly name of the app domain which originated this log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.IsBackground">
            <summary>
            Indicates whether the thread which originated this log message is a background thread.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.IsThreadPoolThread">
            <summary>
            Indicates whether the thread which originated this log message is a threadpool thread.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.HasThreadInfo">
            <summary>
            Indicates if the log message has related thread information.  If false, some calls to thread information may throw exceptions.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.HasMethodInfo">
            <summary>
            Indicates if the class name and method name are available.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.LogMessageInfo.HasSourceLocation">
            <summary>
            Indicates if the file name and line number are available.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Internal.LogMessageInfo.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this log message is the same as another specified object.
            </summary>
            <param name="obj">Another object to compare this log message to.</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Agent.Internal.LogMessageInfo.Equals(Gibraltar.Agent.Data.ILogMessage)">
            <summary>
            Returns a value indicating whether this log message is the same as another specified log message.
            </summary>
            <param name="other">Another log message to compare this log message to.</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Agent.Internal.LogMessageInfo.Equals(Loupe.Extensibility.Data.ILogMessage)">
            <summary>
            Returns a value indicating whether this log message is the same as another specified log message.
            </summary>
            <param name="other">Another log message to compare this log message to.</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Agent.Internal.LogMessageInfo.CompareTo(Gibraltar.Agent.Data.ILogMessage)">
            <summary>
            Compares this log message to another and returns an indication of their relative order of occurrence.
            </summary>
            <param name="other">Another log message to compare this log message to.</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Agent.Internal.LogMessageInfo.CompareTo(Loupe.Extensibility.Data.ILogMessage)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: 
                                Value 
                                Meaning 
                                Less than zero 
                                This object is less than the <paramref name="other"/> parameter.
                                Zero 
                                This object is equal to <paramref name="other"/>. 
                                Greater than zero 
                                This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
        </member>
        <member name="M:Gibraltar.Agent.Internal.LogMessageInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Agent.Internal.LogMessageInfoCollection">
            <summary>
            A read-only collection of info describing one or more log messages.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Internal.LogMessageInfoCollection.Clear">
            <summary>
            Not a valid operation.  This is a read-only collection.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Internal.LogMessageInfoCollection.Add(Gibraltar.Agent.Data.ILogMessage)">
            <summary>
            Not a valid operation.  This is a read-only collection.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Internal.LogMessageInfoCollection.Remove(Gibraltar.Agent.Data.ILogMessage)">
            <summary>
            Not a valid operation.  This is a read-only collection.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Internal.LogMessageInfoCollection.Insert(System.Int32,Gibraltar.Agent.Data.ILogMessage)">
            <summary>
            Not a valid operation.  This is a read-only collection.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Internal.LogMessageInfoCollection.RemoveAt(System.Int32)">
            <summary>
            Not a valid operation.  This is a read-only collection.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Internal.MessageSourceProvider">
            <summary>
            Exchanges information between the Agent's IMessageSourceProvider implementation and the internal Monitor implementation.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.MessageSourceProvider.MethodName">
            <summary>
            Should return the simple name of the method which issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.MessageSourceProvider.ClassName">
            <summary>
            Should return the full name of the class (with namespace) whose method issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.MessageSourceProvider.FileName">
            <summary>
            Should return the name of the file containing the method which issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Internal.MessageSourceProvider.LineNumber">
            <summary>
            Should return the line within the file at which the log message was issued.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Internal.SessionSummaryPredicate">
            <summary>
            Adapts a SessionSummary predicate to the internal ISessionSummary used in the core
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Internal.SessionSummaryPredicate.Predicate(Loupe.Extensibility.Data.ISessionSummary)">
            <summary>
            The adapter predicate
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Log">
            <summary>This static class is the primary API for logging with the Loupe Agent.</summary>
            <remarks>
            	<para>
                    This Log class provides the API for
                    directly logging to Loupe and for receiving log messages from logging
                    systems such as log4net. Messages sent directly to Loupe will not go
                    through System.Diagnostics.Trace and will not be seen by trace listeners or by
                    other logging systems, but can take direct advantage of Loupe's logging
                    features.
                </para>
            	<para>The logging API provides different groups of methods for different levels of
                simplicity verses flexibility.</para>
            	<list type="bullet">
            		<item><strong>Trace Methods:</strong> Designed to mirror the Trace class built
                    into .NET, these provide the simplest API and are a direct substitute for
                    existing calls that use the Trace method (simply change the class name from
                    System.Diagnostics.Trace to Gibraltar.Agent.Log)</item>
            		<item><strong>Severity Methods:</strong> A method for each Loupe severity
                    from Critical (the most severe) to Verbose (the least). These provide a full
                    featured API for logging directly to Loupe as part of your
                    application.</item>
            		<item><strong>Write Methods:</strong> Used to forward log messages into the
                    Loupe Agent from an external logging system or logging aggregation class.
                    These expose the most capability but are generally unnecessary outside of the
                    message forwarding scenario.</item>
            	</list>
            	<para><strong>Trace Methods</strong></para>
            	<para>
                    The various Trace methods provide a quick way to record a log message at a
                    chosen severity level with the fewest arguments to manage. These methods
                    include direct replacements for Trace.TraceInformation,
                    Trace.TraceWarning, and Trace.TraceError,
                    as well as a Trace() call (replacing the use of Trace.Write and Trace.WriteLine for logging
                    Verbose messages).
                </para>
            	<para>
                    In addition to the direct replacement calls for the Trace API an additional
                    <see cref="M:Gibraltar.Agent.Log.TraceCritical(System.String,System.Object[])">TraceCritical Method</see> method
                    was added for logging fatal errors.
                </para>
            	<para>Each of these methods also provides an overload which accepts an Exception
                object as the first parameter. By providing the exception object with the method,
                extended information about the exception is recorded which can significantly
                improve the utility of the log information without requiring it to be included in
                the message.</para>
            	<para>
                    When using Trace exclusively, it's recommended that you include a call to
                    Trace.Close at the very end of your application's execution. This will ensure
                    that all Trace Listeners are shut down correctly, and the Agent will use this
                    to record that the session closed normally and start its shutdown procedure by
                    automatically calling <see cref="M:Gibraltar.Agent.Log.EndSession">Log.EndSession</see>.
                </para>
            	<para>For more information, see <a href="Logging_Trace.html">Developer's Reference
                - Logging - Using with Trace</a>.</para>
            	<para><strong>Severity Methods</strong></para>
            	<para>The Severity Methods (named after each severity level) provide the most
                commonly-needed features of Loupe's logging capability. In order from most to
                least severe, these are:</para>
            	<list type="bullet">
            		<item>
            			<see cref="M:Gibraltar.Agent.Log.Critical(System.String,System.String,System.String,System.Object[])">Log.Critical</see>
            		</item>
            		<item>
            			<see cref="M:Gibraltar.Agent.Log.Error(System.String,System.String,System.String,System.Object[])">Log.Error</see>
            		</item>
            		<item>
            			<see cref="M:Gibraltar.Agent.Log.Warning(System.String,System.String,System.String,System.Object[])">Log.Warning</see>
            		</item>
            		<item>
            			<see cref="M:Gibraltar.Agent.Log.Information(System.String,System.String,System.String,System.Object[])">Log.Information</see>
            		</item>
            		<item>
            			<see cref="M:Gibraltar.Agent.Log.Verbose(System.String,System.String,System.String,System.Object[])">Log.Verbose</see>
            		</item>
            	</list>
            	<para>Each of these methods in their simplest form takes Category, Caption, and
                Description instead of just a single Message to take best advantage of Loupe's
                ability to group similar messages for analysis and reporting. Additional overloads
                allow an Exception object to be specified (regardless of severity) and allow the
                message to be committed to disk in the session file before the thread's execution
                continues.</para>
            	<para>For more advanced usage, each Severity method has a corresponding Detail
                method that supports recording an XML document string with details for more
                sophisticated examination. This information can be formatted in the Loupe
                Analyst to provide end users with extended drill-in data about a particular
                situation. Because the logging data is highly compressed (typically 80 percent or
                more for strings over 5kb), it's safe to record XML documents without overwhelming
                the session files.</para>
            	<para>For more information, see <a href="Logging_DirectLogging.html">Developer's
                Reference - Logging Directly to Loupe</a>.</para>
            	<para><strong>Write Method</strong></para>
            	<para>If you are already using a different logging system than Trace or the
                Loupe Agent you can forward messages from it into the Agent by using the Write
                method. The two overloads of the Write method are designed to support both full
                featured external log systems that can capture extended information, origin
                information for the log message, and even override the user identity.</para>
            	<para>
                    Another common scenario supported by Write is an existing application with a
                    central class that all logging is being routed through. The <see cref="M:Gibraltar.Agent.Log.Write(Gibraltar.Agent.LogMessageSeverity,System.String,System.Int32,System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
                    Log.Write</see> method is designed to support this easily while still allowing
                    you to take advantage of the safe formatting and origin determination
                    capabilities of the Loupe Agent.
                </para>
            	<para>For more information, see <a href="Logging_ExternalLogSystems.html">Developer's Reference - Logging - Using with
                External Log Systems</a>.</para>
            	<para><strong>Starting a Session</strong></para>
            	<para>
                    The Log object will attempt to start the first time it is used, or any time a
                    call is made to <see cref="M:Gibraltar.Agent.Log.StartSession">StartSession</see>. When it starts, it
                    will raise its <see cref="E:Gibraltar.Agent.Log.Initializing">Log.Initializing</see> event to allow
                    for configuration overrides to be done in code and for the startup sequence to
                    be canceled. If the startup is canceled, all API functions continue to work but
                    no Agent functionality is available. This is a high speed mode that allows any
                    agent overhead to be removed from the process without altering the control flow
                    or recompiling the application.
                </para>
            	<para><strong>Ending a Session</strong></para>
            	<para>
                    It's a best practice at the end of your application's normal execution path to
                    include a call to <see cref="M:Gibraltar.Agent.Log.EndSession">Log.EndSession</see>. This performs
                    several functions:
                </para>
            	<list type="number">
            		<item>It marks the session as ending normally. Regardless of how the process
                    exits after EndSession is called, it will not be considered crashed.</item>
            		<item>All queued information is flushed to disk and all subsequent write
                    requests are handled as WaitForCommit requests to ensure that no messages are
                    lost.</item>
            		<item>Various internal changes are made to ensure that the process will exit
                    quickly. If no EndSession call is made, the Agent may keep the process alive
                    even if it normally would have exited.</item>
            	</list>
            	<para>You can safely call EndSession multiple times.</para>
            	<para><strong>Configuring the Agent</strong></para>
            	<para>
                    The agent can be configured in the application configuration file, through
                    code, or both. To configure the agent in code you must subscribe to the
                    <see cref="E:Gibraltar.Agent.Log.Initializing">Log.Initializing</see> event before the agent is
                    started and then manipulate the <see cref="T:Loupe.Configuration.AgentConfiguration">Agent</see> configuration
                    object and its child objects. If any configuration was supplied in the
                    application configuration file that will have already been loaded into the
                    configuration objects when the event is raised.
                </para>
            </remarks>
            <seealso cref="!:Logging_Trace.html" cat="Developer's Reference">Logging - Using with Trace</seealso>
            <seealso cref="!:Logging_ExternalLogSystems.html" cat="Developer's Reference">Logging - Using with External Log Systems</seealso>
            <seealso cref="!:Logging_DirectLogging.html" cat="Developer's Reference">Logging - Using Loupe as a Log System</seealso>
        </member>
        <member name="F:Gibraltar.Agent.Log.PackageExtension">
            <summary>The file extension (without period) for a Loupe Package File.</summary>
        </member>
        <member name="T:Gibraltar.Agent.Log.InitializingEventHandler">
            <summary>
            Handler for the Initialize event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Gibraltar.Agent.Log.Initializing">
            <summary>
            Raised whenever the log system is being started to enable programmatic configuration.
            </summary>
            <remarks>You can cancel initialization by setting the cancel property to true in the event arguments. 
            If canceled, the log system will not record any information but allow all calls to be made.
            Even if canceled it is possible for the logging system to attempt to reinitialize if a call 
            is explicitly made to start a session.</remarks>
        </member>
        <member name="T:Gibraltar.Agent.Log.MessageEventHandler">
            <summary>
            Handler type for a message event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Gibraltar.Agent.Log.MessageFilterEventHandler">
            <summary>
            Handler type for a message filter event.
            </summary>
            <param name="sender">The sender of this event (the LiveLogViewer control instance or null for the main Loupe Live Viewer)</param>
            <param name="e">The Message Filter Event Args.</param>
        </member>
        <member name="T:Gibraltar.Agent.Log.MessageAlertEventHandler">
            <summary>
            Handler type for a message alert event.
            </summary>
            <param name="sender">The sender of this event.</param>
            <param name="e">The Message Alert Event Args.</param>
        </member>
        <member name="E:Gibraltar.Agent.Log.MessageAlert">
            <summary>
            Raised to alert subscribers to any Warning, Error, or Critical log messages, with optional throttling.
            </summary>
            <remarks>This event can be raised after a log message of Warning, Error, or Critical severity has been committed.
            This allows the client to take action such as to set the <see cref="P:Gibraltar.Agent.Log.SendSessionsOnExit">SendSessionsOnExit</see>
            flag or request that the active session be sent immediately.  Setting the
            <see cref="P:Gibraltar.Agent.LogMessageAlertEventArgs.MinimumDelay">MinimumDelay</see>
            property in the event args will specify a minimum time before the event may be raised again (only the last value
            set by any subscriber takes effect).  Any new qualifying log messages received during a required wait period will
            be queued and included as a batch in the next event, unless there is an excessive number in which case later
            ones will be ignored.  A number of handy read-only properties provide quick summaries for simple filtering
            (e.g. if the client only cares about Error and Critical messages, not Warnings).
            </remarks>
        </member>
        <member name="E:Gibraltar.Agent.Log.MessagePublished">
            <summary>
            Raised to publish log messages as they are committed
            </summary>
            <remarks>This event is raised after a log message is committed.  Any new qualifying log messages received during a required wait period will
            be queued and included as a batch in the next event, unless there is an excessive number in which case later
            ones will be ignored. </remarks>
        </member>
        <member name="P:Gibraltar.Agent.Log.SessionSummary">
            <summary>
            The common information about the active log session.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Log.ApplicationUserProvider">
            <summary>
            An implementation of IApplicationUserProvider to capture Application User details from an IPrinciple
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Log.PrincipalResolver">
            <summary>
            An implementation of IPrincipalResolver to determine the IPrinciple for each log message and metric sample
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Log.SendSessionsOnExit">
            <summary>
            Indicates if the agent should package &amp; send sessions for the current application after this session exits.
            </summary>
            <remarks>
            When true the system will automatically spawn the packager to send all unsent
            sessions for the current application. This is only supported if the packager is enabled
            and configured to submit sessions via Loupe Server and/or to send packages via email.
            Loupe Server will be used by preference if available, but email can be used as a fall-back
            option.  If sessions can't be sent on exit, the property can still be set but will stay false.
            No exception will be thrown.
            </remarks>
        </member>
        <member name="P:Gibraltar.Agent.Log.AgentVersion">
            <summary>
            The version information for the Loupe Agent.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Log.Verbose(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Verbose message directly to the Loupe log.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para></remarks>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Verbose(System.Exception,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Verbose message directly to the Loupe log with an attached Exception.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Verbose(Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Verbose message directly to the Loupe log, specifying Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>The writeMode argument allows the caller to specify WaitForCommit behavior, which will not return
            until the message has been committed to the session file on disk.  The Queued behavior used by default with
            other overloads of this method places the message on Loupe's central queue and then returns, allowing
            the current thread execution to continue while Loupe processes the queue on a separate thread.</para></remarks>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Verbose(System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Verbose message directly to the Loupe log with an attached Exception and specifying
            Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para>
            <para>The writeMode argument allows the caller to specify WaitForCommit behavior, which will not return
            until the message has been committed to the session file on disk.  The Queued behavior used by default with
            other overloads of this method places the message on Loupe's central queue and then returns, allowing
            the current thread execution to continue while Loupe processes the queue on a separate thread.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.VerboseDetail(System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Verbose message directly to the Loupe log.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.  Also see the Write() method for when XML details
            are not needed.  This method is otherwise similar to Write().</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para></remarks>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.VerboseDetail(System.Exception,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Verbose message directly to the Loupe log with an attached Exception.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.VerboseDetail(Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Verbose message directly to the Loupe log, specifying Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para></remarks>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.VerboseDetail(System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Verbose message directly to the Loupe log with an optional attached Exception and
            specifying Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Information(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Information message directly to the Loupe log.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para></remarks>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Information(System.Exception,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Information message directly to the Loupe log with an attached Exception.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Information(Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Information message directly to the Loupe log, specifying Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>The writeMode argument allows the caller to specify WaitForCommit behavior, which will not return
            until the message has been committed to the session file on disk.  The Queued behavior used by default with
            other overloads of this method places the message on Loupe's central queue and then returns, allowing
            the current thread execution to continue while Loupe processes the queue on a separate thread.</para></remarks>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Information(System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Information message directly to the Loupe log with an attached Exception and specifying
            Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para>
            <para>The writeMode argument allows the caller to specify WaitForCommit behavior, which will not return
            until the message has been committed to the session file on disk.  The Queued behavior used by default with
            other overloads of this method places the message on Loupe's central queue and then returns, allowing
            the current thread execution to continue while Loupe processes the queue on a separate thread.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.InformationDetail(System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Information message directly to the Loupe log.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.  Also see the Write() method for when XML details
            are not needed.  This method is otherwise similar to Write().</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para></remarks>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.InformationDetail(System.Exception,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Information message directly to the Loupe log with an attached Exception.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.InformationDetail(Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Information message directly to the Loupe log, specifying Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para></remarks>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.InformationDetail(System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Information message directly to the Loupe log with an optional attached Exception and
            specifying Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Warning(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Warning message directly to the Loupe log.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para></remarks>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Warning(System.Exception,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Warning message directly to the Loupe log with an attached Exception.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Warning(Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Warning message directly to the Loupe log, specifying Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>The writeMode argument allows the caller to specify WaitForCommit behavior, which will not return
            until the message has been committed to the session file on disk.  The Queued behavior used by default with
            other overloads of this method places the message on Loupe's central queue and then returns, allowing
            the current thread execution to continue while Loupe processes the queue on a separate thread.</para></remarks>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Warning(System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Warning message directly to the Loupe log with an attached Exception and specifying
            Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para>
            <para>The writeMode argument allows the caller to specify WaitForCommit behavior, which will not return
            until the message has been committed to the session file on disk.  The Queued behavior used by default with
            other overloads of this method places the message on Loupe's central queue and then returns, allowing
            the current thread execution to continue while Loupe processes the queue on a separate thread.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.WarningDetail(System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Warning message directly to the Loupe log.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.  Also see the Write() method for when XML details
            are not needed.  This method is otherwise similar to Write().</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para></remarks>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.WarningDetail(System.Exception,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Warning message directly to the Loupe log with an attached Exception.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.WarningDetail(Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Warning message directly to the Loupe log, specifying Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para></remarks>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.WarningDetail(System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Warning message directly to the Loupe log with an optional attached Exception and
            specifying Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Error(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Error message directly to the Loupe log.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para></remarks>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Error(System.Exception,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Error message directly to the Loupe log with an attached Exception.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Error(System.Exception,System.Boolean,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Error message directly to the Loupe log with an attached Exception.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para>
            <para>If attributeToException is set to true the log message will be attributed to the location where the 
            provided exception was thrown from instead of the caller of this method.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="attributeToException">True to record this log message based on where the exception was thrown, not where this method was called</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Error(Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Error message directly to the Loupe log, specifying Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>The writeMode argument allows the caller to specify WaitForCommit behavior, which will not return
            until the message has been committed to the session file on disk.  The Queued behavior used by default with
            other overloads of this method places the message on Loupe's central queue and then returns, allowing
            the current thread execution to continue while Loupe processes the queue on a separate thread.</para></remarks>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Error(System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Error message directly to the Loupe log with an attached Exception and specifying
            Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para>
            <para>The writeMode argument allows the caller to specify WaitForCommit behavior, which will not return
            until the message has been committed to the session file on disk.  The Queued behavior used by default with
            other overloads of this method places the message on Loupe's central queue and then returns, allowing
            the current thread execution to continue while Loupe processes the queue on a separate thread.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Error(System.Exception,System.Boolean,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Error message directly to the Loupe log with an attached Exception and specifying
            Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para>
            <para>If attributeToException is set to true the log message will be attributed to the location where the 
            provided exception was thrown from instead of the caller of this method.</para>
            <para>The writeMode argument allows the caller to specify WaitForCommit behavior, which will not return
            until the message has been committed to the session file on disk.  The Queued behavior used by default with
            other overloads of this method places the message on Loupe's central queue and then returns, allowing
            the current thread execution to continue while Loupe processes the queue on a separate thread.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="attributeToException">True to record this log message based on where the exception was thrown, not where this method was called</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.ErrorDetail(System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Error message directly to the Loupe log.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.  Also see the Write() method for when XML details
            are not needed.  This method is otherwise similar to Write().</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para></remarks>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.ErrorDetail(System.Exception,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Error message directly to the Loupe log with an attached Exception.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.ErrorDetail(System.Exception,System.Boolean,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Error message directly to the Loupe log with an attached Exception.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para>
            <para>If attributeToException is set to true the log message will be attributed to the location where the 
            provided exception was thrown from instead of the caller of this method.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="attributeToException">True to record this log message based on where the exception was thrown, not where this method was called</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.ErrorDetail(Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Error message directly to the Loupe log, specifying Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para></remarks>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.ErrorDetail(System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Error message directly to the Loupe log with an optional attached Exception and
            specifying Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.ErrorDetail(System.Exception,System.Boolean,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Error message directly to the Loupe log with an optional attached Exception and
            specifying Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para>
            <para>If attributeToException is set to true the log message will be attributed to the location where the 
            provided exception was thrown from instead of the caller of this method.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="attributeToException">True to record this log message based on where the exception was thrown, not where this method was called</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Critical(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Critical message directly to the Loupe log.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para></remarks>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Critical(System.Exception,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Critical message directly to the Loupe log with an attached Exception.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Critical(System.Exception,System.Boolean,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Critical message directly to the Loupe log with an attached Exception.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para>
            <para>If attributeToException is set to true the log message will be attributed to the location where the 
            provided exception was thrown from instead of the caller of this method.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="attributeToException">True to record this log message based on where the exception was thrown, not where this method was called</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Critical(Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Critical message directly to the Loupe log, specifying Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>The writeMode argument allows the caller to specify WaitForCommit behavior, which will not return
            until the message has been committed to the session file on disk.  The Queued behavior used by default with
            other overloads of this method places the message on Loupe's central queue and then returns, allowing
            the current thread execution to continue while Loupe processes the queue on a separate thread.</para></remarks>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Critical(System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Critical message directly to the Loupe log with an attached Exception and specifying
            Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead
            call the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para>
            <para>The writeMode argument allows the caller to specify WaitForCommit behavior, which will not return
            until the message has been committed to the session file on disk.  The Queued behavior used by default with
            other overloads of this method places the message on Loupe's central queue and then returns, allowing
            the current thread execution to continue while Loupe processes the queue on a separate thread.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Critical(System.Exception,System.Boolean,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a categorized Critical message directly to the Loupe log with an attached Exception and specifying
            Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides basic Loupe logging features for typical use.  Loupe supports
            a separate caption and description in log messages in order to provide better analysis capability.  Log
            messages can be grouped by their captions even while their full descriptions differ, so for more useful
            matching we don't provide format processing on the caption argument, only on the description argument.</para>
            <para>The caption and description arguments tolerate null and empty strings (e.g. a simple one-line message
            caption with no further description needed).  A null caption will cause the message caption to be extracted
            from the description after format processing (comparable to using the Trace...() methods which don't take a
            separate caption argument).  A valid string caption argument, including an empty string, will be taken as the
            intended caption; an empty caption string is thus possible, but not recommended.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para>
            <para>If attributeToException is set to true the log message will be attributed to the location where the 
            provided exception was thrown from instead of the caller of this method.</para>
            <para>The writeMode argument allows the caller to specify WaitForCommit behavior, which will not return
            until the message has been committed to the session file on disk.  The Queued behavior used by default with
            other overloads of this method places the message on Loupe's central queue and then returns, allowing
            the current thread execution to continue while Loupe processes the queue on a separate thread.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="attributeToException">True to record this log message based on where the exception was thrown, not where this method was called</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.CriticalDetail(System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Critical message directly to the Loupe log.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.  Also see the Write() method for when XML details
            are not needed.  This method is otherwise similar to Write().</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para></remarks>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.CriticalDetail(System.Exception,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Critical message directly to the Loupe log with an attached Exception.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.CriticalDetail(System.Exception,System.Boolean,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Critical message directly to the Loupe log with an attached Exception.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para>
            <para>If attributeToException is set to true the log message will be attributed to the location where the 
            provided exception was thrown from instead of the caller of this method.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="attributeToException">True to record this log message based on where the exception was thrown, not where this method was called</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.CriticalDetail(Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Critical message directly to the Loupe log, specifying Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para></remarks>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.CriticalDetail(System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Critical message directly to the Loupe log with an optional attached Exception and
            specifying Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>The log message will be attributed to the caller of this method.  Wrapper methods should instead call
            the Write() method in order to attribute the log message to their own outer callers.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.CriticalDetail(System.Exception,System.Boolean,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a detailed Critical message directly to the Loupe log with an optional attached Exception and
            specifying Queued or WaitForCommit behavior.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages to include an XML document
            (as a string) containing extended details about the message.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para>
            <para>If attributeToException is set to true the log message will be attributed to the location where the 
            provided exception was thrown from instead of the caller of this method.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="attributeToException">True to record this log message based on where the exception was thrown, not where this method was called</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Write(Gibraltar.Agent.LogMessageSeverity,System.String,System.Int32,System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a complete log message directly to the Loupe log from a wrapper method or bridging logic,
            attributing the source of the message farther up the call-stack.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages for use in wrapper methods and
            for bridging simple logging systems into Loupe.  Also see
            <see cref="M:Gibraltar.Agent.Log.Verbose(System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.Object[])">Verbose</see> and
            <see cref="M:Gibraltar.Agent.Log.VerboseDetail(System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">VerboseDetail</see>
            and their other overloads and related methods for simpler usage of XML details when the other advanced hooks
            are not needed.</para>
            <para>This overload of Write() is provided as an API hook for simple wrapping methods which need to attribute a
            log message to their own outer callers rather than to the direct caller of this method.  Passing a skipFrames
            of 0 would designate the caller of this method as the originator; a skipFrames of 1 would designate the caller
            of the caller of this method as the originator, and so on.  It will then extract information about
            the originator automatically based on the indicated stack frame.  Bridge logic adapting from a logging
            system which already determines and provides information about the originator (such as log4net) into
            Loupe should use the other overload of
            <see cref="M:Gibraltar.Agent.Log.Write(Gibraltar.Agent.LogMessageSeverity,System.String,Gibraltar.Agent.IMessageSourceProvider,System.Security.Principal.IPrincipal,System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">Write</see>,
            passing a customized IMessageSourceProvider.</para>
            <para>This method also requires explicitly selecting the LogWriteMode between Queued (the normal default,
            for optimal performance) and WaitForCommit (to help ensure critical information makes it to disk, e.g. before
            exiting the application upon return from this call).  See the <see cref="T:Gibraltar.Agent.LogWriteMode">LogWriteMode</see> enum
            for more information.</para>
            <para>This method also allows an optional Exception object to be attached to the log message (null for none).
            It can also include an optional XML document (as a string, or null for none) containing extended details about
            the message.</para></remarks>
            <param name="severity">The log message severity.</param>
            <param name="logSystem">The name of the originating log system (e.g. "Log4Net").</param>
            <param name="skipFrames">The number of stack frames to skip back over to determine the original caller.
            (0 means the immediate caller of this method; 1 means their immediate caller, and so on.)</param>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message. (May be null.)</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy.</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Write(Gibraltar.Agent.LogMessageSeverity,System.String,System.Int32,System.Exception,System.Boolean,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a complete log message directly to the Loupe log from a wrapper method or bridging logic,
            attributing the source of the message farther up the call-stack.
            </summary>
            <remarks><para>This method provides an advanced use of Loupe log messages for use in wrapper methods and
            for bridging simple logging systems into Loupe.  Also see
            <see cref="M:Gibraltar.Agent.Log.Verbose(System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.Object[])">Verbose</see> and
            <see cref="M:Gibraltar.Agent.Log.VerboseDetail(System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">VerboseDetail</see>
            and their other overloads and related methods for simpler usage of XML details when the other advanced hooks
            are not needed.</para>
            <para>This overload of Write() is provided as an API hook for simple wrapping methods which need to attribute a
            log message to their own outer callers rather than to the direct caller of this method.  Passing a skipFrames
            of 0 would designate the caller of this method as the originator; a skipFrames of 1 would designate the caller
            of the caller of this method as the originator, and so on.  It will then extract information about
            the originator automatically based on the indicated stack frame.  Bridge logic adapting from a logging
            system which already determines and provides information about the originator (such as log4net) into
            Loupe should use the other overload of
            <see cref="M:Gibraltar.Agent.Log.Write(Gibraltar.Agent.LogMessageSeverity,System.String,Gibraltar.Agent.IMessageSourceProvider,System.Security.Principal.IPrincipal,System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">Write</see>,
            passing a customized IMessageSourceProvider.</para>
            <para>This method also requires explicitly selecting the LogWriteMode between Queued (the normal default,
            for optimal performance) and WaitForCommit (to help ensure critical information makes it to disk, e.g. before
            exiting the application upon return from this call).  See the <see cref="T:Gibraltar.Agent.LogWriteMode">LogWriteMode</see> enum
            for more information.</para>
            <para>This method also allows an optional Exception object to be attached to the log message (null for none).
            It can also include an optional XML document (as a string, or null for none) containing extended details about
            the message.</para>
            <para>If attributeToException is set to true the log message will be attributed to the location where the 
            provided exception was thrown from instead of the caller of this method.</para></remarks>
            <param name="severity">The log message severity.</param>
            <param name="logSystem">The name of the originating log system (e.g. "Log4Net").</param>
            <param name="skipFrames">The number of stack frames to skip back over to determine the original caller.
            (0 means the immediate caller of this method; 1 means their immediate caller, and so on.)</param>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="attributeToException">True to record this log message based on where the exception was thrown, not where this method was called</param>
            <param name="writeMode">Whether to queue-and-return or wait-for-commit.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message. (May be null.)</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy.</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.Write(Gibraltar.Agent.LogMessageSeverity,System.String,Gibraltar.Agent.IMessageSourceProvider,System.Security.Principal.IPrincipal,System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a complete log message to the Loupe central log, optionally extended with XML details and broadest API features.
            </summary>
            <remarks><para>This method provides the most complete API for issuing messages into Loupe, allowing
            log system, user name, and a customized message source provider to be specified.  These parameters allow
            bridge logic to support interfacing to Loupe from third-party logging systems like log4net,
            including from your own in-house system.</para>
            <para>The <see cref="T:Gibraltar.Agent.IMessageSourceProvider">sourceProvider</see> is expected to remain valid for this message
            until this call returns, after which the values have been read and copied.  Loupe does not keep a reference
            to the sourceProvider object after this call returns, so it may then be discarded, reused, or altered however
            your implementation requires.</para></remarks>
            <param name="severity">The severity enum value of the log message.</param>
            <param name="logSystem">The name of the originating log system (e.g. "Log4Net").</param>
            <param name="sourceProvider">An IMessageSourceProvider object which supplies the source information
            about this log message.</param>
            <param name="principal">The effective user principal associated with the execution task which issued the log message.
            (If null, Loupe will determine the user name automatically.)</param>
            <param name="exception">An Exception object attached to this log message, or null if none.</param>
            <param name="writeMode">A LogWriteMode enum value indicating whether to simply queue the log message
            and return quickly, or to wait for the log message to be committed to disk before returning.</param>
            <param name="detailsXml">An XML document (as a string) with extended details about the message.</param>
            <param name="category">The application subsystem or logging category that the log message is associated with,
            which supports a dot-delimited hierarchy (e.g. the logger name in log4net).</param>
            <param name="caption">A simple single-line message caption. (Will not be processed for formatting.)</param>
            <param name="description">Additional multi-line descriptive message (or may be null) which can be a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments referenced by the formatted description string (or no arguments to skip formatting).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.RecordException(System.Exception,System.String,System.Boolean)">
            <summary>
            Record an unexpected exception to the log without displaying a user
            prompt.
            </summary>
            <remarks>
            	<para>This method provides an easy way to record an exception as a separate message
                which will be attributed to the code location which threw the exception rather than
                where this method was called from. The category will default to "Exception" if
                null, and the message will be formatted automatically based on the exception. The
                severity will be determined by the canContinue parameter: Critical for fatal errors
                (canContinue is false), Error for non-fatal errors (canContinue is true).</para>
            	<para>
                    This method is intended for use with top-level exception catching for errors
                    not anticipated in a specific operation, but when it is not appropriate to
                    alert the user because the error does not impact their work flow or will be
                    otherwise handled gracefully within the application.
                </para>
            	<para>
                    For localized exception catching (e.g. anticipating exceptions when opening a
                    file) we recommend logging an appropriate, specific log message with the
                    exception attached. (See <see cref="M:Gibraltar.Agent.Log.TraceError(System.Exception,System.String,System.Object[])">TraceError</see>, <see cref="M:Gibraltar.Agent.Log.Error(System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.Object[])">Error</see>, and <see cref="M:Gibraltar.Agent.Log.Write(Gibraltar.Agent.LogMessageSeverity,System.String,System.Int32,System.Exception,Gibraltar.Agent.LogWriteMode,System.String,System.String,System.String,System.String,System.Object[])">Write</see> and other such methods;
                    the message need not be of Error severity.)
                </para>
            </remarks>
            <example>
            	<code lang="CS" title="Record and Report exception" description="Shows an example of both the record and report exception commands. Only one needs to be used for any single exception.">
            		<![CDATA[
            //this option records the exception but does not display any user interface.  
            Log.RecordException(ex, "Exceptions", true);
             
            //this option records the exception and displays a user interface, optionally waiting for the user 
            //to decide to continue or exit before returning.
            Log.ReportException(ex, "Exceptions", true, true);]]>
            	</code>
            </example>
            <param name="exception">
            An exception object to record as a log message. This call is ignored if
            null.
            </param>
            <param name="category">The application subsystem or logging category that the message will be associated with.</param>
            <param name="canContinue">
            True if the application can continue after this call, false if this is a fatal
            error and the application should not continue.
            </param>
        </member>
        <member name="M:Gibraltar.Agent.Log.TraceVerbose(System.String,System.Object[])">
            <summary>
            Write a Verbose trace message directly to the Loupe log.
            </summary>
            <remarks><para>Information about the current thread and calling method is automatically captured.
            The log message will be attributed to the immediate caller of this method.  Wrapper implementations should
            instead use the Log.Write(...) overloads in order to attribute the log message to their own outer callers.</para>
            <para>The message will not be sent through System.Diagnostics.Trace and will not be seen by other trace
            listeners.</para></remarks>
            <param name="format">The string message to use, or a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments to insert into the formatted message string.</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.TraceVerbose(System.Exception,System.String,System.Object[])">
            <summary>
            Write a Verbose trace message directly to the Loupe log, with an attached Exception.
            </summary>
            <remarks><para>Information about the current thread and calling method is automatically captured.
            The log message will be attributed to the immediate caller of this method.  Wrapper implementations should
            instead use the Log.Write(...) overloads in order to attribute the log message to their own outer callers.</para>
            <para>The message will not be sent through System.Diagnostics.Trace and will not be seen by other trace
            listeners.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="format">The string message to use, or a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments to insert into the formatted message string.</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.TraceInformation(System.String,System.Object[])">
            <summary>
            Write an Information trace message directly to the Loupe log.
            </summary>
            <remarks>Information about the current thread and calling method is automatically captured.
            The log message will be attributed to the immediate caller of this method.  Wrapper implementations should
            instead use the Log.Write(...) overloads in order to attribute the log message to their own outer callers.
            <para>The message will not be sent through System.Diagnostics.Trace and will not be seen by other trace
            listeners.</para></remarks>
            <param name="format">The string message to use, or a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments to insert into the formatted message string.</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.TraceInformation(System.Exception,System.String,System.Object[])">
            <summary>
            Write an Information trace message directly to the Loupe log, with an attached Exception.
            </summary>
            <remarks><para>Information about the current thread and calling method is automatically captured.
            The log message will be attributed to the immediate caller of this method.  Wrapper implementations should
            instead use the Log.Write(...) overloads in order to attribute the log message to their own outer callers.</para>
            <para>The message will not be sent through System.Diagnostics.Trace and will not be seen by other trace
            listeners.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="format">The string message to use, or a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments to insert into the formatted message string.</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.TraceWarning(System.String,System.Object[])">
            <summary>
            Write a Warning trace message directly to the Loupe log.
            </summary>
            <remarks><para>Information about the current thread and calling method is automatically captured.
            The log message will be attributed to the immediate caller of this method.  Wrapper implementations should
            instead use the Log.Write(...) overloads in order to attribute the log message to their own outer callers.</para>
            <para>The message will not be sent through System.Diagnostics.Trace and will not be seen by other trace
            listeners.</para></remarks>
            <param name="format">The string message to use, or a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments to insert into the formatted message string.</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.TraceWarning(System.Exception,System.String,System.Object[])">
            <summary>
            Write a Warning trace message directly to the Loupe log, with an attached Exception.
            </summary>
            <remarks><para>Information about the current thread and calling method is automatically captured.
            The log message will be attributed to the immediate caller of this method.  Wrapper implementations should
            instead use the Log.Write(...) overloads in order to attribute the log message to their own outer callers.</para>
            <para>The message will not be sent through System.Diagnostics.Trace and will not be seen by other trace
            listeners.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="format">The string message to use, or a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments to insert into the formatted message string.</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.TraceError(System.String,System.Object[])">
            <summary>
            Write an Error trace message directly to the Loupe  log.
            </summary>
            <remarks><para>Information about the current thread and calling method is automatically captured.
            The log message will be attributed to the immediate caller of this method.  Wrapper implementations should
            instead use the Log.Write(...) overloads in order to attribute the log message to their own outer callers.</para>
            <para>The message will not be sent through System.Diagnostics.Trace and will not be seen by other trace
            listeners.</para></remarks>
            <param name="format">The string message to use, or a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments to insert into the formatted message string.</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.TraceError(System.Exception,System.String,System.Object[])">
            <summary>
            Write an Error trace message directly to the Loupe log, with an attached Exception.
            </summary>
            <remarks><para>Information about the current thread and calling method is automatically captured.
            The log message will be attributed to the immediate caller of this method.  Wrapper implementations should
            instead use the Log.Write(...) overloads in order to attribute the log message to their own outer callers.</para>
            <para>The message will not be sent through System.Diagnostics.Trace and will not be seen by other trace
            listeners.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="format">The string message to use, or a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments to insert into the formatted message string.</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.TraceCritical(System.String,System.Object[])">
            <summary>
            Write a Critical trace message directly to the Loupe log.
            </summary>
            <remarks><para>Information about the current thread and calling method is automatically captured.
            The log message will be attributed to the immediate caller of this method.  Wrapper implementations should
            instead use the Log.Write(...) overloads in order to attribute the log message to their own outer callers.</para>
            <para>The message will not be sent through System.Diagnostics.Trace and will not be seen by other trace
            listeners.</para></remarks>
            <param name="format">The string message to use, or a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments to insert into the formatted message string.</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.TraceCritical(System.Exception,System.String,System.Object[])">
            <summary>
            Write a Critical trace message directly to the Loupe log, with an attached Exception.
            </summary>
            <remarks><para>Information about the current thread and calling method is automatically captured.
            The log message will be attributed to the immediate caller of this method.  Wrapper implementations should
            instead use the Log.Write(...) overloads in order to attribute the log message to their own outer callers.</para>
            <para>The message will not be sent through System.Diagnostics.Trace and will not be seen by other trace
            listeners.</para>
            <para>This overload also allows an Exception object to be attached to the log message.  An Exception-typed
            null (e.g. from a variable of an Exception type) is allowed for the exception argument, but calls which
            do not have a possible Exception to attach should use an overload without an exception argument rather
            than pass a direct value of null, to avoid compiler ambiguity over the type of a simple null.</para></remarks>
            <param name="exception">An Exception object to attach to this log message.</param>
            <param name="format">The string message to use, or a format string followed by corresponding args.</param>
            <param name="args">A variable number of arguments to insert into the formatted message string.</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.EndFile">
            <summary>
            End the current log file (but not the session) and open a new file to continue logging.
            </summary>
            <remarks>This method is provided to support user-initiated roll-over to a new log file (instead of waiting
            for an automatic maintenance roll-over) in order to allow the logs of an ongoing session up to that point
            to be collected and submitted for analysis without shutting down the subject application.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Log.EndFile(System.String)">
            <summary>
            End the current log file (but not the session) and open a new file to continue logging,
            specifying an optional reason.
            </summary>
            <remarks>This method is provided to support user-initiated roll-over to a new log file (instead of waiting
            for an automatic maintenance roll-over) in order to allow the logs of an ongoing session up to that point
            to be collected and submitted for analysis without shutting down the subject application.</remarks>
            <param name="reason">An optionally-declared reason for invoking this operation (may be null or empty).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.EndFile(System.Int32,System.String)">
            <summary>
            End the current log file (but not the session) and open a new file to continue logging,
            specifying an optional reason and attributing the request farther back in the call stack.
            </summary>
            <remarks>This method is provided to support user-initiated roll-over to a new log file (instead of waiting
            for an automatic maintenance roll-over) in order to allow the logs of an ongoing session up to that point
            to be collected and submitted for analysis without shutting down the subject application.</remarks>
            <param name="skipFrames">The number of stack frames to skip back over to determine the original caller.
            (0 means the immediate caller of this method; 1 means their immediate caller, and so on.)</param>
            <param name="reason">An optionally-declared reason for invoking this operation (may be null or empty).</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.EndSession(Loupe.Extensibility.Data.SessionStatus,Gibraltar.Agent.IMessageSourceProvider,System.String)">
            <summary>
            Called at the end of the process execution cycle to indicate that the process shut down normally or explicitly crashed.
            </summary>
            <remarks>
            	<para>This will put the Loupe Agent into an ending state in which it will flush
                everything still in its queue and then switch to a background thread to process any
                further messages. All messages submitted after this call will block the submitting
                thread until they are committed to disk, so that any foreground thread still
                recording final items will be sure to get them through before they exit.</para>
            	<para>In WinForms applications this method is called automatically when an
                ApplicationExit event is received. It is also called automatically when the Agent
                is registered as a Trace Listener and Trace.Close is called.</para>
            	<para>If EndSession is never called, the log will reflect that the session must
                have crashed.</para>
            </remarks>
            <overloads>
            Used to explicitly set the session state for the current session and provide a
            reason.
            </overloads>
            <param name="endingStatus">The explicit ending status to declare for this session, <see cref="F:Loupe.Extensibility.Data.SessionStatus.Normal">Normal</see>
            or <see cref="F:Loupe.Extensibility.Data.SessionStatus.Crashed">Crashed</see>.</param>
            <param name="sourceProvider">An IMessageSourceProvider object which supplies the source information
            about this log message.</param>
            <param name="reason">A simple reason to declare why the application is ending as Normal or as Crashed, or may be null.</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.EndSession(Loupe.Extensibility.Data.SessionStatus,System.Int32,System.String)">
            <summary>
            Called at the end of the process execution cycle to indicate that the process shut down normally or explicitly crashed.
            </summary>
            <remarks>
            	<para>This will put the Loupe Agent into an ending state in which it will flush
                everything still in its queue and then switch to a background thread to process any
                further messages. All messages submitted after this call will block the submitting
                thread until they are committed to disk, so that any foreground thread still
                recording final items will be sure to get them through before they exit.</para>
            	<para>In WinForms applications this method is called automatically when an
                ApplicationExit event is received. It is also called automatically when the Agent
                is registered as a Trace Listener and Trace.Close is called.</para>
            	<para>If EndSession is never called, the log will reflect that the session must
                have crashed.</para>
            </remarks>
            <overloads>
            Used to explicitly set the session state for the current session and provide a
            reason.
            </overloads>
            <param name="endingStatus">The explicit ending status to declare for this session, <see cref="F:Loupe.Extensibility.Data.SessionStatus.Normal">Normal</see>
            or <see cref="F:Loupe.Extensibility.Data.SessionStatus.Crashed">Crashed</see>.</param>
            <param name="skipFrames">The number of stack frames to skip out to find the original caller.</param>
            <param name="reason">A simple reason to declare why the application is ending as Normal or as Crashed, or may be null.</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.EndSession(Loupe.Extensibility.Data.SessionStatus,System.String)">
            <summary>
            Called at the end of the process execution cycle to indicate that the process shut down normally or explicitly crashed.
            </summary>
            <remarks>
            	<para>This will put the Loupe Agent into an ending state in which it will flush
                everything still in its queue and then switch to a background thread to process any
                further messages. All messages submitted after this call will block the submitting
                thread until they are committed to disk, so that any foreground thread still
                recording final items will be sure to get them through before they exit.</para>
            	<para>In WinForms applications this method is called automatically when an
                ApplicationExit event is received. It is also called automatically when the Agent
                is registered as a Trace Listener and Trace.Close is called.</para>
            	<para>If EndSession is never called, the log will reflect that the session must
                have crashed.</para>
            </remarks>
            <overloads>
            Used to explicitly set the session state for the current session and provide a
            reason.
            </overloads>
            <param name="endingStatus">The explicit ending status to declare for this session, <see cref="F:Loupe.Extensibility.Data.SessionStatus.Normal">Normal</see>
            or <see cref="F:Loupe.Extensibility.Data.SessionStatus.Crashed">Crashed</see>.</param>
            <param name="reason">A simple reason to declare why the application is ending as Normal or as Crashed, or may be null.</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.EndSession(System.String)">
            <summary>
            Called at the end of the process execution cycle to indicate that the process shut down normally or explicitly crashed.
            </summary>
            <remarks>
            	<para>This will put the Loupe Agent into an ending state in which it will flush
                everything still in its queue and then switch to a background thread to process any
                further messages. All messages submitted after this call will block the submitting
                thread until they are committed to disk, so that any foreground thread still
                recording final items will be sure to get them through before they exit.</para>
            	<para>In WinForms applications this method is called automatically when an
                ApplicationExit event is received. It is also called automatically when the Agent
                is registered as a Trace Listener and Trace.Close is called.</para>
            	<para>If EndSession is never called, the log will reflect that the session must
                have crashed.</para>
            </remarks>
            <overloads>
            Used to explicitly set the session state for the current session and provide a
            reason.
            </overloads>
            <param name="reason">A simple reason to declare why the application is ending as Normal, or may be null.</param>
        </member>
        <member name="M:Gibraltar.Agent.Log.EndSession">
            <summary>
            Called at the end of the process execution cycle to indicate that the process shut down normally.
            </summary>
            <remarks>
            	<para>This will put the Loupe Agent into an ending state in which it will flush
                everything still in its queue and then switch to a background thread to process any
                further messages. All messages submitted after this call will block the submitting
                thread until they are committed to disk, so that any foreground thread still
                recording final items will be sure to get them through before they exit.</para>
            	<para>In WinForms applications this method is called automatically when an
                ApplicationExit event is received. It is also called automatically when the Agent
                is registered as a Trace Listener and Trace.Close is called.</para>
            	<para>If EndSession is never called, the log will reflect that the session must
                have crashed.</para>
            </remarks>
            <overloads>
                This overload will declare a <see cref="F:Loupe.Extensibility.Data.SessionStatus.Normal">Normal</see> ending
                state with no explicit reason.
            </overloads>
        </member>
        <member name="M:Gibraltar.Agent.Log.StartSession">
            <summary>
            Attempt to activate the agent.
            </summary>
            <remarks>If the agent is already active this call has no effect.  When starting, the agent
            will raise an Initializing event which can be canceled.  If it cancels then the session has not been
            started.  All calls to the agent are safe whether it has been activated or not.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Log.StartSession(System.String)">
            <summary>
            Attempt to activate the agent.
            </summary>
            <param name="reason">A caption for the reason the session is starting, or null.</param>
            <remarks>If the agent is already active this call has no effect.  When starting, the agent
            will raise an Initializing event which can be canceled.  If it cancels then the session has not been
            started.  All calls to the agent are safe whether it has been activated or not.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Log.StartSession(System.Int32,System.String)">
            <summary>
            Attempt to activate the agent.
            </summary>
            <param name="skipFrames">The number of stack frames to skip out to find the original caller.</param>
            <param name="reason">A caption for the reason the session is starting, or null.</param>
            <remarks>If the agent is already active this call has no effect.  When starting, the agent
            will raise an Initializing event which can be canceled.  If it cancels then the session has not been
            started.  All calls to the agent are safe whether it has been activated or not.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Log.StartSession(Gibraltar.Agent.IMessageSourceProvider,System.String)">
            <summary>
            Attempt to activate the agent.
            </summary>
            <param name="reason">A caption for the reason the session is starting, or null.</param>
            <param name="sourceProvider">An IMessageSourceProvider object which supplies the source information
            about this log message.</param>
            <remarks>If the agent is already active this call has no effect.  When starting, the agent
            will raise an Initializing event which can be canceled.  If it cancels then the session has not been
            started.  All calls to the agent are safe whether it has been activated or not.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Log.StartSession(Loupe.Configuration.AgentConfiguration)">
            <summary>
            Attempt to activate the agent.
            </summary>
            <param name="configuration">The Agent configuration to use instead of any configuration in the app.config file.</param>
            <remarks>If the agent is already active this call has no effect.  When starting, the agent
            will raise an Initializing event which can be canceled.  If it cancels then the session has not been
            started.  All calls to the agent are safe whether it has been activated or not.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Log.StartSession(Loupe.Configuration.AgentConfiguration,System.String)">
            <summary>
            Attempt to activate the agent.
            </summary>
            <param name="configuration">The Agent configuration to use instead of any configuration in the app.config file.</param>
            <param name="reason">A caption for the reason the session is starting, or null.</param>
            <remarks>If the agent is already active this call has no effect.  When starting, the agent
            will raise an Initializing event which can be canceled.  If it cancels then the session has not been
            started.  All calls to the agent are safe whether it has been activated or not.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Log.StartSession(Loupe.Configuration.AgentConfiguration,System.Int32,System.String)">
            <summary>
            Attempt to activate the agent.
            </summary>
            <param name="configuration">The Agent configuration to use instead of any configuration in the app.config file.</param>
            <param name="skipFrames">The number of stack frames to skip out to find the original caller.</param>
            <param name="reason">A caption for the reason the session is starting, or null.</param>
            <remarks>If the agent is already active this call has no effect.  When starting, the agent
            will raise an Initializing event which can be canceled.  If it cancels then the session has not been
            started.  All calls to the agent are safe whether it has been activated or not.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Log.StartSession(Loupe.Configuration.AgentConfiguration,Gibraltar.Agent.IMessageSourceProvider,System.String)">
            <summary>
            Attempt to activate the agent.
            </summary>
            <param name="configuration">The Agent configuration to use instead of any configuration in the app.config file.</param>
            <param name="reason">A caption for the reason the session is starting, or null.</param>
            <param name="sourceProvider">An IMessageSourceProvider object which supplies the source information
            about this log message.</param>
            <remarks>If the agent is already active this call has no effect.  When starting, the agent
            will raise an Initializing event which can be canceled.  If it cancels then the session has not been
            started.  All calls to the agent are safe whether it has been activated or not.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Log.SendSessions(Loupe.Extensibility.Data.SessionCriteria)">
            <summary>
            Safely send sessions to the Loupe Server or via email.  Only one send request will be processed at a time.
            </summary>
            <param name="criteria">The criteria to match for the sessions to send</param>
            <returns>True if the send was processed, false if it was not due to configuration or another active send</returns>
            <remarks>
            <para>This method uses the same logic to determine how to transport data as SendSessionsOnExit. 
            If a Loupe Server connection is configured and the server can be contacted it will be used.
            Otherwise if packaging via email is configured the package will be sent that way.</para>
            <para>If there is no way to send the information (either due to configuration or the 
            server being unreachable) this method will return false.  Otherwise the method will 
            return when it completes sending.</para>
            <para>If another send attempt is currently being processed this method will complete
            immediately and return false.  This prevents multiple simultaneous send attempts from
            consuming resources.</para>
            </remarks>
        </member>
        <member name="M:Gibraltar.Agent.Log.SendSessions(System.Predicate{Gibraltar.Agent.SessionSummary})">
            <summary>
            Safely send sessions to the Loupe Server or via email.  Only one send request will be processed at a time.
            </summary>
            <param name="sessionMatchPredicate">A delegate to evaluate sessions and determine which ones to send.</param>
            <returns>True if the send was processed, false if it was not due to configuration or another active send</returns>
            <remarks>
            <para>This method uses the same logic to determine how to transport data as SendSessionsOnExit. 
            If a Loupe Server connection is configured and the server can be contacted it will be used.
            Otherwise if packaging via email is configured the package will be sent that way.</para>
            <para>If there is no way to send the information (either due to configuration or the 
            server being unreachable) this method will return false.  Otherwise the method will 
            return when it completes sending.</para>
            <para>If another send attempt is currently being processed this method will complete
            immediately and return false.  This prevents multiple simultaneous send attempts from
            consuming resources.</para>
            </remarks>
        </member>
        <member name="M:Gibraltar.Agent.Log.SendSessionsAsync(Loupe.Extensibility.Data.SessionCriteria)">
            <summary>
            Safely send sessions asynchronously to the Loupe Server or via email.  Only one send request will be processed at a time.
            </summary>
            <param name="criteria">The criteria to match for the sessions to send</param>
            <returns>True if the send was processed, false if it was not due to configuration or another active send</returns>
            <remarks>
            <para>This method uses the same logic to determine how to transport data as SendSessionsOnExit. 
            If a Loupe Server connection is configured and the server can be contacted it will be used.
            Otherwise if packaging via email is configured the package will be sent that way.</para>
            <para>If there is no way to send the information (either due to configuration or the 
            server being unreachable) this method will return false.  Otherwise the method will
            return once it starts the send process, which will complete asynchronously.</para>
            <para>If another send attempt is currently being processed this method will complete
            immediately and return false.  This prevents multiple simultaneous send attempts from
            consuming resources.</para>
            </remarks>
        </member>
        <member name="M:Gibraltar.Agent.Log.SendSessionsAsync(System.Predicate{Gibraltar.Agent.SessionSummary})">
            <summary>
            Safely send sessions asynchronously to the Loupe Server or via email.  Only one send request will be processed at a time.
            </summary>
            <param name="sessionMatchPredicate">A delegate to evaluate sessions and determine which ones to send.</param>
            <returns>True if the send was processed, false if it was not due to configuration or another active send</returns>
            <remarks>
            <para>This method uses the same logic to determine how to transport data as SendSessionsOnExit. 
            If a Loupe Server connection is configured and the server can be contacted it will be used.
            Otherwise if packaging via email is configured the package will be sent that way.</para>
            <para>If there is no way to send the information (either due to configuration or the 
            server being unreachable) this method will return false.  Otherwise the method will
            return once it starts the send process, which will complete asynchronously.</para>
            <para>If another send attempt is currently being processed this method will complete
            immediately and return false.  This prevents multiple simultaneous send attempts from
            consuming resources.</para>
            </remarks>
        </member>
        <member name="P:Gibraltar.Agent.Log.ServerAuthenticationProvider">
            <summary>
            Optional.  A custom authentication provider for communication between the agent and server
            </summary>
            <remarks><p>Typically communication between the Agent and a Server is done using anonymous
            methods (due to the restrictive nature of the API).  If a network device (such as custom
            gateway or module added to the server) requires additional authentication to allow communication
            then it can be handled by creating a server authentication provider.</p>
            <p>Individual providers can perform authentication processes independently of the server
            request pipeline and can modify each server request to add additional headers or other data
            as required to authenticate the request.  A simple authentication provider for handling HTTP
            Basic Authentication is implemented in the <see cref="T:Gibraltar.Agent.Net.BasicAuthenticationProvider">
            BasicAuthenticationProvider</see> class.</p></remarks>
        </member>
        <member name="P:Gibraltar.Agent.Log.MetricDefinitions">
            <summary>
            Our one metric definition collection for capturing metrics in this process
            </summary>
            <remarks>
            For performance reasons, it is important that there is only a single instance of a particular metric
            for any given process.  This is managed automatically provided only this metrics collection is used.
            If there is a duplicate metric in the data stream, that information will be discarded when the log 
            file is read (but there is no affect at runtime).
            </remarks>
        </member>
        <member name="M:Gibraltar.Agent.Log.LogOnInitializing(System.Object,Gibraltar.Monitor.LogInitializingEventArgs)">
            <summary>
            Proxies the inner log initializing event to our clients.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Gibraltar.Agent.Logging.ExceptionSourceProvider">
            <summary>
            Serves as an IMessageSourceProvider to attribute a message to the code location which threw an Exception.
            </summary>
            <remarks>This class looks at the <see CREF="System.Diagnostics.StackTrace">StackTrace</see> of a thrown Exception,
            rather than the current call stack, to attribute a message to the code location which threw that Exception rather
            than to where the call is made to log the Exception.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Logging.ExceptionSourceProvider.#ctor(System.Exception)">
            <summary>
            Construct an ExceptionSourceProvider based on a provided Exception.
            </summary>
            <remarks>The first (closest) stack frame of the first (outer) Exception will be taken as the
            originator of a log message using this as its IMessageSourceProvider.</remarks>
            <param name="exception">The Exception whose first stack frame is the declared originator.</param>
        </member>
        <member name="P:Gibraltar.Agent.Logging.ExceptionSourceProvider.MethodName">
            <summary>
            Should return the simple name of the method which issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Logging.ExceptionSourceProvider.ClassName">
            <summary>
            Should return the full name of the class (with namespace) whose method issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Logging.ExceptionSourceProvider.FileName">
            <summary>
            Should return the name of the file containing the method which issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Logging.ExceptionSourceProvider.LineNumber">
            <summary>
            Should return the line within the file at which the log message was issued.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Logging.ExceptionSourceProvider.OnMessageSourceCalculate(System.String@,System.String@,System.String@,System.Int32@)">
            <summary>
            Override to adjust message source information after they have been automatically calculated using the default algorithm
            </summary>
            <param name="className">The full name of the class (with namespace) whose method issued the log message.</param>
            <param name="methodName">The simple name of the method which issued the log message.</param>
            <param name="fileName">The name of the file containing the method which issued the log message.</param>
            <param name="lineNumber">The line within the file at which the log message was issued.</param>
        </member>
        <member name="T:Gibraltar.Agent.Logging.MessageSourceProvider">
            <summary>
            A basic class to determine the source of a log message and act as an IMessageSourceProvider. 
            </summary>
            <remarks>This class knows how to acquire information about the source of a log message from the current call stack,
            and acts as a IMessageSourceProvider to use when handing off a log message to the central Log.
            Thus, this object must be created while still within the same call stack as the origination of the log message.
            </remarks>
        </member>
        <member name="M:Gibraltar.Agent.Logging.MessageSourceProvider.#ctor">
            <summary>
            Parameterless constructor for derived classes.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Logging.MessageSourceProvider.#ctor(System.String,System.String)">
            <summary>
            Creates a MessageSourceProvider object to be used as an IMessageSourceProvider.
            </summary>
            <param name="className">The full name of the class (with namespace) whose method issued the log message.</param>
            <param name="methodName">The simple name of the method which issued the log message.</param>
            <remarks>This constructor is used only for the convenience of the Log class when it needs to generate
            an IMessageSoruceProvider for construction of internally-generated packets without going through the
            usual direct PublishToLog() mechanism.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Logging.MessageSourceProvider.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a MessageSourceProvider object to be used as an IMessageSourceProvider.
            </summary>
            <param name="className">The full name of the class (with namespace) whose method issued the log message.</param>
            <param name="methodName">The simple name of the method which issued the log message.</param>
            <param name="fileName">The name of the file containing the method which issued the log message.</param>
            <param name="lineNumber">The line within the file at which the log message was issued.</param>
            <remarks>This constructor is used only for the convenience of the Log class when it needs to generate
            an IMessageSoruceProvider for construction of internally-generated packets without going through the
            usual direct PublishToLog() mechanism.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Logging.MessageSourceProvider.#ctor(System.Int32)">
            <summary>
            Creates a MessageSourceProvider object to be used as an IMessageSourceProvider.
            </summary>
            <remarks>This constructor is used only for the convenience of the Log class when it needs to generate
            an IMessageSoruceProvider for construction of internally-generated packets without going through the
            usual direct PublishToLog() mechanism.</remarks>
            <param name="skipFrames">The number of stack frames to skip over to find the first candidate to be
            identified as the source of the log message.</param>
        </member>
        <member name="P:Gibraltar.Agent.Logging.MessageSourceProvider.MethodName">
            <summary>
            The simple name of the method which issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Logging.MessageSourceProvider.ClassName">
            <summary>
            The full name of the class (with namespace) whose method issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Logging.MessageSourceProvider.FileName">
            <summary>
            The name of the file containing the method which issued the log message.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Logging.MessageSourceProvider.LineNumber">
            <summary>
            The line within the file at which the log message was issued.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Logging.MessageSourceProvider.OnMessageSourceCalculate(System.String@,System.String@,System.String@,System.Int32@)">
            <summary>
            Override to adjust message source information after they have been automatically calculated using the default algorithm
            </summary>
            <param name="className">The full name of the class (with namespace) whose method issued the log message.</param>
            <param name="methodName">The simple name of the method which issued the log message.</param>
            <param name="fileName">The name of the file containing the method which issued the log message.</param>
            <param name="lineNumber">The line within the file at which the log message was issued.</param>
        </member>
        <member name="T:Gibraltar.Agent.LogInitializingEventArgs">
            <summary>
            Event arguments for the Log.Initialize event of the Loupe Agent Logging class.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogInitializingEventArgs.Cancel">
            <summary>
            If set to true the initialization process will not complete and the agent will stay dormant.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogInitializingEventArgs.Configuration">
            <summary>
            The configuration for the agent to start with
            </summary>
            <remarks>The configuration will reflect the effect of the current application configuration file and Agent default values.</remarks>
        </member>
        <member name="T:Gibraltar.Agent.LogMessageAlertEventArgs">
            <summary>
            EventArgs for Notification events.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageAlertEventArgs.Messages">
            <summary>
            The set of one or more log messages for this notification event in a read-only collection.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageAlertEventArgs.TopSeverity">
            <summary>
            The strongest log message severity included in this notification event.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageAlertEventArgs.TotalCount">
            <summary>
            The total number of log messages included in this notification event.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageAlertEventArgs.CriticalCount">
            <summary>
            The number of Critical log messages included in this notification event.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageAlertEventArgs.ErrorCount">
            <summary>
            The number of Error log messages included in this notification event.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageAlertEventArgs.WarningCount">
            <summary>
            The number of Warning log messages included in this notification event.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageAlertEventArgs.ExceptionCount">
            <summary>
            The number of log messages which have an attached Exception included in this notification event.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageAlertEventArgs.MinimumDelay">
            <summary>
            A minimum length of time to wait until another notification may be issued, requested by the client upon return.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.LogMessageAlertEventArgs.CanSendSession(System.String@)">
            <summary>
            Indicates if there is sufficient configuration information to send the current session (either via Loupe Server or email)
            </summary>
            <param name="reason">If there is not sufficient configuration information this value will describe what was missing.</param>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageAlertEventArgs.SendSession">
            <summary>
            Set to automatically send the latest information on the current session when the event returns.
            </summary>
            <remarks>If there is insufficient configuration information to automatically send sessions this property
            will revert to false when set true.  To verify if there is sufficient configuration information, use CanSendSession</remarks>
        </member>
        <member name="T:Gibraltar.Agent.LogMessageEventArgs">
            <summary>
            EventArgs for Notification events.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageEventArgs.Messages">
            <summary>
            The set of one or more log messages for this notification event in a read-only collection.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageEventArgs.TopSeverity">
            <summary>
            The strongest log message severity included in this notification event.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageEventArgs.TotalCount">
            <summary>
            The total number of log messages included in this notification event.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageEventArgs.CriticalCount">
            <summary>
            The number of Critical log messages included in this notification event.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageEventArgs.ErrorCount">
            <summary>
            The number of Error log messages included in this notification event.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageEventArgs.WarningCount">
            <summary>
            The number of Warning log messages included in this notification event.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageEventArgs.ExceptionCount">
            <summary>
            The number of log messages which have an attached Exception included in this notification event.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.LogMessageFilterEventArgs">
            <summary>
            EventArgs for Notification events.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageFilterEventArgs.Message">
            <summary>
            A new log message received for possible display by the (LiveLogViewer) sender of this event.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.LogMessageFilterEventArgs.Cancel">
            <summary>
            Cancel (block) this message from being displayed to users by the (LiveLogViewer) sender of this event.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.LogMessageSeverity">
            <summary>
            This enumerates the severity levels used by Loupe log messages.
            </summary>
            <remarks>The values for these levels are chosen to directly map to the TraceEventType enum
            for the five levels we support.  These also can be mapped from Log4Net event levels,
            with slight name changes for Fatal->Critical and for Debug->Verbose.</remarks>
        </member>
        <member name="F:Gibraltar.Agent.LogMessageSeverity.None">
            <summary>
            The severity level is uninitialized and thus unknown.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.LogMessageSeverity.Critical">
            <summary>
            Fatal error or application crash.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.LogMessageSeverity.Error">
            <summary>
            Recoverable error.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.LogMessageSeverity.Warning">
            <summary>
            Noncritical problem.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.LogMessageSeverity.Information">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.LogMessageSeverity.Verbose">
            <summary>
            Debugging trace.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.LogWriteMode">
            <summary>
            Specifies whether to wait for the message to be committed to the Agent before
            continuing execution or whether to record asynchronously and return
            immediately.
            </summary>
            <remarks>
            	<para>This enum selects the preferred trade-off between run-time performance and
                diagnostic data persistence for an individual log message being issued. By default
                the Agent uses LogWriteMode.Queued under normal conditions but will automatically
                enforce a wait-for-commit mode under certain abnormal conditions or during normal
                application exit. The LogWriteMode.WaitForCommit setting allows the issuer of a log
                message to specifically request that the call not return until the log message has
                been committed to disk, instead of the normal queue-and-return behavior.</para>
            	<para><strong>Queued</strong></para>
            	<para>This setting indicates that the caller prefers to continue execution as soon
                as possible and only cares that the message be placed on the queue to be eventually
                written into the log file on disk. Messages written with this mode could be lost if
                the application crashes and Loupe is not able to flush its queue to the log
                file on disk. Under certain unusual conditions and during normal application exit,
                even calls with this explicit setting may be forced to behave as WaitForCommit to
                provide better logging integrity in those scenarios.</para>
            	<para><strong>WaitForCommit</strong></para>
            	<para>This setting indicates that the caller needs to make sure this message makes
                it into the log file on disk because the application is exiting or may crash when
                it continues. The call will force a flush of the queue and block until Loupe
                has committed the message to the log file on disk. Messages written with this mode
                will not be lost--IF the call completes and returns--but will incur a significant
                performance hit, so it should generally only be used for critical information which
                needs to survive a crash scenario to help diagnose the cause of the crash.</para>
            	<para>WaitForCommit mode still can not guarantee that the log message will make it
                to disk in pathological cases, but it designates this as a higher priority than
                performance for an individual log message for scenarios where the persistence of
                this information is expected to be important in diagnosing a condition which might
                prevent normal Queued messages from making it to disk--for example, when the caller
                will be causing the application to exit abruptly upon return and needs the log to
                reflect the reason why.</para>
            </remarks>
        </member>
        <member name="F:Gibraltar.Agent.LogWriteMode.Queued">
            <summary>
            Return after placing the message on the queue. (Normal operation)
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.LogWriteMode.WaitForCommit">
            <summary>
            Don't return until the message has been committed to disk.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.EventMetric">
            <summary>
            A single event metric instance object, representing one instance of an event
            metric definition.
            </summary>
            <remarks>
            	<para>
                    An EventMetric instance can only be created for a specific <see cref="T:Gibraltar.Agent.Metrics.EventMetricDefinition">EventMetricDefinition</see> which has been previously
                    registered.
                </para>
            	<para>
                    To protect against duplicates with the same instance name, EventMetric does not
                    have public constructors. Instead, use the static <see cref="M:Gibraltar.Agent.Metrics.EventMetric.Register(Gibraltar.Agent.Metrics.EventMetricDefinition,System.String)">EventMetric.Register</see>
                    method with appropriate arguments to identify the specific event metric
                    definition under which to create an event metric instance with a designated
                    instance name.
                </para>
            	<para>Once created, you can record samples for an event metric by:</para>
            	<list type="number">
            		<item>
                        Calling <see cref="M:Gibraltar.Agent.Metrics.EventMetric.CreateSample">CreateSample</see> to start a new metric
                        sample.
                    </item>
            		<item>
                        Populating the data by calling <see cref="M:Gibraltar.Agent.Metrics.EventMetricSample.SetValue(System.String,System.Object)">SetValue</see> for each value
                        column you wish to record.
                    </item>
            		<item>
                        Call <see cref="M:Gibraltar.Agent.Metrics.EventMetricSample.Write">Write</see> on the sample to have
                        it be locked and written to the session file.
                    </item>
            	</list>
            	<para>
                    Alternatively, for event metrics defined via attributes (see <see cref="T:Gibraltar.Agent.Metrics.EventMetricAttribute">EventMetricAttribute</see> and <see cref="T:Gibraltar.Agent.Metrics.EventMetricValueAttribute">EventMetricValueAttibute</see>), the event metric
                    can be sampled directly from a user data object of the corresponding type which
                    contained the attributes by simply calling <see cref="M:Gibraltar.Agent.Metrics.EventMetricDefinition.WriteSample(System.Object)">WriteSample</see> from the event
                    metric definition or from the specific event metric instance. In this case all
                    data is read and then written to the session file automatically.
                </para>
            	<para>For more information on how to take advantage of Event Metrics, see <a href="Metrics_EventMetricDesign.html">Developer's Reference - Metrics - Designing Event
                Metrics</a>.</para>
            	<para><strong>Sampled Metrics</strong></para>
            	<para>
                    An alternative to Event Metrics are Sampled Metrics. Sampled Metrics are
                    designed to record a single, summarized value on a periodic basis. For more
                    information on the difference between Sampled and Event Metrics, see <a href="Metrics_SampledEventMetrics.html">Developer's Reference - Metrics - Sampled
                    and Event Metrics</a>. For more information on Sampled Metrics, see <see cref="T:Gibraltar.Agent.Metrics.SampledMetric">SampledMetric Class</see>.
                </para>
            	<para><strong>Viewing Metrics</strong></para>
            	<para>Metrics are visible in the <a href="Viewer_Session_Introduction.html">Session
                Viewer</a> of the <a href="Viewer_Introduction.html">Gibraltar Analyst</a>. Metrics
                are not displayed in the Loupe Live Viewer.</para>
            </remarks>
            <seealso cref="T:Gibraltar.Agent.Metrics.EventMetricSample" cat="Related Classes">EventMetricSample Class</seealso>
            <seealso cref="T:Gibraltar.Agent.Metrics.EventMetricDefinition" cat="Related Classes">EventMetricDefinition Class</seealso>
            <seealso cref="T:Gibraltar.Agent.Metrics.EventMetricAttribute" cat="Related Classes">EventMetricAttribute Class</seealso>
            <seealso cref="T:Gibraltar.Agent.Metrics.EventMetricValueAttribute" cat="Related Classes">EventMetricValueAttribute Class</seealso>
            <seealso cref="T:Gibraltar.Agent.Metrics.SampledMetric" cat="Related Classes">SampledMetric Class</seealso>
            <example>
            	<code lang="CS" description="The following example creates an event metric entirely through code and then writes a sample.">
            		<![CDATA[
            public static void RecordCacheMetric(int pagesLoaded)
            {
                EventMetricDefinition cacheMetric;
             
                //so we can be called multiple times we want to see if the definition already exists.
                if (EventMetricDefinition.TryGetValue("LoupeSample", "Database.Engine", "Cache", out cacheMetric) == false)
                {
                    cacheMetric = new EventMetricDefinition("LoupeSample", "Database.Engine", "Cache");
             
                    //add the values (that are part of the definition)
                    cacheMetric.AddValue("pages", typeof(int), SummaryFunction.Average, "Pages", "Pages in Cache", "Total number of pages in cache");
                    cacheMetric.AddValue("size", typeof(int), SummaryFunction.Average, "Bytes", "Cache Size", "Total number of bytes used by pages in cache");
             
                    //and now that we're done, we need to register this definition.  This locks the definition
                    //and makes it go live.  This is passed by ref because if another thread registered the same metric, we'll get the
                    //true registered object (whoever won the race), not necessarily the one we've just created to pass in.
                    EventMetricDefinition.Register(ref cacheMetric);
                }
             
                //Now we can get the specific metric we want to record samples under (this is an instance of the definition)
                EventMetric cacheEventMetric = EventMetric.Register(cacheMetric, null);
             
                //now go ahead and write that sample.
                EventMetricSample newSample = cacheEventMetric.CreateSample();
                newSample.SetValue("pages", pagesLoaded);
                newSample.SetValue("size", pagesLoaded * 8196);
                newSample.Write();
            }]]>
            	</code>
            	<code lang="CS" description="The same results can be achieved with a more declarative approach by defining a metric data object decorated with attributes to indicate what properties to store as part of the event metric. You can decorate an existing object if that's convenient. The values of the decorated properties are read during the call to Write so the same object can be repeatedly sampled safely.">
            		<![CDATA[
            /// <summary>
            /// Record an event metric using an object
            /// </summary>
            /// <param name="pagesLoaded"></param>
            public static void RecordCacheMetricByObject(int pagesLoaded)
            {
                CacheEventMetric sample = new CacheEventMetric(pagesLoaded);
                EventMetric.Write(sample);
            }
             
            //The above code relies on the following class being defined.
             
            /// <summary>
            /// Log event metrics using a single object
            /// </summary>
            [EventMetric("LoupeSample", "Database.Engine", "Cache - Declarative", Caption = "Simple Cache", Description = "Performance metrics for the database engine")]
            public class CacheEventMetric
            {
                public CacheEventMetric(int pagesLoaded)
                {
                    Pages = pagesLoaded;
                    Size = pagesLoaded * 8192;
                }
             
                [EventMetricValue("pages", SummaryFunction.Average, "Pages", Caption = "Pages in Cache", Description = "Total number of pages in cache")]
                public int Pages { get; private set; }
             
                [EventMetricValue("size", SummaryFunction.Average, "Bytes", Caption = "Cache Size", Description = "Total number of bytes used by pages in cache")]
                public int Size { get; private set; }
            }]]>
            	</code>
            </example>
            <seealso cref="!:Metrics_Introduction.html" cat="Developer's Reference">Metrics - Introduction</seealso>
            <seealso cref="!:Metrics_SampledEventMetrics.html" cat="Developer's Reference">Metrics - Sampled and Event Metrics</seealso>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetric.#ctor(Gibraltar.Agent.Metrics.EventMetricDefinition,System.String)">
            <summary>
            Create a new event metric object from the provided event metric definition
            </summary>
            <remarks>The new metric will automatically be added to the metric definition's metrics collection.</remarks>
            <param name="definition">The metric definition for the metric instance</param>
            <param name="instanceName">The unique name of this instance within the metric's collection.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetric.#ctor(Gibraltar.Agent.Metrics.EventMetricDefinition,Gibraltar.Monitor.EventMetric)">
            <summary>
            Create a new metric with the provided API event metric definition and an internal event metric object to wrap.
            </summary>
            <remarks>The new metric will automatically be added to the metric definition's metrics collection.</remarks>
            <param name="definition">The API event metric definition that defines this metric</param>
            <param name="metric">The internal event metric</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetric.Register(System.Object)">
            <summary>Registers all event metric definitions defined by attributes on the provided object or Type,
            and registers metric instances where EventMetricInstanceName attribute is also found (with a live object).</summary>
            <param name="metricData">An object or Type defining event metrics via attributes on itself or on its base types or interfaces.</param>
            <remarks>
            	<para>
                    This call ensures that the reflection scan of all members looking for
                    attributes across the entire inheritance of an object instance or Type has been
                    done (e.g. outside of a critical path) so that the first call to <see cref="M:Gibraltar.Agent.Metrics.EventMetric.Write(System.Object)">Write</see> will not have to do that work within a critical path.
                    Results are cached internally, so redundant calls to this method will not
                    repeat the scan for types already scanned (including as part of a different
                    top-level type).
                </para>
            	<para>
                    If a live object is given (not just a Type) then the member(s) decorated with
                    an <see cref="T:Gibraltar.Agent.Metrics.EventMetricInstanceNameAttribute">EventMetricInstanceNameAttribute Class</see>
                    will be queried and used to also register an event metric instance with the
                    returned name
                </para>
            	<para>If a Type is given instead of a live object, it can't be queried for instance
                name(s) and will only register the event metric definitions. Metric instances will
                still be created automatically as needed when Write is called.</para>
            </remarks>
            <seealso cref="M:Gibraltar.Agent.Metrics.EventMetric.Write(System.Object)">Write Method</seealso>
            <exception caption="" cref="T:System.ArgumentNullException">Thrown if metricData is null.</exception>
            <exception caption="" cref="T:System.ArgumentException">The specified metricDataObjectType does not have an EventMetric attribute &lt;br /&gt;
            &lt;br /&gt;
            -or- &lt;br /&gt;
            &lt;br /&gt;
            The specified Type does not have a usable EventMetric attribute, so it can't be used to define an event metric.&lt;br /&gt;
            &lt;br /&gt;
            -or- &lt;br /&gt;
            &lt;br /&gt;
            The specified Type's EventMetric has an empty metric namespace which is not allowed, so no metric can be defined.&lt;br /&gt;
            &lt;br /&gt;
            -or- &lt;br /&gt;
            &lt;br /&gt;
            The specified Type's EventMetric has an empty metric category name which is not allowed, so no metric can be defined.&lt;br /&gt;
            &lt;br /&gt;
            -or- &lt;br /&gt;
            &lt;br /&gt;
            The specified Type's EventMetric has an empty metric counter name which is not allowed, so no metric can be defined.&lt;br /&gt;
            &lt;br /&gt;
            -or- &lt;br /&gt;
            &lt;br /&gt;
            The specified Type's EventMetric attribute's 3-part Key is already used for a metric definition which is not an event metric.</exception>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            <code title="" description="" lang="neutral"></code></example>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetric.Register(Gibraltar.Agent.Metrics.EventMetricDefinition,System.String)">
            <summary>Return a registered event metric instance for the provided event metric definition.</summary>
            <remarks><para>If the provided event metric definition is an unregistered raw definition, it will be registered
            as a completed definition (or a matching registered event metric definition will be used in place of it), but
            an inability to successfully register the definition will result in an ArgumentException, as with calling
            the Register() method in EventMetricDefinition.  Using a properly-registered definition is preferred.</para>
            <para>If an event metric with that instance name already exists for that registered definition, it will be
            returned.  Otherwise, one will be created from that definition and returned.</para></remarks>
            <param name="definition">The metric definition for the desired metric instance.</param>
            <param name="instanceName">The desired instance name (may be null for the default instance).</param>
            <returns>The EventMetric object for the requested event metric instance.</returns>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            </example>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetric.CreateSample">
            <summary>
            Create a new, empty metric sample for this event metric instance, ready to be filled out and written.
            </summary>
            <remarks><para>This creates an empty sample for the current event metric instance, which needs to be filled out
            and written.  Set the value columns by calling newSample.SetValue(...), and write it to the Loupe log by
            calling newSample.Write().</para>
            <para>To record samples for event metrics defined via attributes, call eventMetricInstance.WriteSample(userDataObject)
            or EventMetric.Write(userDataObject).</para></remarks>
            <returns>The new metric sample object.</returns>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            </example>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetric.CreateSample(System.Object)">
            <summary>
            Create a new sample for this metric and populate it with data from the provided user data object.  The caller must write this sample for it to be recorded.
            </summary>
            <remarks>
            The provided user data object must be compatible with the object type used to initialize this event metric.
            </remarks>
            <param name="userDataObject">The object to retrieve metric values from</param>
            <returns>The new metric sample object</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetric.WriteSample(System.Object)">
            <summary>
            Write an event metric sample for this event metric instance using the provided data object.
            </summary>
            <remarks>The provided user data object must be assignable to the bound type which defined this event metric
            via attributes.</remarks>
            <param name="metricData">The object to retrieve metric values from.</param>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            </example>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetric.Write(System.Object,System.String)">
            <summary>
            Write event metric samples for all event metrics defined on the provided data object by attributes.
            </summary>
            <remarks>The provided user data object must be assignable to the bound type which defined this event metric
            via attributes.</remarks>
            <param name="metricData">The object to retrieve both metric values and definition from</param>
            <param name="fallbackInstanceName">The instance name to fall back on if a definition does not specify an instance name binding (may be null).</param>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            </example>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetric.Write(System.Object)">
            <summary>
            Write event metric samples for all event metrics defined on the provided data object by attributes.
            </summary>
            <remarks>The provided user data object must be assignable to the bound type which defined this event metric
            via attributes.</remarks>
            <param name="metricData">The object to retrieve both metric values and definition from</param>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            </example>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetric.Write(Gibraltar.Agent.Metrics.EventMetricSample)">
            <summary>
            Write a metric sample to the current process log if it hasn't been written already.
            </summary>
            <param name="metricSample">The metric sample to write.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetric.Write(Gibraltar.Agent.Metrics.EventMetricSample,System.String)">
            <summary>
            Write a metric sample to the current process log if it hasn't been written already.
            </summary>
            <param name="metricSample">The metric sample to write.</param>
            <param name="str">A meaningless string to fit the overload.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetric.WriteSample(Gibraltar.Agent.Metrics.EventMetricSample)">
            <summary>
            This is a bogus overload to prevent incorrect usage of this method when attempting to write a metric sample.
            </summary>
            <param name="metricSample">The metric sample to be written.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetric.CompareTo(Gibraltar.Agent.Metrics.EventMetric)">
            <summary>
            Indicates the relative sort order of this object to another of the same type.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetric.Equals(Gibraltar.Agent.Metrics.EventMetric)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetric.Definition">
            <summary>
            The definition of this event metric.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetric.Id">
            <summary>
            The unique Id of this event metric instance.  This can reliably be used as a key to refer to this item, within the same session which created it.
            </summary>
            <remarks>The Id is limited to a specific session, and thus identifies a consistent unchanged definition. The
            Id can <b>not</b> be used to identify a definition across different sessions, which could have different
            actual definitions due to changing user code.  See the Key property to identify a metric definition across
            different sessions.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetric.Key">
            <summary>
            The four-part key of the metric instance being captured, as a single string.  
            </summary>
            <remarks>The Key is the combination of metrics capture system label, category name, and counter name of
            the metric definition, along with the instance name, to uniquely identify a specific metric instance of a
            specific metric definition.  It can also identify the same metric instance across different sessions.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetric.Caption">
            <summary>
            A short caption of what the metric tracks, suitable for end-user display.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetric.Description">
            <summary>
            A description of what is tracked by this metric, suitable for end-user display.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetric.MetricsSystem">
            <summary>
            The metrics capture system label of this metric definition.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetric.CategoryName">
            <summary>
            The category of this metric for display purposes.  Category is the top displayed hierarchy.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetric.CounterName">
            <summary>
            The display name of this metric (unique within the category name).
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetric.InstanceName">
            <summary>
            Gets the instance name for this event metric.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetric.IsDefault">
            <summary>
            Indicates whether this is the default metric instance for this metric definition or not.
            </summary>
            <remarks>The default instance has a null instance name.  This property is provided as a convenience to simplify
            client code so you don't have to distinguish empty strings or null.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetric.WrappedMetric">
            <summary>
            The internal Metric object we're wrapping.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.EventMetricAttribute">
            <summary>
            Define an event metric with value columns from the members of the current object.
            </summary>
            <remarks><para>An object (class, struct, or interface) can be decorated with this attribute to define an event metric
            for it.  Use the EventMetricValue attribute to designate which direct members (properties, fields, or zero-argument
            methods) should be stored as value columns each time the event metric is sampled.  The EventMetricInstanceName
            attribute can optionally be used on a member (typically not one also chosen as a value column, but it is allowed
            to be) to designate that member to automatically provide the instance name when sampling the object for this
            defined event metric.</para>
            <para>Only one event metric (containing any number of value columns) can be defined on a specific class, struct,
            or interface.  However, using interfaces to define event metrics can allow a single object to support multiple
            event metric types through those separate interfaces.  Such advanced tricks may require selection of a specific
            event metric definition by type (e.g. by typeof a particular interface) in order to sample each possible event
            metric as desired for that object.  Selection of a definition by a specific type may also be required when sampling
            an inheritor object, to ensure the desired event metric is identified and sampled as appropriate, because multiple
            event metrics defined on a complex object can not be assumed to all be appropriate to sample every time.</para></remarks>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Define an event metric with value columns to be selected from the direct members of the current object.
            </summary>
            <param name="metricsSystem">The metrics capture system label the user has selected to distinguish all metrics they define, to avoid colliding with usage by other libraries.</param>
            <param name="metricCategoryName">A dot-delimited categorization for the metric under the metrics system.</param>
            <param name="counterName">The name of the metric to be defined under the metric category name.</param>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricAttribute.MetricsSystem">
            <summary>
            The metrics capture system label the user has selected to distinguish all metrics they define, to avoid colliding with usage by other libraries.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricAttribute.MetricCategoryName">
            <summary>
            A dot-delimited categorization for the metric under the metrics system.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricAttribute.CounterName">
            <summary>
            The name of the metric to be defined under the metric category name.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricAttribute.Caption">
            <summary>
            A displayable caption for this event metric definition.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricAttribute.Description">
            <summary>
            An end-user description of this metric definition.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.EventMetricInstanceNameAttribute">
            <summary>
            Indicates which field, property, or method should be used to determine the instance name for the event metric.
            </summary>
            <remarks>The current object must also have the EventMetric attribute defined.  Only one field, property, or method in an object
            can have this attribute defined.  Whatever value is returned will be converted to a string to uniquely identify the metric, or
            a null value will select the default instance.  If no item on an object has this attribute defined, the default event metric will
            be used unless an instance name is specified when sampling.</remarks>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.EventMetricCollection">
            <summary>
            The collection of event metrics for a given event metric definition.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricCollection.#ctor(Gibraltar.Agent.Metrics.EventMetricDefinition)">
            <summary>
            Create a new event metric dictionary for the provided definition.
            </summary>
            <remarks>This dictionary is created automatically by the Custom Sampled Metric Definition during its initialization.</remarks>
            <param name="metricDefinition">The definition of the event metric to create a metric dictionary for</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricCollection.ContainsKey(System.Guid)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key">The metric name to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricCollection.Add(System.String)">
            <summary>
            Create a new metric object with the provided instance name and add it to the collection
            </summary>
            <param name="instanceName">The instance name to use, or blank or null for the default metric.</param>
            <returns>The new metric object that was added to the collection</returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricCollection.Definition">
            <summary>
            The definition of all of the metrics in this collection.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricCollection.TryGetValue(System.Guid,Gibraltar.Agent.Metrics.EventMetric@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricCollection.TryGetValue(System.String,Gibraltar.Agent.Metrics.EventMetric@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The metric name to locate in the collection</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricCollection.Item(System.Int32)">
            <summary>
            Retrieve the event metric by its zero-based index in collection. 
            </summary>
            <param name="index"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">An attempt was made to set an object by index which is not supported.</exception>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricCollection.Item(System.Guid)">
            <summary>
            Retrieve event metric object by its Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricCollection.Item(System.String)">
            <summary>
            Retrieve event metric object by its name
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricCollection.Lock">
            <summary>
            Object Change Locking object.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.EventMetricDefinition">
            <summary>
            The definition of an event metric, which must be registered before any specific event metric instance can be created or sampled.
            </summary>
            <remarks>
            	<para>Unlike sampled metrics which represent continuous values by sampling at
                periodic intervals, event metrics have meaning only at discrete moments in time
                when some "event" happens and records a sample to describe it.</para>
            	<para>Event metrics can define multiple values to be collected with each sample and
                can include both numeric data types (recorded as their native type) and strings
                (all non-numeric types are converted to strings). Numeric data columns can then be
                processed later to be graphed like Sampled Metrics. Both numeric and string data
                can be analyzed in a variety of ways to produce charts. This makes event metrics a
                powerful instrument for analyzing your application's behavior.</para>
            	<para>For more information Event Metrics, see <a href="Metrics_EventMetricDesign.html">Developer's Reference - Metrics - Designing Event
                Metrics</a>.</para>
            	<para><strong>Defining Event Metrics</strong></para>
            	<para>Event metrics can be defined either programmatically or declaratively with
                attributes.</para>
            	<para>
                    To define an event metric with attributes, apply the <see cref="T:Gibraltar.Agent.Metrics.EventMetricAttribute">EventMetric</see> attribute to the source code for any
                    class, struct, or interface, and apply the <see cref="T:Gibraltar.Agent.Metrics.EventMetricValueAttribute">EventMetricValue</see> attribute to desired members
                    to define the value columns. This approach provides a simple and powerful way
                    to design and collect event metrics for your application. See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
                </para>
            	<para>
                    To define an event metric programmatically requires more coding, but allows you
                    to optimize the performance of recording event metrics and works in
                    environments where it isn't feasible to decorate a class with attributes. See
                    the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
                </para>
            </remarks>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            </example>
            <seealso cref="!:Metrics_EventMetricDesign.html" cat="Developer's Reference">Metrics - Designing Event Metrics</seealso>
            <seealso cref="T:Gibraltar.Agent.Metrics.EventMetric" cat="Related Classes">EventMetric Class</seealso>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new (empty) event metric definition, ready to have value columns defined for it (with AddValue()).
            </summary>
            <remarks><para>In any session there should only be one metric definition with a given combination of metric
            type, category, and counter name (the three-part Key).  These values together are used to correlate metrics
            between sessions and to distinguish all metrics from each other within a session.  Collisions between
            incompatible metrics (different definitions) using the same three-part Key could result in run-time errors.</para>
            <para>After creating a new empty event metric definition, some number of value columns must be defined for it
            by calling newDefinition.AddValue(...).  Once all desired columns have been added, the definition must be
            officially registered by calling newDefinition = newDefinition.Register().  The registration checks again that
            the 3-part Key is not already defined, and if it <i>was</i>, it returns the existing registration (or throws
            an exception if the existing registration is not compatible), so it is important to use the <i>returned</i>
            event metric definition rather than the one passed in.  This is done for thread safety, in case two threads
            find the same event metric not yet defined and both try to create the definition; as long as they define the
            event metric the same way (for that same Key), they will both get the same completed definition returned,
            without errors.  It is not necessary to save the return if the variable is not to be used further (e.g. going
            out of scope); the official definition can also be looked up separately later, without going through another
            new definition object.</para>
            <para>Event metric definitions can also be created by applying EventMetric and EventMetricValue attributes
            to a class, struct, or interface and registering that Type (or an object assignable to that type) using
            the static Register() method.  The constructor is not used when using attribute-based metric definitions.</para>
            </remarks>
            <param name="metricsSystem">The metrics capture system label.</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            </example>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.#ctor(Gibraltar.Monitor.EventMetricDefinition)">
            <summary>
            Create a new API event metric definition from the provided internal event metric definition.
            </summary>
            <param name="metricDefinition">The internal metric definition to wrap.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.AddValue(System.String,System.Type,Gibraltar.Agent.Metrics.SummaryFunction,System.String,System.String,System.String)">
            <summary>
            Create a new value column definition with the supplied name and type.  The name must be unique within this definition.
            </summary>
            <remarks>Internally, only simple types are supported.  Any non-numeric, non-DateTimeOffset type will be converted to a string
            using the default ToString capability when it is recorded.</remarks>
            <param name="name">The unique name for this value column definition.</param>
            <param name="type">The simple type of this value (e.g. typeof(int) or typeof(string)).</param>
            <param name="summaryFunction">The default way that individual samples of this value column can be aggregated
            to create a graphable summary. (Use SummaryFunction.Count for non-numeric types.)</param>
            <param name="unitCaption">A displayable caption for the units this value represents, or null for unit-less values.</param>
            <param name="caption">The end-user display caption for this value column.</param>
            <param name="description">The end-user description for this value column.</param>
            <returns>The newly created value column definition.</returns>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            </example>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.RegisterAll(System.Object)">
            <summary>
            Find or create multiple event metrics definitions (defined via EventMetric attributes) for the provided object or Type.
            </summary>
            <remarks>The provided Type or the GetType() of the provided object instance will be scanned for EventMetric
            attributes on itself and any of its interfaces to identify a list of event metrics defined for instances of
            that type, creating them as necessary by scanning its members for EventMetricValue attributes.  Inheritance
            will be followed into base types, along with all interfaces inherited to the top level.  This method will not
            throw exceptions, so a null argument will return an empty array, as will an argument which does not define any
            valid event metrics.  Also see RegisterType(Type) to find or create a single event metric definition for a specific
            Type.</remarks>
            <param name="metricData">A Type or an instance defining event metrics by attributes on itself and/or its interfaces.</param>
            <returns>An array of zero or more event metric definitions found for the provided object or Type.</returns>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            </example>
            <exception cref="T:System.ArgumentException">The specified metricDataObjectType does not have an EventMetric attribute 
            -or- 
            The specified Type does not have a usable EventMetric attribute, so it can't be used to define an event metric.
            -or-
            The specified Type's EventMetric has an empty metric namespace which is not allowed, so no metric can be defined.
            -or-
            The specified Type's EventMetric has an empty metric category name which is not allowed, so no metric can be defined.
            -or-
            The specified Type's EventMetric has an empty metric counter name which is not allowed, so no metric can be defined.
            -or-
            The specified Type's EventMetric attribute's 3-part Key is already used for a metric definition which is not an event metric.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.GetTypeOfMember(System.Reflection.MemberInfo)">
            <summary>
            Determine the readable Type for a field, property, or method.
            </summary>
            <remarks>This method assumes that only MemberTypes of Field, Property, or Method will be given.  A method
            with void return type will return typeof(void), and properties with no get accessor will return null.
            This does not currently check method signature info for the zero-argument requirement.</remarks>
            <param name="member">The MemberInfo of a Field, Property, or Method member.</param>
            <returns>The Type of value which can be read from the field, property, or method.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.RegisterType(System.Type)">
            <summary>
            Find or create an event metric definition from EventMetric and EventMetricValue attributes on a specific Type.
            </summary>
            <remarks>The provided type must have an EventMetric attribute and can have one or more fields, properties
            or zero-argument methods with EventMetricValue attributes defined.  This method creates a metric definition
            but does not create a specific metric instance, so it does not require a live object.  If the event metric
            definition already exists, it is just returned and no exception is thrown.  If the provided type is not suitable
            to create an event metric from because it is missing the appropriate attribute or the attribute has been
            miss-defined, an ArgumentException will be thrown.  Inheritance and interfaces will <b>not</b> be searched, so
            the provided Type must directly define an event metric, but valid objects of a type assignable to the specified
            bound Type of this definition <b>can</b> be sampled from this specific event metric definition.  Also see
            AddOrGetDefinitions() to find and return an array of definitions.</remarks>
            <param name="metricDataObjectType">A specific Type with attributes defining an event metric.</param>
            <returns>The single event metric definition determined by attributes on the given Type.</returns>
            <exception cref="T:System.ArgumentException">The specified metricDataObjectType does not have an EventMetric attribute 
            -or- 
            The specified Type does not have a usable EventMetric attribute, so it can't be used to define an event metric.
            -or-
            The specified Type's EventMetric has an empty metric namespace which is not allowed, so no metric can be defined.
            -or-
            The specified Type's EventMetric has an empty metric category name which is not allowed, so no metric can be defined.
            -or-
            The specified Type's EventMetric has an empty metric counter name which is not allowed, so no metric can be defined.
            -or-
            The specified Type's EventMetric attribute's 3-part Key is already used for a metric definition which is not an event metric.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.Register(Gibraltar.Agent.Metrics.EventMetricDefinition@)">
            <summary>
            Register the referenced EventMetricDefinition template, or update the reference to the official definition
            if a compatible event metric definition already exists for the same 3-part Key.
            </summary>
            <remarks>This is the final step for creating a new event metric definition programmatically, after constructing
            a new EventMetricDefinition(...) and calling AddValue(...) as desired to define value columns.  If a metric
            definition is already registered with the same Key, it will be checked for compatibility.  An incompatible
            existing definition (e.g. a sampled metric, or missing value columns from the provided template) will result
            in an ArgumentException to signal your programming mistake; each different metric definition in an application
            session must have a unique 3-part Key.  If a compatible existing event metric definition is found, the reference
            to the EventMetricDefinition will be updated to the registered definition.  If no metric definition exists with
            the same 3-part key as the template, then the new definition will be officially registered and may be used as
            a valid definition.  This approach ensures thread-safe creation of singular event metric definitions without
            the need for locking by your code.</remarks>
            <param name="newDefinition">A reference to an event metric definition template to be registered, and to receive the official registered event metric definition.</param>
            <exception cref="T:System.ArgumentNullException">A null definition can not be registered nor used to look up a registered event metric definition.</exception>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            </example>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.Register(Gibraltar.Agent.Metrics.EventMetricDefinition@,System.String)">
            <summary>
            Register the referenced EventMetricDefinition template, or update the reference to the official definition
            if a compatible event metric definition already exists for the same 3-part Key.
            </summary>
            <remarks><para>This is the final step for creating a new event metric definition programmatically, after constructing
            a new EventMetricDefinition(...) and calling AddValue(...) as desired to define value columns.  If a metric
            definition is already registered with the same Key, it will be checked for compatibility.  An incompatible
            existing definition (e.g. a sampled metric, or missing value columns from the provided template) will result
            in an ArgumentException to signal your programming mistake; each different metric definition in an application
            session must have a unique 3-part Key.  If a compatible existing event metric definition is found, the reference
            to the EventMetricDefinition will be updated to the registered definition.  If no metric definition exists with
            the same 3-part key as the template, then the new definition will be officially registered and may be used as
            a valid definition.  This approach ensures thread-safe creation of singular event metric definitions without
            the need for locking by your code.</para>
            <para>This overload allows a value column of the definition template to be designated as the default one to graph
            for this event metric.  The specified name must match a value column name in the definition template or a
            KeyNotFoundException will be thrown (and the template will not be registered).  The defaultValue parameter
            will overwrite any previous setting of the DefaultValue property of the event metric definition template.  If
            the completed template is not ultimately used because a metric definition already exists with the same 3-part
            Key, then the defaultValue parameter will have no effect; a metric definition which is already registered can
            not be altered, to ensure consistency within the session log.</para>
            <para>Also see the overload directly taking an EventMetricValueDefinition as the defaultValue for an approach
            which may be less prone to mistakes.</para></remarks>
            <param name="newDefinition">A reference to an event metric definition template to be registered, and to receive the official registered event metric definition.</param>
            <param name="defaultValue">The name of a value column to designate as the default one to graph for this metric.</param>
            <exception cref="T:System.ArgumentNullException">A null newDefinition or a null or empty defaultValue was provided.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The specified defaultValue column name was not found in the provided definition.</exception>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            </example>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.Register(Gibraltar.Agent.Metrics.EventMetricDefinition@,Gibraltar.Agent.Metrics.EventMetricValueDefinition)">
            <summary>
            Register the referenced EventMetricDefinition template, or update the reference to the official definition
            if a compatible event metric definition already exists for the same 3-part Key.
            </summary>
            <remarks><para>This is the final step for creating a new event metric definition programmatically, after constructing
            a new EventMetricDefinition(...) and calling AddValue(...) as desired to define value columns.  If a metric
            definition is already registered with the same Key, it will be checked for compatibility.  An incompatible
            existing definition (e.g. a sampled metric, or missing value columns from the provided template) will result
            in an ArgumentException to signal your programming mistake; each different metric definition in an application
            session must have a unique 3-part Key.  If a compatible existing event metric definition is found, the reference
            to the EventMetricDefinition will be updated to the registered definition.  If no metric definition exists with
            the same 3-part key as the template, then the new definition will be officially registered and may be used as
            a valid definition.  This approach ensures thread-safe creation of singular event metric definitions without
            the need for locking by your code.</para>
            <para>This overload allows an EventMetricValueDefinition to be designated as the default value column to graph
            for this event metric.  When adding value columns to the definition template, the EventMetricValueDefinition
            returned by one of them can be saved to pass in this overload, for convenience.  The defaultValue parameter
            will overwrite any previous setting of the DefaultValue property of the event metric definition template.  If
            the completed template is not ultimately used because a metric definition already exists with the same 3-part
            Key, then the defaultValue parameter will have no effect; a metric definition which is already registered can
            not be altered, to ensure consistency within the session log.</para></remarks>
            <param name="newDefinition">A reference to an event metric definition template to be registered, and to receive the official registered event metric definition.</param>
            <param name="defaultValue">The definition of a value column in this event metric definition to designate as the default one to graph for this metric.</param>
            <exception cref="T:System.ArgumentNullException">A null newDefinition was provided.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">A defaultValue was provided but it is not from the provided EventMetricDefinition</exception>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            </example>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.Register">
            <summary>
            Register this instance as a completed definition and return the valid usable definition for this event metric.
            </summary>
            <remarks>This call is necessary to complete a new event metric definition (after calls to AddValue(...)) before
            it can be used, and it signifies that all desired value columns have been added to the definition.  Only the
            first registration of a metric definition with a given Key (metrics system, category name, and counter name)
            will be effective and return the same definition object; subsequent calls (perhaps by another thread) will
            instead return the existing definition already registered.  If a definition already registered with that Key
            can not be an event metric (e.g. a sampled metric is defined with that Key) or if this instance defined value
            columns not present as compatible value columns in the existing registered definition with that Key, then an
            ArgumentException will be thrown to signal your programming mistake.</remarks>
            <returns>The actual usable definition with the same metrics system, category name, and counter name as this instance.</returns>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            </example>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.IsBound">
            <summary>
            Indicates if this definition is configured to retrieve its information directly from an object.
            </summary>
            <remarks>When true, metric instances and samples can be defined from a live object of the same type that was used 
            to generate the data binding.  It isn't necessary that the same object be used, just that it be a compatible
            type to the original type used to establish the binding.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.BoundType">
            <summary>
            When bound, indicates the exact interface or object type that was bound.
            </summary>
            <remarks>When creating new metrics or metric samples, this data type must be provided in bound mode.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.CompareTo(Gibraltar.Agent.Metrics.EventMetricDefinition)">
            <summary>
            Indicates the relative sort order of this object to another of the same type.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.Equals(Gibraltar.Agent.Metrics.EventMetricDefinition)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.Metrics">
            <summary>
            The set of metrics that use this definition.
            </summary>
            <remarks>All metrics with the same definition are of the same object type.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.ValueCollection">
            <summary>
            The set of values defined for this metric definition.
            </summary>
            <remarks>Any number of different values can be recorded along with each event to provide additional summarization
            and filtering ability for later client analysis.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.ValueDefinitions">
            <summary>
            The set of values defined for this metric definition. (A snapshot array copy.  AddValue() through this definition object.)
            </summary>
            <remarks>Any number of different values can be recorded along with each event to provide additional summarization
            and filtering ability for later client analysis.  While the definition is being built (with <see cref="M:Gibraltar.Agent.Metrics.EventMetricDefinition.AddValue(System.String,System.Type,Gibraltar.Agent.Metrics.SummaryFunction,System.String,System.String,System.String)">AddValue</see>
            the current set of value definitions can be examined as an array snapshot returned by this property.  Changes
            to the array will only affect that copy.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.IsNumericValueType(System.Type)">
            <summary>
            Indicates whether the provided object is a numeric type or can only be graphed by a SummaryFunction.Count.
            </summary>
            <param name="type">The type to be verified.</param>
            <returns>True if the supplied type is mathematically graphable, false otherwise.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.IsSupportedValueType(System.Type)">
            <summary>
            Indicates whether the provided type can be stored as a value or not.
            </summary>
            <remarks>Most types can be stored, with the value of non-numeric types being the string representation
            of the type. Collections, arrays, and other such sets can't be stored as a single value.</remarks>
            <param name="type">The type to be verified.</param>
            <returns>True if the supplied type is supported, false otherwise.</returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.DefaultValue">
            <summary>
            The default value column to display for this event metric.  Typically this should be a numeric value column.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.WriteSample(System.String,System.Object)">
            <summary>
            Write a metric sample to the specified instance of this event metric definition using the provided data object.
            </summary>
            <remarks>
            <para>This overload may only be used if this metric definition was created by EventMetric and EventMetricValue
            attributes on a particular Type (class, struct, or interface), and only for userDataObjects of a type assignable
            to that bound type for this definition.  Also see the static WriteAllSamples() method.</para>
            <para>The provided instanceName parameter will override any instance name binding set for this definition
            with an EventMetricInstanceName attribute (this method overload ignores the instance name binding).  The
            specified metric instance is created if it does not already exist.  See the other overloads taking a
            userDataObject as the first parameter to use the bound member to determine a metric instance name
            from the user data object automatically, with an optional fall-back instance name.</para>
            </remarks>
            <param name="instanceName">The instance name to use, or null or empty for the default metric instance.</param>
            <param name="userDataObject">A data object to sample, compatible with the binding type of this definition.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.WriteSample(System.Object,System.String)">
            <summary>
            Write a metric sample to an automatically-determined instance of this metric definition using the provided data object, with a fall-back instance name.
            </summary>
            <param name="metricData">A data object to sample, compatible with the binding type of this definition.</param>
            <param name="fallbackInstanceName">The instance name to fall back on if this definition does not specify an instance name binding (may be null).</param>
            <remarks>
            	<para>This overload may only be used if this metric definition was created by EventMetric and EventMetricValue
            attributes on a particular Type (class, struct, or interface), and only for userDataObjects of a type assignable
            to that bound type for this definition.</para>
            	<para>The metric instance name will be obtained from the member which was marked with the EventMetricInstanceName
            attribute.  If none is bound, the instance name parameter will be used as a fall-back.  The determined metric
            instance will be created if it does not already exist.</para>
            </remarks>
            <exception caption="" cref="T:System.ArgumentNullException">No metricData object was provided.</exception>
            <exception caption="" cref="T:System.ArgumentException">This event metric definition is not bound to sample automatically from a user data object.  CreateSample() and SetValue() must be used to specify the data values directly.&lt;br /&gt;
            -or-&lt;br /&gt;
            The provided user data object is not assignable to this event metric's bound type and can not be sampled automatically for this metric definition.</exception>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            <code title="" description="" lang="neutral"></code></example>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.WriteSample(System.Object)">
            <summary>
            Write a metric sample to an automatically-determined instance of this metric definition using the provided data object.
            </summary>
            <remarks>
            <para>This overload may only be used if this metric definition was created by EventMetric and EventMetricValue
            attributes on a particular Type (class, struct, or interface), and only for userDataObjects of a type assignable
            to that bound type for this definition.</para>
            <para>The metric instance name will be obtained from the member which was marked with the EventMetricInstanceName
            attribute.  If none is bound, the default instance will be used (a null instance name).  The determined metric
            instance will be created if it does not already exist.  See the overloads with an instanceName parameter to
            specify a particular metric instance name.</para>
            </remarks>
            <param name="metricData">A data object to sample, compatible with the binding type of this definition.</param>
            <exception caption="" cref="T:System.ArgumentException">This event metric definition is not bound to sample automatically from a user data object.  CreateSample() and SetValue() must be used to specify the data values directly.&lt;br /&gt;
            -or-&lt;br /&gt;
            The provided user data object is not assignable to this event metric's bound type and can not be sampled automatically for this metric definition.</exception>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            </example>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.InvokeInstanceNameBinding(System.Object)">
            <summary>
            Use the instance name binding for this definition to query the instance name of a given user data object.
            </summary>
            <remarks>If not bound, this method returns null.</remarks>
            <param name="metricData">A live object instance (does not work on a Type).</param>
            <returns>The instance name determined by the binding query.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.Write(System.Object,System.String)">
            <summary>
            Sample every event metric defined by EventMetric and EventMetricValue attributes on the provided data object at any interface or inheritance level.
            </summary>
            <param name="metricData">A user data object defining event metrics by attributes on itself or its interfaces or any inherited type.</param>
            <param name="fallbackInstanceName">The instance name to fall back on if a given definition does not specify an instance name binding (may be null).</param>
            <exception caption="" cref="T:System.ArgumentException">The specified metricDataObjectType does not have an EventMetric attribute &lt;br /&gt;
            &lt;br /&gt;
            -or- &lt;br /&gt;
            &lt;br /&gt;
            The specified Type does not have a usable EventMetric attribute, so it can't be used to define an event metric.&lt;br /&gt;
            &lt;br /&gt;
            -or- &lt;br /&gt;
            &lt;br /&gt;
            The specified Type's EventMetric has an empty metric namespace which is not allowed, so no metric can be defined.&lt;br /&gt;
            &lt;br /&gt;
            -or- &lt;br /&gt;
            &lt;br /&gt;
            The specified Type's EventMetric has an empty metric category name which is not allowed, so no metric can be defined.&lt;br /&gt;
            &lt;br /&gt;
            -or- &lt;br /&gt;
            &lt;br /&gt;
            The specified Type's EventMetric has an empty metric counter name which is not allowed, so no metric can be defined.&lt;br /&gt;
            &lt;br /&gt;
            -or- &lt;br /&gt;
            &lt;br /&gt;
            The specified Type's EventMetric attribute's 3-part Key is already used for a metric definition which is not an event metric.</exception>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            <code title="" description="" lang="neutral"></code></example>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.Write(System.Object)">
            <summary>
            Sample every event metric defined by EventMetric and EventMetricValue attributes on the provided data object at any interface or inheritance level.
            </summary>
            <param name="metricData">A user data object defining event metrics by attributes on itself or its interfaces or any inherited type.</param>
            <exception caption="" cref="T:System.ArgumentException">The specified metricDataObjectType does not have an EventMetric attribute &lt;br /&gt;
            &lt;br /&gt;
            -or- &lt;br /&gt;
            &lt;br /&gt;
            The specified Type does not have a usable EventMetric attribute, so it can't be used to define an event metric.&lt;br /&gt;
            &lt;br /&gt;
            -or- &lt;br /&gt;
            &lt;br /&gt;
            The specified Type's EventMetric has an empty metric namespace which is not allowed, so no metric can be defined.&lt;br /&gt;
            &lt;br /&gt;
            -or- &lt;br /&gt;
            &lt;br /&gt;
            The specified Type's EventMetric has an empty metric category name which is not allowed, so no metric can be defined.&lt;br /&gt;
            &lt;br /&gt;
            -or- &lt;br /&gt;
            &lt;br /&gt;
            The specified Type's EventMetric has an empty metric counter name which is not allowed, so no metric can be defined.&lt;br /&gt;
            &lt;br /&gt;
            -or- &lt;br /&gt;
            &lt;br /&gt;
            The specified Type's EventMetric attribute's 3-part Key is already used for a metric definition which is not an event metric.</exception>
            <example>
            See the <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class Overview</see> for an example.
            </example>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.Lock">
            <summary>
            Object Change Locking object.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.WrappedDefinition">
            <summary>
            The internal event metric definition we're wrapping. 
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.Gibraltar#Agent#Metrics#Internal#IMetricDefinition#WrappedDefinition">
            <summary>
            The internal metric definition this IMetricDefinition is wrapping.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.NameBound">
            <summary>
            Indicates if there is a binding for metric instance name.
            </summary>
            <remarks>When true, the Name Member Name and Name Member Type properties are available.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.NameMemberName">
            <summary>
            The name of the member to invoke to determine the metric instance name.
            </summary>
            <remarks>This property is only valid when NameBound is true.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.NameMemberType">
            <summary>
            The type of the member to be invoked to determine the metric instance name (field, method, or property)
            </summary>
            <remarks>This property is only valid when NameBound is true.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.Id">
            <summary>
            The unique Id of this event metric definition.  This can reliably be used as a key to refer to this item, within the same session which created it.
            </summary>
            <remarks>The Id is limited to a specific session, and thus identifies a consistent unchanged definition. The
            Id can <b>not</b> be used to identify a definition across different sessions, which could have different
            actual definitions due to changing user code.  See the Key property to identify a metric definition across
            different sessions.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.Key">
            <summary>
            The three-part key of the metric definition being captured, as a single string.  
            </summary>
            <remarks>The Key is the combination of metrics capture system label, category name, and counter name to uniquely
            identify a specific metric definition.  It can also identify the same definition across different sessions.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.Caption">
            <summary>
            A short display string for this metric definition, suitable for end-user display.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.Description">
            <summary>
            A description of what is tracked by this metric, suitable for end-user display.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.Interval">
            <summary>
            The recommended default display interval for graphing. 
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.MetricsSystem">
            <summary>
            The metric capture system label under which this metric definition was created.
            </summary>
            <remarks>This label distinguish metrics defined and captured by different libraries from each other,
            ensuring that metrics defined by different development groups will fall under separate namespaces and not
            require category names to be globally unique across third party libraries linked by an application.
            Pick your own label which will uniquely identify your library or namespace.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.CategoryName">
            <summary>
            The category of this metric for display purposes. This can be a period delimited string to represent a variable height hierarchy.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.CounterName">
            <summary>
            The display name of this metric (unique within the category name).
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.Gibraltar#Agent#Metrics#Internal#IMetricDefinition#SampleType">
            <summary>
            The sample type of the metric.  Indicates whether the metric represents discrete events or a continuous value.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricDefinition.IsReadOnly">
            <summary>
            Indicates whether this event metric definition is now read-only because it has been officially registered and can be used to create event metric instances.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.ContainsKey(System.Guid)">
            <summary>
            Determines whether the collection of all metric definitions contains an element with the specified key.
            </summary>
            <param name="id">The metric definition Id to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.ContainsKey(System.String)">
            <summary>
            Determines whether the collection of all metric definitions contains an element with the specified key.
            </summary>
            <param name="key">The Key of the event metric definition to check (composed of the metrics system, category name,
            and counter name combined as a single string).</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.ContainsKey(System.String,System.String,System.String)">
            <summary>
            Determines whether the collection of all metric definitions contains an element with the specified key.
            </summary>
            <param name="metricsSystem">The metrics capture system label.</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.TryGetValue(System.Guid,Gibraltar.Agent.Metrics.EventMetricDefinition@)">
            <summary>
            Retrieve an EventMetricDefinition by its Id, if present. (Throws an ArgumentException if the Id resolves to a SampledMetricDefinition instead.)
            </summary>
            <remarks>This method looks in the collection of registered metric definitions for the specified Id key.  If it
            is not found, the output is set to null and the method returns false.  If the Id key is found and resolves to an
            EventMetricDefinition, it is stored in the value output parameter and the method returns true.  If the Id key
            is found but is not an EventMetricDefinition, an ArgumentException is thrown to signal a usage inconsistency
            in your code.</remarks>
            <param name="id">The Id of the event metric definition to get.</param>
            <param name="value">The output variable to receive the EventMetricDefinition object if found (null if not).</param>
            <returns>False if no metric definition is registered with the given Id, true if an EventMetricDefinition is
            registered with the given Id, or throws an exception if the registered definition is not an EventMetricDefinition.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.TryGetValue(System.String,Gibraltar.Agent.Metrics.EventMetricDefinition@)">
            <summary>
            Retrieve an EventMetricDefinition by its combined three-part Key string, if present.
            </summary>
            <remarks>This method looks in the collection of registered metric definitions for the specified Id key.  If it
            is not found, the output is set to null and the method returns false.  If the Id key is found and resolves to an
            EventMetricDefinition, it is stored in the value output parameter and the method returns true.  If the Id key
            is found but is not an EventMetricDefinition, an ArgumentException is thrown to signal a usage inconsistency
            in your code.</remarks>
            <param name="key">The Key of the event metric definition to get (composed of the metrics system, category name,
            and counter name combined as a single string).</param>
            <param name="value">The output variable to receive the EventMetricDefinition object if found (null if not).</param>
            <returns>False if no metric definition is registered with the given Key, true if an EventMetricDefinition is
            registered with the given Key, or throws an exception if the registered definition is not an EventMetricDefinition.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.TryGetValue(System.String,System.String,System.String,Gibraltar.Agent.Metrics.EventMetricDefinition@)">
            <summary>
            Retrieve an EventMetricDefinition by its three key strings (metrics system, category name, and counter name), if present.
            </summary>
            <remarks>This method looks in the collection of registered metric definitions for the specified Id key.  If it
            is not found, the output is set to null and the method returns false.  If the Id key is found and resolves to an
            EventMetricDefinition, it is stored in the value output parameter and the method returns true.  If the Id key
            is found but is not an EventMetricDefinition, an ArgumentException is thrown to signal a usage inconsistency
            in your code.</remarks>
            <param name="metricsSystem">The metrics capture system label of the definition to look up.</param>
            <param name="categoryName">The name of the category with which the definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="value">The output variable to receive the EventMetricDefinition object if found (null if not).</param>
            <returns>False if no metric definition is registered with the given Key, true if an EventMetricDefinition is
            registered with the given Key, or throws an exception if the registered definition is not an EventMetricDefinition.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricDefinition.TryGetValue(System.Type,Gibraltar.Agent.Metrics.EventMetricDefinition@)">
            <summary>
            Find an existing event metric definition previously registered via EventMetric and EventMetricValue attributes on a specific Type.
            </summary>
            <remarks>This method overload can obtain a previously registered EventMetricDefinition created through
            EventMetric and EventMetricValue attributes, by specifying the Type containing those attributes.  If the
            specified Type does not have an EventMetric attribute defined, or if the Type has an EventMetric attribute but
            has not been registered (e.g. by a call to EventMetricDefinition.Register(userObjectType)), then false is
            returned (with out value set to null).  If an event metric defined by attributes on that Type has been
            successfully registered, then true is returned (with the registered EventMetricDefinition stored in the out
            value).  If the metric definition found by the 3-part Key used in the EventMetric attribute is not an event
            metric (e.g. a sampled metric definition was registered with that Key), then an ArgumentException is thrown to
            signal your programming mistake.  Inheritance and interfaces will <b>not</b> be searched, so the specified Type
            must directly define an event metric, but valid objects of a type assignable to the specified bound Type of
            this definition <b>can</b> be sampled from the specific event metric definition found.</remarks>
            <param name="metricDataObjectType">A specific Type with attributes defining an event metric.</param>
            <param name="value">The output variable to receive the EventMetricDefinition object if found (null if not).</param>
            <returns>False if no EventMetric attribute is found on the specified Type, or if no metric definition is
            registered with the 3-part Key found in that attribute, true if an EventMetricDefinition is registered with
            the given Key, or throws an exception if the registered definition found is not an EventMetricDefinition.</returns>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.EventMetricSample">
            <summary>
            One sample of a Event metric
            </summary>
            <remarks>Specific Event metrics will have a derived implementation of this class, however
            clients should work with this interface when feasible to ensure compatibility with any Event
            metric implementation.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricSample.#ctor(Gibraltar.Agent.Metrics.EventMetric,Gibraltar.Monitor.EventMetricSample)">
            <summary>
            Create a new API event metric sample object for the provided metric and internal event metric sample.
            </summary>
            <remarks>The metric sample is NOT? automatically added to the samples collection of the provided metric object.</remarks>
            <param name="metric">The metric object this sample applies to.</param>
            <param name="metricSample">The internal metric sample.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricSample.SetValue(System.String,System.Object)">
            <summary>
            Set a value in this sample by its value column name.  
            </summary>
            <remarks>The value must be defined as part of the event metric definition associated with this sample
            or an exception will be thrown.  The data type must also be compatible with the data type configured
            on the event metric definition or no data will be recorded.</remarks>
            <param name="name">The unique name of the value being recorded (must match a value name in the metric definition).</param>
            <param name="value">The value to be recorded.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricSample.SetValue(Gibraltar.Agent.Metrics.EventMetricValueDefinition,System.Object)">
            <summary>
            Records a value to the values array of this sample given its value definition.  
            </summary>
            <remarks>The value must be defined as part of the event metric definition associated with this sample
            or an exception will be thrown.  The data type must also be compatible with the data type configured
            on the event metric definition or no data will be recorded.
            If called more than once for the same value, the prior value will be replaced.</remarks>
            <param name="valueDefinition">The metric value definition object of the value to be recorded.</param>
            <param name="value">Optional. The value to be recorded.</param>
            <exception cref="T:System.ArgumentNullException">Throw if the valueDefinition is null.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricSample.SetValue(System.Int32,System.Object)">
            <summary>
            Records a value to the values array of this sample given the zero-based index of the value definition to be used.  
            </summary>
            <remarks>The value must be defined as part of the event metric definition associated with this sample
            or an exception will be thrown.  The data type must also be compatible with the data type configured
            on the event metric definition or no data will be recorded.
            If called more than once for the same value, the prior value will be replaced.</remarks>
            <param name="valueIndex">The zero-based index within the value definition of the value to be recorded.</param>
            <param name="value">Optional.  The value to be recorded.</param>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricSample.Metric">
            <summary>
            The Event metric this sample is for.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricSample.GetValue">
            <summary>
            The raw value of the metric.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricSample.GetValues">
            <summary>
            A copy of all of the values associated with this sample, as an array.  Any value in the array may be a null object.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricSample.CompareTo(Gibraltar.Agent.Metrics.EventMetricSample)">
            <summary>
            Compare this object to another to determine sort order
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricSample.Equals(Gibraltar.Agent.Metrics.EventMetricSample)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricSample.Write">
            <summary>
            Write this sample to the current process log if it hasn't been written already
            </summary>
            <remarks>If the sample has not been written to the log yet, it will be written.  
            If it has been written, subsequent calls to this method are ignored.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricSample.Equals(System.Object)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="obj">The object to compare this object to</param>
            <returns>True if the other object is also a MetricSample and represents the same data.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricSample.GetHashCode">
            <summary>
            Provides a representative hash code for objects of this type to spread out distribution
            in hash tables.
            </summary>
            <remarks>Objects which consider themselves to be Equal (a.Equals(b) returns true) are
            expected to have the same hash code.  Objects which are not Equal may have the same
            hash code, but minimizing such overlaps helps with efficient operation of hash tables.
            </remarks>
            <returns>
            An int representing the hash code calculated for the contents of this object.
            </returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricSample.WrappedSample">
            <summary>
            The internal event metric sample we're wrapping.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.EventMetricValueAttribute">
            <summary>
            Define a value column mapped from this field, property, or zero-argument method as part of the event metric definition.
            </summary>
            <remarks>By decorating a field, property, or zero-argument method with this attribute you can describe how it 
            should be recorded as a value column of an event metric.  The declaring type must also have the EventMetric
            attribute defined.  More than one EventMetricValue attribute may be applied to any field, property, or zero-argument
            method provided that each specifies a name unique within this event metric definition.  If not specified (or null),
            the name of the value column will be the name of the field, property, or method, and the default caption will be
            taken from the name of the value column.  The type will be the member's type (if a supported numeric type) or string
            for all other types (using ToString()).  A unit caption must be specified for each value column (or null for unit-less
            values), and a default summary function must be designated for the value column to describe how best to aggregate
            that column for graphing.  Non-numeric value types (all converted to strings) should use SummaryFunction.Count and
            use null for unit caption.  (Timespan, DateTime, and DateTimeOffset are also considered numeric types.)</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueAttribute.#ctor(System.String,Gibraltar.Agent.Metrics.SummaryFunction,System.String)">
            <summary>
            Add the current field, property, or method as a value column in the event metric using its declared Type and the specified name, unit caption and summary function.
            </summary>
            <param name="name">The unique name of this value column within the event.</param>
            <param name="summaryFunction">An aggregation summary to best interpret this value column for graphing. (use SummaryFunction.Count for non-math types)</param>
            <param name="unitCaption">A displayable caption for the units this value represents, or null for unit-less values.</param>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueAttribute.Name">
            <summary>
            The unique name of this value column within the defined event metric.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueAttribute.SetName(System.String)">
            <summary>
            Used internally to set the Name property after construction.
            </summary>
            <param name="name">The new value for the Name property.</param>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueAttribute.UnitCaption">
            <summary>
            An end-user display caption for the units of this value column of the event metric (or null for unit-less).
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueAttribute.SummaryFunction">
            <summary>
            The default way that individual samples will be aggregated to create a graphable summary.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueAttribute.SetSummaryFunction(Gibraltar.Agent.Metrics.SummaryFunction)">
            <summary>
            Set the default way that individual samples will be aggregated to create a graphable summary.
            </summary>
            <param name="summaryFunction">The new value for the SummaryFunction property.</param>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueAttribute.Caption">
            <summary>
            An end-user display caption for this value column of the event metric.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueAttribute.Description">
            <summary>
            An extended end-user description of this value column of the event metric.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueAttribute.IsDefaultValue">
            <summary>
            Indicates this field, property, or method is the default value to graph for the event metric.
            </summary>
            <remarks>The current object must also have the EventMetric attribute defined.  Only one field, property, or
            method in an object can have this value set true (it's false by default).  If no item on an object is marked 
            as the default, the number of events will be used as a default summary.</remarks>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.EventMetricValueDefinition">
            <summary>
            Defines one value that can be associated with an event metric, created via eventMetricDefinition.AddValue(...);
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueDefinition.#ctor(Gibraltar.Agent.Metrics.EventMetricDefinition,Gibraltar.Monitor.EventMetricValueDefinition)">
            <summary>
            Create a new API value definition from a provided API event metric definition and internal value definition.
            </summary>
            <param name="definition">The API event metric definition that owns this value definition</param>
            <param name="valueDefinition">The internal value definition to wrap.</param>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinition.SummaryFunction">
            <summary>
            The default way that individual samples will be aggregated to create a graphable summary.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinition.Definition">
            <summary>
            The metric definition this value is associated with.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinition.Name">
            <summary>
            The unique name for this value within the event definition.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinition.Caption">
            <summary>
            The end-user display caption for this value.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinition.Description">
            <summary>
            The end-user description for this value.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinition.Type">
            <summary>
            The simple type of all data recorded for this value.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinition.SerializedType">
            <summary>
            The simple type that all data recorded for this value will be serialized as.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinition.IsNumeric">
            <summary>
            Indicates whether this metric value column can be graphed by a mathematical summary (true), or only by count (false).
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinition.UnitCaption">
            <summary>
            The display caption for the units this value column represents (if numeric), or null for unit-less values (or non-numeric).
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueDefinition.Equals(Gibraltar.Agent.Metrics.EventMetricValueDefinition)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinition.Bound">
            <summary>
            Indicates whether the value is configured for automatic collection through binding
            </summary>
            <remarks>If true, the other binding-related properties are available.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinition.MemberType">
            <summary>
            The type of member that this value is bound to (field, property or method)
            </summary>
            <remarks>This property is only valid if Bound is true.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinition.MemberName">
            <summary>
            The name of the member that this value is bound to.
            </summary>
            <remarks>This property is only valid if Bound is true.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinition.WrappedValueDefinition">
            <summary>
            Conversion to the inner packet object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection">
            <summary>
            A collection of event values for the parent event metric definition.
            </summary>
            <remarks>This object is automatically created by the Event Metric Definition and is accessible through the Values property.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.#ctor(Gibraltar.Agent.Metrics.EventMetricDefinition)">
            <summary>
            Create a new values dictionary for the specified metric definition
            </summary>
            <param name="definition">The parent metric definition object that will own this dictionary.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.Add(System.String,System.Type)">
            <summary>
            Create a new value definition with the supplied name and type.  The name must be unique in this collection.
            </summary>
            <remarks>Internally, only simple type are supported.  Any non-numeric, non-DateTimeOffset type will be converted
            to a string using the default ToString capability when it is recorded.</remarks>
            <param name="name">The unique name for this value definition.</param>
            <param name="type">The simple type of this value.</param>
            <returns>The newly created value definition.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.Add(System.String,System.Type,Gibraltar.Agent.Metrics.SummaryFunction,System.String,System.String,System.String)">
            <summary>
            Create a new value definition with the supplied name and type.  The name must be unique in this collection.
            </summary>
            <remarks>Internally, only simple type are supported.  Any non-numeric, non-DateTimeOffset type will be converted
            to a string using the default ToString capability when it is recorded.</remarks>
            <param name="name">The unique name for this value definition.</param>
            <param name="type">The simple type of this value.</param>
            <param name="summaryFunction">The default way that individual samples of this value column can be aggregated
            to create a graphable summary. (Use SummaryFunction.Count for non-numeric types.)</param>
            <param name="unitCaption">A displayable caption for the units this value represents, or null for unit-less values.</param>
            <param name="caption">The end-user display caption for this value.</param>
            <param name="description">The end-user description for this value.</param>
            <returns>The newly created value definition.</returns>
            <exception cref="T:System.ArgumentNullException">The provided name or type are null.</exception>
            <exception cref="T:System.ArgumentException">There is already a definition with the provided name</exception>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.Definition">
            <summary>
            The metric definition this value is associated with.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="name">The value name to locate in the collection</param>
            <returns>True if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.TryGetValue(System.String,Gibraltar.Agent.Metrics.EventMetricValueDefinition@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="name">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.IndexOf(Gibraltar.Agent.Metrics.EventMetricValueDefinition)">
            <summary>
            Searches for the specified object and returns the zero-based index of it within the dictionary if it is found.
            </summary>
            <param name="item">The object to search for</param>
            <returns>The zero based index of the object within the dictionary or -1 if not found.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.Insert(System.Int32,Gibraltar.Agent.Metrics.EventMetricValueDefinition)">
            <summary>Inserting objects by index is not supported because the collection is sorted.</summary>
            <remarks>This method is implemented only for IList interface support and will throw an exception if called.</remarks>
             <exception cref="T:System.NotSupportedException">An attempt was made to set an object by index which is not supported.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.RemoveAt(System.Int32)">
            <summary>Removing objects by index is not supported.</summary>
            <remarks>This method is implemented only for IList interface support and will throw an exception if called.</remarks>
             <exception cref="T:System.NotSupportedException">An attempt was made to remove an object by index which is not supported.</exception>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.Item(System.Int32)">
            <summary>
            Retrieve the metric definition by numeric index in collection. 
            </summary>
            <param name="index"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">An attempt was made to set an object by index which is not supported.</exception>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.Item(System.String)">
            <summary>
            Retrieve metric object by its name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.Add(Gibraltar.Agent.Metrics.EventMetricValueDefinition)">
            <summary>
            Add an existing value definition item to this collection
            </summary>
            <param name="item">An existing value definition item associated with our metric definition</param>
            <exception cref="T:System.ArgumentNullException">The provided item was null.</exception>
            <exception cref="T:System.ArgumentException">The provided value definition item is not associated with our metric definition -or- 
            there is already a value definition with the same name as the provided item.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.Clear">
            <summary>
            Clearing objects is not supported.
            </summary>
            <remarks>This method is implemented only for ICollection interface support and will throw an exception if called.</remarks>
            <exception cref="T:System.InvalidOperationException">The definition has been committed and is now read-only</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.Contains(Gibraltar.Agent.Metrics.EventMetricValueDefinition)">
            <summary>
            Indicates whether the collection already contains the specified definition object
            </summary>
            <remarks>Even if the object doesn't exist in the collection, if another object with the same key exists then 
            an exception will be thrown if the supplied object is added to the collection.  See Add for more information.</remarks>
            <param name="item">The event metric value definition object to look for</param>
            <returns>True if the object already exists in the collection, false otherwise</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.CopyTo(Gibraltar.Agent.Metrics.EventMetricValueDefinition[],System.Int32)">
            <summary>
            Copy the current list of event metric value definitions into the provided array starting at the specified index.
            </summary>
            <remarks>The array must be large enough to handle the entire contents of this dictionary starting at the provided array index.</remarks>
            <param name="array">The array to copy into</param>
            <param name="arrayIndex">The index to start inserting at</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.ToArray">
            <summary>
            Copy the current list of event metric value definitions into a new array.
            </summary>
            <returns>A new array containing all of the event metric value definitions in this collection.</returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.Count">
            <summary>
            The number of items currently in the dictionary.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.IsReadOnly">
            <summary>
            Indicates if the dictionary is considered read only.  
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.EventMetricValueDefinitionCollection.Remove(Gibraltar.Agent.Metrics.EventMetricValueDefinition)">
            <summary>
            Removing objects is not supported.
            </summary>
            <remarks>This method is implemented only for ICollection interface support and will throw an exception if called.</remarks>
            <param name="item">The EventMetricValueDefinition item to remove.</param>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.Internal.IMetricDefinition">
            <summary>
            The definition of a single metric that has been captured.  
            </summary>
            <remarks>
            Individual metrics capture a stream of values for a metric definition which can then be displayed and manipulated.
            </remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.IMetricDefinition.Id">
            <summary>
            The unique Id of this metric definition packet.  This can reliably be used as a key to refer to this item, within the same session which created it.
            </summary>
            <remarks>The Id is limited to a specific session, and thus identifies a consistent unchanged definition. The
            Id can <b>not</b> be used to identify a definition across different sessions, which could have different
            actual definitions due to changing user code.  See the Key property to identify a metric definition across
            different sessions.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.IMetricDefinition.Key">
            <summary>
            The name of the metric definition being captured.  
            </summary>
            <remarks>The Key is the combination of metrics system label, category name, and counter name to uniquely
            identify a specific metric definition.  It can also identify the same definition across different sessions.
            They will have the same name but not the same Id.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.IMetricDefinition.Caption">
            <summary>
            A short display string for this metric definition, suitable for end-user display.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.IMetricDefinition.Description">
            <summary>
            A description of what is tracked by this metric, suitable for end-user display.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.IMetricDefinition.Interval">
            <summary>
            The recommended default display interval for graphing. 
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.IMetricDefinition.MetricsSystem">
            <summary>
            The metric capture system label under which this metric definition was created.
            </summary>
            <remarks>This label distinguish metrics defined and captured by different libraries from each other,
            ensuring that metrics defined by different development groups will fall under separate namespaces and not
            require category names to be globally unique across third party libraries linked by an application.
            Pick your own label which will uniquely identify your library or namespace.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.IMetricDefinition.CategoryName">
            <summary>
            The category of this metric for display purposes. This can be a period delimited string to represent a variable height hierarchy.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.IMetricDefinition.CounterName">
            <summary>
            The display name of this metric (unique within the category name).
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.IMetricDefinition.SampleType">
            <summary>
            The sample type of the metric.  Indicates whether the metric represents discrete events or a continuous value.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.IMetricDefinition.IsReadOnly">
            <summary>
            Indicates if the definition can still be changed or is read-only because an metric instance has been created from it.
            </summary>
            <remarks>If a metric definition is read-only, that means the definition can't be changed in a way that would invalidate
            metrics or metric samples recorded with it.  Display-only values (such as captions and descriptions) can always be changed,
            and new metrics can always be added to a metric definition.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.IMetricDefinition.WrappedDefinition">
            <summary>
            The internal definition it wraps.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection">
            <summary>
            A collection of metric definitions, keyed by their unique Id and Key.
            </summary>
            <remarks>
            A metric definition has a unique ID to identify a particular instance of the definition (associated with one session) 
            and a Key which is unique within a session but is designed for comparison of the same definition between sessions.
            </remarks>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.#ctor(Gibraltar.Monitor.MetricDefinitionCollection)">
            <summary>
            Create a new collection of API metric definitions wrapping a given internal collection.
            </summary>
            <param name="definitionCollection">An internal metric definition collection to wrap.</param>
        </member>
        <member name="E:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.CollectionChanged">
            <summary>
            Raised every time the collection's contents are changed to allow subscribers to automatically track changes.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.OnCollectionChanged(Gibraltar.Monitor.CollectionChangedEventArgs{Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection,Gibraltar.Agent.Metrics.Internal.IMetricDefinition})">
            <summary>
            This method is called every time a collection change event occurs to allow inheritors to override the change event.
            </summary>
            <remarks>If overridden, it is important to call this base implementation to actually fire the event.</remarks>
            <param name="e"></param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.SyncWrappedObject(Gibraltar.Monitor.MetricDefinitionCollection)">
            <summary>
            Ensures that the provided object is used as the wrapped object.
            </summary>
            <param name="summary"></param>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.Lock">
            <summary>
            Object Change Locking object.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.ContainsKey(System.Guid)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="id">The metric definition Id to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="name">The metric name to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The provided name was null.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.ContainsKey(System.String,System.String,System.String)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="metricsSystem">The metrics capture system label.</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.ContainsMetricKey(System.Guid)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="id">The metric instance Id to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.TryGetValue(System.Guid,Gibraltar.Agent.Metrics.Internal.IMetricDefinition@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="id">The metric definition Id of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.TryGetValue(System.String,Gibraltar.Agent.Metrics.Internal.IMetricDefinition@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="name">The metric name to locate in the collection</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The provided name was null.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.TryGetValue(System.String,System.String,System.String,Gibraltar.Agent.Metrics.Internal.IMetricDefinition@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="metricsSystem">The metrics capture system label.</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The provided metricsSystem, categoryName, or counterName was null.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.IndexOf(Gibraltar.Agent.Metrics.Internal.IMetricDefinition)">
            <summary>
            Searches for the specified value and returns the zero-based index of the first occurrence
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.Insert(System.Int32,Gibraltar.Agent.Metrics.Internal.IMetricDefinition)">
            <summary>Inserting objects by index is not supported because the collection is sorted.</summary>
            <remarks>This method is implemented only for IList interface support and will throw an exception if called.</remarks>
             <exception cref="T:System.NotSupportedException">An attempt was made to set an object by index which is not supported.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.RemoveAt(System.Int32)">
            <summary>Removing objects by index is not supported because the collection is always read only.</summary>
            <remarks>This method is implemented only for IList interface support and will throw an exception if called.</remarks>
             <exception cref="T:System.NotSupportedException">An attempt was made to remove an object by index which is not supported.</exception>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.Item(System.Int32)">
            <summary>
            Retrieve metric packet by numeric index in collection. 
            </summary>
            <param name="index"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">An attempt was made to set an object by index which is not supported.</exception>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.Item(System.Guid)">
            <summary>
            Retrieve metric definition object by its Id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.Item(System.String)">
            <summary>
            Retrieve metric definition object by its Key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.Item(System.String,System.String,System.String)">
            <summary>
            Retrieve metric definition object by its metrics system, category, and counter names.
            </summary>
            <param name="metricsSystem">The metrics capture system label.</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.Add(Gibraltar.Agent.Metrics.Internal.IMetricDefinition)">
            <summary>
            Add an existing IMetricDefinition item to this collection.
            </summary>
            <remarks>If the supplied MetricDefinitin item is already in the collection, an exception will be thrown.</remarks>
            <param name="item">The new IMetricDefinition item to add.</param>
            <exception cref="T:System.ArgumentNullException">The provided item was null</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.Clear">
            <summary>
            Clearing objects is not supported.
            </summary>
            <remarks>This method is implemented only for ICollection interface support and will throw an exception if called.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.Contains(Gibraltar.Agent.Metrics.Internal.IMetricDefinition)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <remarks>This method determines equality using the default equality comparer for the type of values in the list.  It performs
            a linear search and therefore is an O(n) operation.</remarks>
            <param name="item">The object to locate in the collection.</param>
            <returns>true if the item is found in the collection; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.CopyTo(Gibraltar.Agent.Metrics.Internal.IMetricDefinition[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <remarks>Elements are copied to the array in the same order in which the enumerator iterates them from the collection.  The provided array 
            must be large enough to contain the entire contents of this collection starting at the specified index.  This method is an O(n) operation.</remarks>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection.  The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.ToArray">
            <summary>
            Copy the entire collection of metric definitions into a new array.
            </summary>
            <returns>A new array containing all of the metric definitions in this collection.</returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.Count">
            <summary>
            The number of items currently in the collection
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.IsReadOnly">
            <summary>
            Indicates if the collection is read only and therefore can't have items added or removed.
            </summary>
            <remarks>This collection is never read-only, however removing items is not supported.
            This property is required for ICollection compatibility</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.MetricDefinitionCollection.Remove(Gibraltar.Agent.Metrics.Internal.IMetricDefinition)">
            <summary>
            Removing objects is not supported.
            </summary>
            <remarks>This method is implemented only for ICollection interface support and will throw an exception if called.</remarks>
            <param name="item">The IMetricDefinition item to remove.</param>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.Internal.SampledMetricCollection">
            <summary>
            The collection of custom sampled metrics for a given sampled metric definition.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.SampledMetricCollection.#ctor(Gibraltar.Agent.Metrics.SampledMetricDefinition)">
            <summary>
            Create a new custom sampled metric dictionary for the provided definition.
            </summary>
            <remarks>This dictionary is created automatically by the Custom Sampled Metric Definition during its initialization.</remarks>
            <param name="metricDefinition">The definition of the custom sampled metric to create a metric dictionary for</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.SampledMetricCollection.ContainsKey(System.Guid)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.SampledMetricCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key">The metric name to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.SampledMetricCollection.Add(System.String)">
            <summary>
            Create a new metric object with the provided instance name and add it to the collection
            </summary>
            <param name="instanceName">The instance name to use, or blank or null for the default metric.</param>
            <returns>The new metric object that was added to the collection</returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.SampledMetricCollection.Definition">
            <summary>
            The definition of all of the metrics in this collection.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.SampledMetricCollection.TryGetValue(System.Guid,Gibraltar.Agent.Metrics.SampledMetric@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.Internal.SampledMetricCollection.TryGetValue(System.String,Gibraltar.Agent.Metrics.SampledMetric@)">
            <summary>
            Retrieve an item from the collection by its key if present.  If not present, the default value of the object is returned.
            </summary>
            <param name="key">The metric name to locate in the collection</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise false.</returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.SampledMetricCollection.Item(System.Int32)">
            <summary>
            Retrieve the custom sampled metric by its zero-based index in collection. 
            </summary>
            <param name="index"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">An attempt was made to set an object by index which is not supported.</exception>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.SampledMetricCollection.Item(System.Guid)">
            <summary>
            Retrieve custom sampled metric object by its Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.SampledMetricCollection.Item(System.String)">
            <summary>
            Retrieve custom sampled metric object by its name
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.Internal.SampledMetricCollection.Lock">
            <summary>
            Object Change Locking object.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.SampledMetric">
            <summary>
            A single instance of a metric that is recorded by sampling its value on a
            periodic basis.
            </summary>
            <remarks>
            	<para>Sampled Metrics are designed to record a single, summarized value on a
                periodic basis. Whenever a sample is recorded, the value is presumed to remain
                constant until the next sample is recorded. This works best when the data for each
                individual event is either unavailable or would be to inefficient to collect. To do
                this, the application has to do some degree of calculation or aggregation on its
                own and the useful trends have to be determined during development.</para>
            	<para>Windows Performance Counters are collected as Sampled metrics. Processor
                Utilization represents a good example of a sampled metric - It would be infeasible
                to record each time the processor was used for a task, and the underlying data
                isn't available.</para>
            	<para>For more information on how to take advantage of Sampled Metrics, see
                <a href="Metrics_SampledMetricDesign.html">Developer's Reference - Metrics -
                Designing Sampled Metrics</a>.</para>
            	<para><strong>Event Metrics</strong></para>
            	<para>
                    An alternative to Sampled Metrics are Event Metrics. These offer more analysis
                    options and can be much easier to record, particularly in multithreaded or
                    stateless scenarios. For more information on the difference between Sampled and
                    Event Metrics, see <a href="Metrics_SampledEventMetrics.html">Developer's
                    Reference - Metrics - Sampled and Event Metrics</a>. For more information on
                    Event Metrics, see <see cref="T:Gibraltar.Agent.Metrics.EventMetric">EventMetric Class</see>.
                </para>
            	<para><strong>Viewing Metrics</strong></para>
            	<para>Metrics are visible in the <a href="Viewer_Session_Introduction.html">Session
                Viewer</a> of <a href="Viewer_Introduction.html">Loupe Desktop</a>. Metrics
                are not displayed in the Loupe Live Viewer.</para>
            </remarks>
            <seealso cref="!:Metrics_SampledMetricDesign.html" cat="Developer's Reference">Metrics - Designing Sampled Metrics</seealso>
            <seealso cref="!:Metrics_SampledEventMetrics.html" cat="Developer's Reference">Metrics - Sampled and Event Metrics</seealso>
            <example>
            	<code lang="CS" description="In this example we define a sampled metric entirely in code with each stage broken out. Note that the API for sampled metrics is designed to be multithread safe.">
            		<![CDATA[
            SampledMetricDefinition pageMetricDefinition;
             
            //since sampled metrics have only one value per metric, we have to create multiple metrics (one for every value)
            if (SampledMetricDefinition.TryGetValue("GibraltarSample", "Database.Engine", "Cache Pages", out pageMetricDefinition) == false)
            {
                //doesn't exist yet - add it in all of its glory.  This call is MT safe - we get back the object in cache even if registered on another thread.
                pageMetricDefinition = SampledMetricDefinition.Register("GibraltarSample", "Database.Engine", "cachePages", 
                        SamplingType.RawCount, "Pages", "Cache Pages", "The number of pages in the cache");
            }
             
            //now that we know we have the definitions, make sure we've defined the metric instances.
            SampledMetric pageMetric = SampledMetric.Register(pageMetricDefinition, null);
             
            //now go ahead and write those samples....
            pageMetric.WriteSample(pagesLoaded);]]>
            	</code>
            	<code lang="CS" description="Alternately, we can do it with very little code by taking advantage of the return values from each step in line. This method is functionally equivalent, and relies on the behavior of the Register call which will ignore duplicate registrations and return the already-registered instance.">
            		<![CDATA[
            //Alternately, it can be done in a single line of code each, although somewhat less readable.  
            //Note the WriteSample call after the Register call.
            SampledMetric.Register("GibraltarSample", "Database.Engine", "cachePages", SamplingType.RawCount, 
                "Pages", "Cache Pages", "The number of pages in the cache", null).WriteSample(pagesLoaded);]]>
            	</code>
            	<code lang="CS" title="Declarative Metrics" description="You can also declare metrics by decorating a data object and then sampling that object. This can create very compact, readable metric code and integrates well.">
            		<![CDATA[
            //by using an object with the appropriate attributes we can do it in 
            //one line - even though it writes multiple values.
            SampledMetric.Write(new CacheSampledMetric(pagesLoaded));
             
            //To use the above line, you have to define the following class:
             
            /// <summary>
            /// Log sampled metrics using a single object
            /// </summary>
            [SampledMetric("GibraltarSample", "Database.Engine")]
            public class CacheSampledMetric
            {
                public CacheSampledMetric(int pagesLoaded)
                {
                    Pages = pagesLoaded;
                    Size = pagesLoaded * 8192;
                }
             
                [SampledMetricValue("pages", SamplingType.RawCount, "Pages", Caption = "Pages in Cache", 
                    Description = "Total number of pages in cache")]
                public int Pages { get; private set; }
             
                [SampledMetricValue("size", SamplingType.RawCount, "Bytes", Caption = "Cache Size", 
                    Description = "Total number of bytes used by pages in cache")]
                public int Size { get; private set; }
            }]]>
            	</code>
            </example>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetric.#ctor(Gibraltar.Agent.Metrics.SampledMetricDefinition,System.String)">
            <summary>
            Create a new custom sampled metric object from the provided metric definition
            </summary>
            <remarks>The new metric will automatically be added to the metric definition's metrics collection.</remarks>
            <param name="definition">The metric definition for the metric instance</param>
            <param name="instanceName">The unique name of this instance within the metric's collection.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetric.#ctor(Gibraltar.Agent.Metrics.SampledMetricDefinition,Gibraltar.Monitor.CustomSampledMetric)">
            <summary>
            Create a new API custom sampled metric object from the provided API custom sampled metric definition and internal custom sampled metric.
            </summary>
            <remarks>The new metric will automatically be added to the metric definition's metrics collection.</remarks>
            <param name="definition">The API custom sampled metric definition for the metric instance.</param>
            <param name="metric">The internal custom sampled metric to wrap.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetric.RegisterAll(System.Object,System.String)">
            <summary>Registers all sampled metric definitions defined by attributes on the provided object or Type, and registers
            metric instances where SampledMetricInstanceName attribute is also found or a non-null fall-back is specified.</summary>
            <remarks><para>This call ensures that the time-consuming reflection scan of all members looking for attributes
            across the entire inheritance of an object instance or Type has been done (e.g. outside of a critical path)
            so that the first call to Write(userDataObject) will not have to do that work within a critical path.  Results
            are cached internally, so redundant calls to this method will not repeat the scan for types already scanned
            (including as part of a different top-level type).</para>
            <para>If a live object is given (not just a Type) then the member(s) bound as [SampledMetricInstanceName] will be
            queried and used to also register a sampled metric instance with the returned name, to save that step as well,
            although this step is much quicker.  If a Type is given instead of a live object, it can not be queried for
            instance name(s) and will only register the sampled metric definitions.  Metric instances will still be created
            as needed when sampling a userDataObject, automatically.</para>
            <para>If fallbackInstanceName is null, only instances which specify an instance name in the live object will
            be registered (and returned).  With a valid string for fall-back instance name (including string.Empty for the
            "default instance"), a sampled metric will be registered and returned (barring errors) for each definition
            found.  The instance indicated by the binding in the object will always be used by preference over the
            fall-back instance name parameter, even if the instance name member returns a null.</para></remarks>
            <param name="userDataObject">An object or Type defining sampled metrics via attributes on itself or on its base types or interfaces.</param>
            <param name="fallbackInstanceName">The instance name to fall back on if a definition does not specify an instance name binding (may be null).</param>
            <returns>And array of all sampled metric instances found or created (one per definition) based on the instance
            name binding and optional fallbackInstanceName.</returns>
            <exception cref="T:System.ArgumentNullException">The provided userDataObject was null.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetric.Register(System.Object)">
            <summary>
            Pre-registers all sampled metric definitions defined by attributes on the
            provided object or Type, and registers metric instances where SampledMetricInstanceName
            attribute is also found.
            </summary>
            <remarks>
            	<para>
                    This call ensures that the reflection scan of all members looking for
                    attributes across the entire inheritance of an object instance or Type has been
                    done (e.g. outside of a critical path) so that the first call to <see cref="M:Gibraltar.Agent.Metrics.SampledMetric.Write(System.Object)">Write</see> can be as fast as possible. Results are cached
                    internally, so redundant calls to this method will not repeat the scan for
                    types already scanned (including as part of a different top-level type).
                </para>
            	<para>
                    If a live object is given (not just a Type) then the member(s) decorated with a
                    <see cref="T:Gibraltar.Agent.Metrics.SampledMetricInstanceNameAttribute">SampledMetricInstanceNameAttribute
                    Class</see> will be queried and used to also register a sampled metric instance
                    with the returned name.
                </para>
            	<para>If a Type is given instead of a live object, it can't be queried for instance
                name(s) and will only register the sampled metric definitions. Metric instances
                will still be automatically created as needed when writing a
                metricDataObject.</para>
            </remarks>
            <example>
                For examples, see the <see cref="T:Gibraltar.Agent.Metrics.SampledMetric">Sampled Metric</see> class
                overview.
            </example>
            <param name="metricData">An object or Type defining sampled metrics via attributes on itself or on its base types or interfaces.</param>
            <exception cref="T:System.ArgumentNullException">The provided metricData object was null.</exception>
            <exception cref="T:System.ArgumentException">The specified Type does not have a SampledMetric attribute, so it can't be used to define sampled metrics.<br />
            - or -<br />
            The specified Type does not have a usable SampledMetric attribute, so it can't be used to define sampled metrics.<br />
            - or -<br />
            The specified Type's SampledMetric attribute has an empty metric namespace which is not allowed, so no metrics can be defined under it.<br />
            - or -<br />
            The specified Type's SampledMetric attribute has an empty metric category name which is not allowed, so no metrics can be defined under it.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetric.Register(System.String,System.String,System.String,Gibraltar.Agent.Metrics.SamplingType,System.String,System.String,System.String,System.String)">
            <summary>Creates a new metric instance from the provided definition information, or returns any existing instance if found.</summary>
            <remarks>
            	<para>This call is designed to be safe in multithreaded environments. If two
                threads attempt to register the same metric at the same time, the first will
                register the metric and the second (and all subsequent calls to Register with the
                same three part key) will return the same object.</para>
            	<para>If the Metric Definition doesn't exist, it will be created. If the Sampled
                Metric doesn't exist, it will be created.</para>
            	<para>If a metric definition does exist with the same 3-part Key but is not a
                sampled metric an exception will be thrown. This is one of the only times that an
                exception can be thrown by the Loupe Agent.</para>
            </remarks>
            <example>
                For examples, see the <see cref="T:Gibraltar.Agent.Metrics.SampledMetric">Sampled Metric</see> class
                overview.
            </example>
            <param name="metricsSystem">The metrics capture system label.</param>
            <param name="categoryName">The name of the category with which this metric is associated.</param>
            <param name="counterName">The name of the metric definition within the category.</param>
            <param name="samplingType">The sampling type of this sampled metric counter.</param>
            <param name="unitCaption">A displayable caption for the units this metric samples, or null for unit-less values.</param>
            <param name="metricCaption">A displayable caption for this sampled metric counter.</param>
            <param name="description">An extended end-user description of this sampled metric counter.</param>
            <param name="instanceName">The unique name of this instance within the metric's collection (may be null).</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetric.Register(Gibraltar.Agent.Metrics.SampledMetricDefinition,System.String)">
            <summary>
            Creates a new metric instance from the provided definition information, or
            returns any existing instance if found.
            </summary>
            <remarks>
            	<para>If the Sampled Metric doesn't exist, it will be created.</para>
            	<para>This call is designed to be safe in multithreaded environments. If two
                threads attempt to register the same metric at the same time, the first will
                register the metric and the second (and all subsequent calls to Register with the
                same three part key) will return the same object.</para>
            </remarks>
            <returns>The event metric object for the specified event metric instance.</returns>
            <example>
                For examples, see the <see cref="T:Gibraltar.Agent.Metrics.SampledMetric">Sampled Metric</see> class
                overview.
            </example>
            <param name="definition">The metric definition for the metric instance.</param>
            <param name="instanceName">The unique name of this instance within the metric's collection (may be null).</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetric.WriteSample(System.Double)">
            <summary>
            Write a metric sample with the provided data immediately, for non-fraction sampling types.
            </summary>
            <remarks>Sampled metrics using any fraction sampling type should instead use an overload providing both values.</remarks>
            <example>
                For examples, see the <see cref="T:Gibraltar.Agent.Metrics.SampledMetric">Sampled Metric</see> class
                overview.
            </example>
            <param name="rawValue">The raw data value.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetric.WriteSample(System.Double,System.DateTimeOffset)">
            <summary>
            Write a metric sample with the provided data immediately, for non-fraction sampling types.
            </summary>
            <remarks>Sampled metrics using any fraction sampling type should instead use an overload providing both values.</remarks>
            <example>
                For examples, see the <see cref="T:Gibraltar.Agent.Metrics.SampledMetric">Sampled Metric</see> class
                overview.
            </example>
            <param name="rawValue">The raw data value.</param>
            <param name="rawTimestamp">The exact date and time the raw value was determined.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetric.WriteSample(System.Double,System.Double)">
            <summary>
            Write a metric sample with the provided data immediately, for fraction sampling types.
            </summary>
            <remarks>Sampled metrics using a non-fraction sampling type should instead use an overload taking a single data values.</remarks>
            <example>
                For examples, see the <see cref="T:Gibraltar.Agent.Metrics.SampledMetric">Sampled Metric</see> class
                overview.
            </example>
            <param name="rawValue">The raw data value.</param>
            <param name="baseValue">The divisor entry of this sample.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetric.WriteSample(System.Double,System.Double,System.DateTimeOffset)">
            <summary>
            Write a metric sample with the provided data immediately, for fraction sampling types.
            </summary>
            <remarks>Sampled metrics using a non-fraction sampling type should instead use an overload taking a single data values.</remarks>
            <example>
                For examples, see the <see cref="T:Gibraltar.Agent.Metrics.SampledMetric">Sampled Metric</see> class
                overview.
            </example>
            <param name="rawValue">The raw data value.</param>
            <param name="baseValue">The divisor entry of this sample.</param>
            <param name="rawTimestamp">The exact date and time the raw value was determined.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetric.WriteSample(System.Object)">
            <summary>
            Write a sampled metric sample for this sampled metric instance using the provided data object.
            </summary>
            <remarks>The provided user data object must be assignable to the bound type which defined this sampled metric
            via attributes.</remarks>
            <example>
                For examples, see the <see cref="T:Gibraltar.Agent.Metrics.SampledMetric">Sampled Metric</see> class
                overview.
            </example>
            <param name="metricData">The object to retrieve metric values from.</param>
            <exception cref="T:System.ArgumentNullException">The provided metricData object was null.</exception>
            <exception cref="T:System.ArgumentException">This sampled metric's definition is not bound to sample automatically from a user data object.  WriteSample(...) must be given the data values directly.<br />-or-<br />
            The provided user data object type ({0}) is not assignable to this sampled metric's bound type ({1}) and can not be sampled automatically for this metric instance."></exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetric.Write(System.Object,System.String)">
            <summary>
            Write sampled metric samples for all sampled metrics defined on the provided data object by attributes.
            </summary>
            <remarks>The provided user data object must be assignable to the bound type which defined this sampled metric
            via attributes.</remarks>
            <example>
                For examples, see the <see cref="T:Gibraltar.Agent.Metrics.SampledMetric">Sampled Metric</see> class
                overview.
            </example>
            <param name="metricData">The object to retrieve both metric values and definition from</param>
            <param name="fallbackInstanceName">The instance name to fall back on if a definition does not specify an instance name binding (may be null).</param>
            <exception cref="T:System.ArgumentNullException">The provided metricData object was null.</exception>
            <exception cref="T:System.ArgumentException">The specified Type does not have a SampledMetric attribute, so it can't be used to define sampled metrics.<br />
            - or -<br />
            The specified Type does not have a usable SampledMetric attribute, so it can't be used to define sampled metrics.<br />
            - or -<br />
            The specified Type's SampledMetric attribute has an empty metric namespace which is not allowed, so no metrics can be defined under it.<br />
            - or -<br />
            The specified Type's SampledMetric attribute has an empty metric category name which is not allowed, so no metrics can be defined under it.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetric.Write(System.Object)">
            <summary>
            Write sampled metric samples for all sampled metrics defined on the provided data object by attributes.
            </summary>
            <remarks>The provided user data object must be assignable to the bound type which defined this sampled metric
            via attributes.</remarks>
            <example>
                For examples, see the <see cref="T:Gibraltar.Agent.Metrics.SampledMetric">Sampled Metric</see> class
                overview.
            </example>
            <param name="metricData">The object to retrieve both metric values and definition from</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetric.CompareTo(Gibraltar.Agent.Metrics.SampledMetric)">
            <summary>
            Compare this sampled metric to another sampled metric.
            </summary>
            <param name="other">The sampled metric to compare this sampled metric to.</param>
            <returns>A value which is less than, equal to, or greater than zero to represent the comparison result.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetric.Equals(Gibraltar.Agent.Metrics.SampledMetric)">
            <summary>
            Determines if the provided sampled metric is identical to this sampled metric.
            </summary>
            <param name="other">The sampled metric to compare this sampled metric to.</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetric.Definition">
            <summary>
            The definition of this sampled metric.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetric.Id">
            <summary>
            The unique Id of this sampled metric instance.  This can reliably be used as a key to refer to this item, within the same session which created it.
            </summary>
            <remarks>
                The Id is limited to a specific session, and thus identifies a consistent unchanged
                definition. The Id can <b>not</b> be used to identify a definition across different
                sessions, which could have different actual definitions due to changing user code.
                See the <see cref="P:Gibraltar.Agent.Metrics.SampledMetric.Key">Key</see> property to identify a metric definition across
                different sessions.
            </remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetric.Key">
            <summary>
            The four-part key of the metric instance being captured, as a single string.  
            </summary>
            <remarks>The Key is the combination of metrics capture system label, category name, and counter name of
            the metric definition, along with the instance name, to uniquely identify a specific metric instance of a
            specific metric definition.  It can also identify the same metric instance across different sessions.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetric.Caption">
            <summary>
            A short caption of what the metric tracks, suitable for end-user display.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetric.Description">
            <summary>
            A description of what is tracked by this metric, suitable for end-user display.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetric.MetricsSystem">
            <summary>
            The metrics capture system label of this metric definition.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetric.CategoryName">
            <summary>
            The category of this metric for display purposes. Displayed as a dot (.)
            delimited hierarchal display.
            </summary>
            <remarks>
            You can create arbitrarily deep categorization by using periods (.) to separate
            category levels. For example, the category "Database.Query.Search" will be parsed to
            create a three-level category {Database, Query, Search}. You can have spaces in the
            category name.
            </remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetric.CounterName">
            <summary>
            The display name of this metric (unique within the category name).
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetric.SamplingType">
            <summary>
            The intended method of interpreting the sampled counter value.
            </summary>
            <remarks>
            	<para>Depending on how your application can conveniently aggregate data, select the
                matching sampling type. For example, consider a metric designed to record disk
                utilization in bytes / second. This can be done by:</para>
            	<list type="number">
            		<item>
                        Recording with each sample the total number of bytes written from the start
                        of the process to the current point. This would use the Total Count
                        <see cref="P:Gibraltar.Agent.Metrics.SampledMetric.SamplingType">Sampling Type</see>.
                    </item>
            		<item>
                        Recording with each sample the number of bytes written since the last
                        sample. This would use the IncrementalCount <see cref="P:Gibraltar.Agent.Metrics.SampledMetric.SamplingType">Sampling Type</see>.
                    </item>
            		<item>
                        Recording with each sample the bytes per second since the last sample. This
                        would use the RawCount <see cref="P:Gibraltar.Agent.Metrics.SampledMetric.SamplingType">Sampling Type</see>.
                    </item>
            	</list>
            	<para><strong>Fraction Sampling Formats</strong></para>
            	<para>When you want to record a metric that represents a percentage, such as
                percent utilization, it's often easiest to record the individual metric samples
                with both parts of the fraction used to derive the percentage. For example,
                consider a metric designed to record percent disk utilization (as a percentage of
                working time). This can be done by:</para>
            	<list type="number">
            		<item>
                        Recording with each sample the total number of ticks spent writing to disk
                        as the value and the total number of ticks spent servicing requests as the
                        base value. This would use the TotalFraction <see cref="P:Gibraltar.Agent.Metrics.SampledMetric.SamplingType">Sampling Type</see>.
                    </item>
            		<item>
                        Recording with each sample the number of ticks spent writing to disk since
                        the last sample as the value and the number of ticks spent servicing client
                        requests since the last sample as the base value. This would use the
                        IncrementalFraction <see cref="P:Gibraltar.Agent.Metrics.SampledMetric.SamplingType">Sampling Type</see>.
                    </item>
            		<item>
                        Recording with each sample the number of ticks spent writing per second as
                        the value and the number of ticks spent servicing client requests per
                        second as the base value. This would use the RawFraction <see cref="P:Gibraltar.Agent.Metrics.SampledMetric.SamplingType">Sampling Type</see>.
                    </item>
            	</list>
            	<para>The advantage of the fractional sampling types over simply doing the division
                yourself is primarily the additional safety aspects built into Loupe (such as
                division by zero protection) and automatic, accurate extrapolation to different
                sampling intervals (such as when samples are recorded once per second but you want
                to view them on a longer interval)</para>
            </remarks>
            <seealso cref="P:Gibraltar.Agent.Metrics.SampledMetric.SamplingType">SamplingType Enumeration</seealso>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetric.UnitCaption">
            <summary>
            The display caption for the units this metric's values represent, or null for unit-less values.
            </summary>
            <remarks>
            	<para>Unit caption is used in the Analyst during charting and graphing to allow
                metrics that share the same units to be displayed on the same axis. Comparison is
                case insensitive, but otherwise done as a normal string compare.</para>
            	<para>Normally unit captions do not include aggregation text, such as Average, Min
                or Max to support the best axis grouping.</para>
            </remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetric.InstanceName">
            <summary>
            Gets the instance name for this sampled metric.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetric.IsDefault">
            <summary>
            Indicates whether this is the default metric instance for this metric definition or not.
            </summary>
            <remarks>The default instance has a null instance name.  This property is provided as a convenience to simplify
            client code so you don't have to distinguish empty strings or null.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetric.WrappedMetric">
            <summary>
            The internal custom sampled metric we're wrapping. 
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.SampledMetricAttribute">
            <summary>
            Describes shared parameters for sampled metrics defined on the current object.
            </summary>
            <remarks><para>An object (class, struct, or interface) can be decorated with this attribute to describe how to define
            a group of sampled metrics among its direct members.  Use the SampledMetricValue attribute on individual properties
            (etc) to complete the definition of various sampled metrics to be collected on this object.  Any number of sampled
            metrics may be defined among the direct members (properties, fields, and zero-argument methods) of this object,
            but they will all share the metrics system and category name declared in this attribute.  If sampling is performed
            for the entire group in one call, they will also share the same instance name (see SampledMetricInstanceName
            attribute and the instanceName argument of relevant API methods).  The sampled metrics can also be sampled
            separately (with independent instance names) through their individual definitions instead of as a group on a
            specific class, struct, or interface type.</para>
            <para>This attribute may be used on other classes, structs, and interfaces even with the same metric namespace
            and category name, but each use of the SampledMetricValue attribute to define individual sampled metrics must
            use a counter name unique within the particular namespace and category name across all uses of the SampledMetric
            attribute (or other sampled metric definitions through API calls).  Also, sampled metrics and event metrics may not
            overlap with the same counter name within a given namespace and category name.  When sampling a particular object's
            sampled metrics as a group, only those sampled metrics defined with a SampledMetricValue attribute within the
            specific enclosing type (marked with a SampledMetric attribute) will be seen as part of the group to sample, not
            sampled metrics defined under different enclosing types even with the same namespace and category name.</para>
            <para>As with event metrics, multiple sampled metric groups (allowing different category names and instance names)
            can be combined on an object by defining them on separate interfaces.  Such advanced tricks may require selection
            of a specific sampled metric group by type (e.g. by typeof a particular interface) in order to sample each possible
            sampled metric group as desired for that object.  Selection of a definition by a specific type may also be required
            when sampling an inheritor object, to ensure that all desired sampled metrics are found and sampled.</para></remarks>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricAttribute.#ctor(System.String,System.String)">
            <summary>
            Designate the target object as containing a group of sampled metrics sharing the specified namespace and category name.
            </summary>
            <param name="metricsSystem">The metrics capture system label the user has selected to distinguish all metrics they define, to avoid colliding with usage by other libraries.</param>
            <param name="metricCategoryName">A dot-delimited categorization for the metric under the metrics system.</param>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricAttribute.MetricsSystem">
            <summary>
            The metrics capture system label the user has selected to distinguish all metrics they define, to avoid colliding with usage by other libraries.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricAttribute.MetricCategoryName">
            <summary>
            A dot-delimited categorization for the metric under the particular metrics capture system.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.SampledMetricCategoryNameAttribute">
            <summary>
            Indicates which field, property, or method should be used to determine the category name for the sampled metric.
            </summary>
            <remarks>The current object must also have the SampledMetric attribute defined.  Only one field, property, or method in an object
            can have this attribute defined.  Whatever value is returned will be converted to a string to be the category name to the metric.
            If no item on an object has this attribute defined, the attribute value from the SampledMetric attribute will be used.</remarks>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.SampledMetricInstanceNameAttribute">
            <summary>
            Indicates which field, property, or method should be used to provide the instance name for the sampled metric.
            </summary>
            <remarks>The current object must also have the SampledMetric attribute defined.  Only one field, property, or method in an object
            can have this attribute defined.  Whatever value is returned will be converted to a string to uniquely identify the
            metric, or a null value will select the default instance.  If no item on an object has this attribute defined, the
            default instance will be used unless an instance name is specified when sampling.</remarks>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.SampledMetricDefinition">
            <summary>
            The definition of a user-defined sampled metric
            </summary>
            <remarks>Custom Sampled Metrics are the simplest form of Sampled Metrics, not requiring the developer
            to derive their own classes to encapsulate a sampled metric.  Review if this class can serve your needs before
            you create your own custom set of classes derived from SampledMetric (or derive from this class)</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.#ctor(System.String,System.String,System.String,Gibraltar.Agent.Metrics.SamplingType,System.String,System.String,System.String)">
            <summary>
            Create a new metric definition for the active log.
            </summary>
            <remarks>At any one time there should only be one metric definition with a given combination of 
            metric type, category, and counter name.  These values together are used to correlate metrics
            between sessions.  The metric definition will automatically be added to the provided collection.</remarks>
            <param name="metricsSystem">The metrics capture system label.</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="samplingType">The type of data captured for each metric under this definition.</param>
            <param name="unitCaption">A displayable caption for the units this metric's values represent, or null for unit-less values.</param>
            <param name="metricCaption">A displayable caption for this sampled metric counter.</param>
            <param name="description">A description of what is tracked by this metric, suitable for end-user display.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.#ctor(Gibraltar.Monitor.CustomSampledMetricDefinition)">
            <summary>
            Create a new API custom sampled metric object from the provided API metric definition collection and internal custom sampled metric definition.
            </summary>
            <remarks>The metric definition will automatically be added to the provided collection.</remarks>
            <param name="metricDefinition">The internal custom sampled metric definition to wrap.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.Register(System.String,System.String,System.String,Gibraltar.Agent.Metrics.SamplingType,System.String,System.String,System.String)">
            <summary>
            Find or create a sampled metric definition from the specified parameters.
            </summary>
            <param name="metricsSystem">The metrics capture system label.</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="samplingType">The sampling type of the sampled metric counter.</param>
            <param name="unitCaption">A displayable caption for the units this metric's values represent, or null for unit-less values.</param>
            <param name="metricCaption">A displayable caption for this sampled metric counter.</param>
            <param name="description">An extended end-user description of this sampled metric counter.</param>
            <remarks>If a metric definition does not already exist for the specified metrics system, category name, and
            counter name, a new sampled metric definition will be created from the provided parameters.  If one already
            exists then it will be checked for compatibility.  A sampled metric defined with the same SamplingType will
            be considered compatible, otherwise an ArgumentException will be thrown.  Each distinct metric definition (all
            sampled metrics and event metrics) must have a distinct Key (the metrics system, category, and counter name).
            Multiple metric instances can then be created (each with its own instance name) from the same metric definition.
            </remarks>
            <exception caption="" cref="T:System.ArgumentNullException">The provided metricsSystem, categoryName, or counterName was null.</exception>
            <exception caption="" cref="T:System.ArgumentException">There is already a metric definition for the same key, but it is not a sampled metric.&lt;br /&gt;-or-&lt;br /&gt;
            There is already a sampled metric definition for the same key but it uses an incompatible sampling type.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.RegisterAll(System.Object)">
            <summary>
            Find or create multiple sampled metrics definitions (defined via SampledMetric attributes) for the provided object or Type.
            </summary>
            <remarks>The provided Type or the GetType() of the provided object instance will be scanned for SampledMetric
            attributes on itself and any of its interfaces to identify a list of sampled metrics defined for instances of
            that type, creating them as necessary by scanning its members for SampledMetricValue attributes.  Inheritance
            will be followed into base types, along with all interfaces inherited to the top level.  This method will not
            throw exceptions, so a null argument will return an empty array, as will an argument which does not define any
            valid sampled metrics.  Also see AddOrGet() to find or create sampled metrics definitions for a specific
            Type, without digging into inheritance or interfaces of that Type.</remarks>
            <param name="userInstanceObject">A Type or an instance defining sampled metrics by attributes on itself and/or its interfaces and/or inherited types.</param>
            <returns>An array of zero or more sampled metric definitions found for the provided object or Type.</returns>
            <exception cref="T:System.ArgumentException">The specified Type does not have a SampledMetric attribute, so it can't be used to define sampled metrics.<br />
            - or -<br />
            The specified Type does not have a usable SampledMetric attribute, so it can't be used to define sampled metrics.<br />
            - or -<br />
            The specified Type's SampledMetric attribute has an empty metric namespace which is not allowed, so no metrics can be defined under it.<br />
            - or -<br />
            The specified Type's SampledMetric attribute has an empty metric category name which is not allowed, so no metrics can be defined under it.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.RegisterType(System.Type)">
            <summary>
            Find or create sampled metric definitions from SampledMetric and SampledMetricValue attributes on a specific Type.
            </summary>
            <remarks>The provided type must have a SampledMetric attribute and can have one or more fields, properties
            or zero-argument methods with SampledMetricValue attributes defined.  This method creates metric definitions
            but does not create specific metric instances, so it does not require a live object.  If the sampled metric
            definition already exists, it is just returned and no exception is thrown.  If the provided type is not suitable
            to create sampled metrics from because it is missing the appropriate attributes or the attributes have been
            miss-defined, an ArgumentException will be thrown.  Inheritance and interfaces will <b>not</b> be searched, so
            the provided Type must directly define sampled metrics, but valid objects of a type assignable to the specified
            bound Type of this definition <b>can</b> be sampled from these specific sampled metric definitions.  Also see
            AddOrGetDefinitions() to find and return all definitions in the inheritance chain of a type or object.</remarks>
            <param name="userObjectType">A specific Type with attributes defining a group of sampled metrics.</param>
            <returns>The group of sampled metric definitions (as an array) determined by attributes on the given Type.</returns>
            <exception cref="T:System.ArgumentNullException">The userObjectType was null</exception>
            <exception cref="T:System.ArgumentException">The specified Type does not have a SampledMetric attribute, so it can't be used to define sampled metrics.<br />
            - or -<br />
            The specified Type does not have a usable SampledMetric attribute, so it can't be used to define sampled metrics.<br />
            - or -<br />
            The specified Type's SampledMetric attribute has an empty metric namespace which is not allowed, so no metrics can be defined under it.<br />
            - or -<br />
            The specified Type's SampledMetric attribute has an empty metric category name which is not allowed, so no metrics can be defined under it.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.Register(System.Type,System.String)">
            <summary>
            Find or create a single sampled metric definition (by counter name) from SampledMetric and SampledMetricValue attributes on a specific Type.
            </summary>
            <remarks>The provided type must have a SampledMetric attribute and can have one or more fields, properties
            or zero-argument methods with SampledMetricValue attributes defined.  This method creates a metric definition
            but does not create a specific metric instance, so it does not require a live object.  If the sampled metric
            definition already exists, it is just returned and no exception is thrown.  If the provided type is not suitable
            to create an sampled metric from because it is missing the appropriate attribute or the attribute has been
            miss-defined, an ArgumentException will be thrown.  Inheritance and interfaces will <b>not</b> be searched, so
            the provided Type must directly define an sampled metric, but valid objects of a type assignable to the specified
            bound Type of this definition <b>can</b> be sampled from this specific sampled metric definition.  Also see
            AddOrGetDefinitions() to find and return an array of definitions.</remarks>
            <param name="userObjectType">A specific Type with attributes defining sampled metrics including the specified counter name.</param>
            <param name="counterName">The counterName of a specific sampled metric to find or create under the SampledMetric attribute on the specified Type.</param>
            <returns>The single sampled metric definition selected by counter name and determined by attributes on the given Type.</returns>
            <exception cref="T:System.ArgumentException">The specified Type does not have a SampledMetric attribute, so it can't be used to define sampled metrics.<br />
            - or -<br />
            The specified Type does not have a usable SampledMetric attribute, so it can't be used to define sampled metrics.<br />
            - or -<br />
            The specified Type's SampledMetric attribute has an empty metric namespace which is not allowed, so no metrics can be defined under it.<br />
            - or -<br />
            The specified Type's SampledMetric attribute has an empty metric category name which is not allowed, so no metrics can be defined under it.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.RegisterGroup(System.Type,System.String)">
            <summary>
            Find or create sampled metric definition from SampledMetric and SampledMetricValue attributes on a specific Type.
            </summary>
            <remarks>The provided type must have a SampledMetric attribute and can have one or more fields, properties
            or zero-argument methods with SampledMetricValue attributes defined.  This method creates a metric definition
            but does not create a specific metric instance, so it does not require a live object.  If the sampled metric
            definition already exists, it is just returned and no exception is thrown.  If the provided type is not suitable
            to create sampled metrics from because it is missing the appropriate attributes or the attributes have been
            miss-defined, an ArgumentException will be thrown.  Inheritance and interfaces will <b>not</b> be searched, so
            the provided Type must directly define an sampled metric, but valid objects of a type assignable to the specified
            bound Type of this definition <b>can</b> be sampled from these specific sampled metric definitions.</remarks>
            <param name="userObjectType">A specific Type with attributes defining an sampled metric.</param>
            <param name="counterName">The counterName of a specific sampled metric to find or create, string.Empty to return the entire group of sampled metric definitions unless there are errors, or null to swallow errors.</param>
            <returns>The single sampled metric definition determined by attributes on the given Type.</returns>
            <exception cref="T:System.ArgumentException">The specified Type does not have a SampledMetric attribute, so it can't be used to define sampled metrics.<br />
            - or -<br />
            The specified Type does not have a usable SampledMetric attribute, so it can't be used to define sampled metrics.<br />
            - or -<br />
            The specified Type's SampledMetric attribute has an empty metric namespace which is not allowed, so no metrics can be defined under it.<br />
            - or -<br />
            The specified Type's SampledMetric attribute has an empty metric category name which is not allowed, so no metrics can be defined under it.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.IsValidDataType(System.Type)">
            <summary>
            Checks the provided Type against the list of recognized numeric types and special types supported for SampledMetric data.
            </summary>
            <remarks>Sampled metrics require inherently numeric samples, so only data with a numeric Type or of a recognized
            Type which can be converted to a numeric value in a standard way can be sampled for a sampled metric counter.
            Supported numeric .NET types include: Double, Single, Decimal, Int64, UInt64, Int32, UInt32, Int16, and UInt16.
            The common time representation types: DateTime, DateTimeOffset, and TimeSpan are also supported by automatically
            taking their Ticks value.  All sampled metric data samples are converted to a Double (double-precision floating
            point) value when sampled.</remarks>
            <param name="userDataType">The typeof(SomeSpecificType) or dataValue.GetType() to check.</param>
            <returns>True if Loupe supports sampled metric data samples with that Type, otherwise false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.RequiresDivisor(Gibraltar.Agent.Metrics.SamplingType)">
            <summary>
            Checks the provided SamplingType enum value to determine if that sampling type requires two values per sample.
            </summary>
            <remarks>Sampled metrics sample either single values (*Count sampling types) or pairs of values (*Fraction
            sampling types), determined by their sampling type.  This method distinguishes between the two scenarios.
            The *Fraction sampling types record a numerator and a divisor for each sample, so when defining sampled
            metric counters with SampledMetric and SampledMetricValue attributes, these sampling types require a
            corresponding SampledMetricDivisor attribute for the same counter name.  The *Count sampling types
            only record a single value for each sample, so they do not need a divisor to be specified.</remarks>
            <param name="samplingType">A SamplingType enum value to check.</param>
            <returns>True if the given sampling type requires a second value for each sample as the divisor.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.GetTypeOfMember(System.Reflection.MemberInfo)">
            <summary>
            Determine the readable Type for a field, property, or method.
            </summary>
            <remarks>This method assumes that only MemberTypes of Field, Property, or Method will be given.  A method
            with void return type will return typeof(void), and properties with no get accessor will return null.
            This does not currently check method signature info for the zero-argument requirement.</remarks>
            <param name="member">The MemberInfo of a Field, Property, or Method member.</param>
            <returns>The Type of value which can be read from the field, property, or method.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.BindingMatchesMember(Gibraltar.NameValuePair{System.Reflection.MemberTypes},System.Reflection.MemberInfo)">
            <summary>
            Check that the specified binding matches the specified member, assuming the same declaring type.
            </summary>
            <param name="binding">A NameValuePair&lt;MemberTypes&gt; representing the name and member type binding to check.</param>
            <param name="member">The MemberInfo of the member to check against.</param>
            <returns>True if the binding matches the given member, false if the binding (or member) is null or does not match.</returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.SamplingType">
            <summary>
            The intended method of interpreting the sampled counter value.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.RequiresMultipleSamples">
            <summary>
            Indicates whether a final value can be determined from just one sample or if two comparable samples are required.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.IsBound">
            <summary>
            Indicates if this definition is configured to retrieve its information directly from an object.
            </summary>
            <remarks>When true, metric instances and samples can be generated from a live object of the same type that was used 
            to generate the data binding.  It isn't necessary that the same object be used, just that it be a compatible
            type to the original type used to establish the binding.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.BoundType">
            <summary>
            When bound, indicates the exact interface or object type that was bound.
            </summary>
            <remarks>When creating new metrics or metric samples, this data type must be provided in bound mode.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.CompareTo(Gibraltar.Agent.Metrics.SampledMetricDefinition)">
            <summary>
            Compare this custom sampled metric definition with another to determine if they are identical.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.Equals(Gibraltar.Agent.Metrics.SampledMetricDefinition)">
            <summary>
            Determines if the provided object is identical to this object.
            </summary>
            <param name="other">The object to compare this object to</param>
            <returns>True if the objects represent the same data.</returns>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.Metrics">
            <summary>
            The set of custom sampled metrics that use this definition.
            </summary>
            <remarks>All metrics with the same definition are of the same object type.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.WriteSample(System.String,System.Double)">
            <summary>
            Write a metric sample to the specified metric instance with the provided data, for non-fraction sampling types.
            </summary>
            <remarks>The specified metric instance is created if it does not already exist.</remarks>
            <param name="instanceName">The instance name to use, or null or empty for the default metric instance.</param>
            <param name="rawValue">The raw data value</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.WriteSample(System.String,System.Double,System.DateTimeOffset)">
            <summary>
            Write a metric sample to the specified metric instance with the provided data and recent timestamp, for non-fraction sampling types.
            </summary>
            <remarks>The specified metric instance is created if it does not already exist.</remarks>
            <param name="instanceName">The instance name to use, or null or empty for the default metric instance.</param>
            <param name="rawValue">The raw data value</param>
            <param name="rawTimestamp">The exact date and time the raw value was determined</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.WriteSample(System.String,System.Double,System.Double)">
            <summary>
            Write a metric sample to the specified metric instance with the provided data pair, for fraction sampling types.
            </summary>
            <remarks>The specified metric instance is created if it does not already exist.</remarks>
            <param name="instanceName">The instance name to use, or null or empty for the default metric instance.</param>
            <param name="rawValue">The raw data value</param>
            <param name="baseValue">The divisor entry of this sample.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.WriteSample(System.String,System.Double,System.Double,System.DateTimeOffset)">
            <summary>
            Write a metric sample to the specified metric instance with the provided data pair and recent timestamp, for fraction sampling types.
            </summary>
            <remarks>The specified metric instance is created if it does not already exist.</remarks>
            <param name="instanceName">The instance name to use, or null or empty for the default metric instance.</param>
            <param name="rawValue">The raw data value</param>
            <param name="rawTimestamp">The exact date and time the raw value was determined</param>
            <param name="baseValue">The divisor entry of this sample.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.WriteSample(System.String,System.Object)">
            <summary>
            Write a metric sample to the specified instance of this metric definition using the provided data object.
            </summary>
            <remarks>
            <para>This overload may only be used if this metric definition was created by SampledMetric and SampledMetricValue
            attributes on a particular Type (class, struct, or interface), and only for userDataObjects of a type assignable
            to that bound type for this definition.  Also see the static WriteAllSamples() method.</para>
            <para>The provided instanceName parameter will override any instance name binding set for this definition
            with a SampledMetricInstanceName attribute (this method overload ignores the instance name binding).  The
            specified metric instance is created if it does not already exist.  See the other overloads taking a
            userDataObject as the first parameter to use the bound member to determine a metric instance name
            from the user data object automatically, with an optional fall-back instance name.</para>
            </remarks>
            <param name="instanceName">The instance name to use, or null or empty for the default metric instance.</param>
            <param name="metricData">A data object to sample, compatible with the binding type of this definition.</param>
            <exception cref="T:System.ArgumentNullException">The provided metricData object is null</exception>
            <exception cref="T:System.ArgumentException">This sampled metric definition is not bound to sample automatically from a user data object.  
            A different overload must be used to specify the data value(s) directly.<br />
            - or -<br />
            The provided user data object type is not assignable to this sampled metric's bound type and can not be sampled automatically for this metric definition.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.WriteSample(System.Object,System.String)">
            <summary>
            Write a metric sample to an automatically-determined instance of this metric definition using the provided data object, with a fall-back instance name.
            </summary>
            <remarks>
            <para>This overload may only be used if this metric definition was created by SampledMetric and SampledMetricValue
            attributes on a particular Type (class, struct, or interface), and only for userDataObjects of a type assignable
            to that bound type for this definition.</para>
            <para>The metric instance name will be obtained from the member which was marked with the SampledMetricInstanceName
            attribute.  If none is bound, the instance name parameter will be used as a fall-back.  The determined metric
            instance will be created if it does not already exist.</para>
            </remarks>
            <param name="metricData">A data object to sample, compatible with the binding type of this definition.</param>
            <param name="fallbackInstanceName">The instance name to fall back on if this definition does not specify an instance name binding (may be null).</param>
            <exception cref="T:System.ArgumentNullException">The provided metricData object is null</exception>
            <exception cref="T:System.ArgumentException">This sampled metric definition is not bound to sample automatically from a user data object. 
            A different overload must be used to specify the data value(s) directly.<br />
            - or -<br />
            The provided user data object type is not assignable to this sampled metric's bound type and can not be sampled automatically for this metric definition.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.WriteSample(System.Object)">
            <summary>
            Write a metric sample to an automatically-determined instance of this metric definition using the provided data object.
            </summary>
            <remarks>
            <para>This overload may only be used if this metric definition was created by SampledMetric and SampledMetricValue
            attributes on a particular Type (class, struct, or interface), and only for userDataObjects of a type assignable
            to that bound type for this definition.</para>
            <para>The metric instance name will be obtained from the member which was marked with the SampledMetricInstanceName
            attribute.  If none is bound, the default instance will be used (a null instance name).  The determined metric
            instance will be created if it does not already exist.  See the overloads with an instanceName parameter to
            specify a particular metric instance name.</para>
            </remarks>
            <param name="metricData">A data object to sample, compatible with the binding type of this definition.</param>
            <exception cref="T:System.ArgumentNullException">The provided metricData object is null</exception>
            <exception cref="T:System.ArgumentException">This sampled metric definition is not bound to sample automatically from a user data object. 
            A different overload must be used to specify the data value(s) directly.<br />
            - or -<br />
            The provided user data object type is not assignable to this sampled metric's bound type and can not be sampled automatically for this metric definition.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.InvokeInstanceNameBinding(System.Object)">
            <summary>
            Use the instance name binding for this definition to query the instance name of a given user data object.
            </summary>
            <remarks>If not bound, this method returns null.</remarks>
            <param name="metricData">A live object instance (does not work on a Type).</param>
            <returns>The instance name determined by the binding query.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.Write(System.Object,System.String)">
            <summary>
            Sample every sampled metric defined by SampledMetric and SampledMetricValue attributes on the provided data object at any interface or inheritance level.
            </summary>
            <param name="metricData">A user data object defining sampled metrics by attributes on itself or its interfaces or any inherited type.</param>
            <param name="fallbackInstanceName">The instance name to fall back on if a given definition does not specify an instance name binding (may be null).</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.Write(System.Object)">
            <summary>
            Sample every sampled metric defined by SampledMetric and SampledMetricValue attributes on the provided data object at any interface or inheritance level.
            </summary>
            <param name="metricData">A user data object defining sampled metrics by attributes on itself or its interfaces or any inherited type.</param>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.SampledMetricTypeRequiresMultipleSamples(Gibraltar.Agent.Metrics.SamplingType)">
            <summary>
            Indicates whether two samples are required to calculate a metric value or not. 
            </summary>
            <remarks>
            Many sample types require multiple samples to determine an output value because they work with 
            the change between two points.
            </remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.NameBound">
            <summary>
            Indicates if there is a binding for metric instance name.
            </summary>
            <remarks>When true, the Name Member Name and Name Member Type properties are available.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.NameMemberName">
            <summary>
            The name of the member to invoke to determine the metric instance name.
            </summary>
            <remarks>This property is only valid when NameBound is true.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.NameMemberType">
            <summary>
            The type of the member to be invoked to determine the metric instance name (field, method, or property)
            </summary>
            <remarks>This property is only valid when NameBound is true.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.Lock">
            <summary>
            Get the lock object for this sampled metric definition.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.WrappedDefinition">
            <summary>
            The internal custom sampled metric definition we're wrapping. 
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.Gibraltar#Agent#Metrics#Internal#IMetricDefinition#WrappedDefinition">
            <summary>
            The internal metric definition this IMetricDefinition is wrapping.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.SetDataBinding(System.Reflection.MemberInfo)">
            <summary>
            Set the binding for the primary sampling data value (numerator);
            </summary>
            <param name="member">The MemberInfo of the member to bind to.</param>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.DataBinding">
            <summary>
            Contains a name-value pair of data member name and MemberType, or null if not bound.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.DataBound">
            <summary>
            Indicates whether the value is configured for automatic collection through binding.
            </summary>
            <remarks>If true, the other binding-related properties are available.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.DataMemberType">
            <summary>
            The type of member that this value is bound to (field, property or method).
            </summary>
            <remarks>This property is only valid if Bound is true.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.DataMemberName">
            <summary>
            The name of the member that this value is bound to.
            </summary>
            <remarks>This property is only valid if Bound is true.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.SetDivisorBinding(System.Reflection.MemberInfo)">
            <summary>
            Set the binding for the secondary sampling data value (divisor);
            </summary>
            <param name="member">The MemberInfo of the member to bind to.</param>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.DivisorBinding">
            <summary>
            Contains a name-value pair of divisor member name and MemberType, or null if not bound.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.DivisorBound">
            <summary>
            Indicates whether the divisor is configured for automatic collection through binding.
            </summary>
            <remarks>If true, the other binding-related properties are available.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.DivisorMemberType">
            <summary>
            The type of member that the divisor is bound to (field, property or method).
            </summary>
            <remarks>This property is only valid if Bound is true.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.DivisorMemberName">
            <summary>
            The name of the member that the divisor is bound to.
            </summary>
            <remarks>This property is only valid if Bound is true.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.Id">
            <summary>
            The unique Id of this sampled metric definition.  This can reliably be used as a key to refer to this item, within the same session which created it.
            </summary>
            <remarks>The Id is limited to a specific session, and thus identifies a consistent unchanged definition. The
            Id can <b>not</b> be used to identify a definition across different sessions, which could have different
            actual definitions due to changing user code.  See the Key property to identify a metric definition across
            different sessions.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.Key">
            <summary>
            The three-part key of the metric definition being captured, as a single string.  
            </summary>
            <remarks>The Key is the combination of metrics capture system label, category name, and counter name to uniquely
            identify a specific metric definition.  It can also identify the same definition across different sessions.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.Caption">
            <summary>
            A short display string for this metric definition, suitable for end-user display.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.Description">
            <summary>
            A description of what is tracked by this metric, suitable for end-user display.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.Interval">
            <summary>
            The recommended default display interval for graphing. 
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.UnitCaption">
            <summary>
            The display caption for the units this metric's values represent, or null for unit-less values.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.MetricsSystem">
            <summary>
            The metric capture system label under which this metric definition was created.
            </summary>
            <remarks>This label distinguishes metrics defined and captured by different libraries from each other,
            ensuring that metrics defined by different development groups will fall under separate namespaces and not
            require category names to be globally unique across third party libraries linked by an application.
            Pick your own label which will uniquely identify your library or namespace.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.CategoryName">
            <summary>
            The category of this metric for display purposes. This can be a period delimited string to represent a variable height hierarchy.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.CounterName">
            <summary>
            The display name of this metric (unique within the category name).
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.Gibraltar#Agent#Metrics#Internal#IMetricDefinition#SampleType">
            <summary>
            The sample type of the metric.  Indicates whether the metric represents discrete events or a continuous value.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDefinition.IsReadOnly">
            <summary>
            Indicates that this sampled metric definition has been registered and can not be altered (always true for sampled metric definitions).
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.ContainsKey(System.Guid)">
            <summary>
            Determines whether the collection of all metric definitions contains an element with the specified key.
            </summary>
            <param name="id">The metric definition Id to locate in the collection</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.ContainsKey(System.String)">
            <summary>
            Determines whether the collection of all metric definitions contains an element with the specified key.
            </summary>
            <param name="key">The Key of the event metric definition to check (composed of the metrics system, category name,
            and counter name combined as a single string).</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The provided key was null.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.ContainsKey(System.String,System.String,System.String)">
            <summary>
            Determines whether the collection of all metric definitions contains an element with the specified key.
            </summary>
            <param name="metricsSystem">The metrics capture system label.</param>
            <param name="categoryName">The name of the category with which this definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <returns>true if the collection contains an element with the key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The provided metricsSystem, categoryName, or counterName was null.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.TryGetValue(System.Guid,Gibraltar.Agent.Metrics.SampledMetricDefinition@)">
            <summary>
            Retrieve a SampledMetricDefinition by its Id, if present. (Throws an ArgumentException if the Id resolves to an EventMetricDefinition instead.)
            </summary>
            <remarks>This method looks in the collection of registered metric definitions for the specified Id key.  If it
            is not found, the output is set to null and the method returns false.  If the Id key is found and resolves to a
            SampledMetricDefinition, it is stored in the value output parameter and the method returns true.  If the Id key
            is found but is not a SampledMetricDefinition, an ArgumentException is thrown to signal a usage inconsistency
            in your code.</remarks>
            <param name="id">The Id of the sampled metric definition to get.</param>
            <param name="value">The output variable to receive the SampledMetricDefinition object if found (null if not).</param>
            <returns>False if no metric definition is registered with the given Id, true if a SampledMetricDefinition is
            registered with the given Id, or throws an exception if the registered definition is not a SampledMetricDefinition.</returns>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.TryGetValue(System.String,Gibraltar.Agent.Metrics.SampledMetricDefinition@)">
            <summary>
            Retrieve a SampledMetricDefinition by its combined three-part Key string, if present.
            </summary>
            <remarks>This method looks in the collection of registered metric definitions for the specified Key.  If it
            is not found, the output is set to null and the method returns false.  If the Id key is found and resolves to a
            SampledMetricDefinition, it is stored in the value output parameter and the method returns true.  If the Id key
            is found but is not a SampledMetricDefinition, an ArgumentException is thrown to signal a usage inconsistency
            in your code.</remarks>
            <param name="key">The Key of the sampled metric definition to get (composed of the metrics system, category name,
            and counter name combined as a single string).</param>
            <param name="value">The output variable to receive the SampledMetricDefinition object if found (null if not).</param>
            <returns>False if no metric definition is registered with the given Key, true if a SampledMetricDefinition is
            registered with the given Key, or throws an exception if the registered definition is not a SampledMetricDefinition.</returns>
            <exception cref="T:System.ArgumentNullException">The provided key was null.</exception>
            <exception cref="T:System.ArgumentException">The metric definition found for the specified key is not a sampled metric definition.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.TryGetValue(System.String,System.String,System.String,Gibraltar.Agent.Metrics.SampledMetricDefinition@)">
            <summary>
            Retrieve a SampledMetricDefinition by its three key strings (metrics system, category name, and counter name), if present.
            </summary>
            <remarks>This method looks in the collection of registered metric definitions for the specified 3-part key.  If it
            is not found, the output is set to null and the method returns false.  If the Id key is found and resolves to a
            SampledMetricDefinition, it is stored in the value output parameter and the method returns true.  If the Id key
            is found but is not a SampledMetricDefinition, an ArgumentException is thrown to signal a usage inconsistency
            in your code.</remarks>
            <param name="metricsSystem">The metrics capture system label of the definition to look up.</param>
            <param name="categoryName">The name of the category with which the definition is associated.</param>
            <param name="counterName">The name of the definition within the category.</param>
            <param name="value">The output variable to receive the SampledMetricDefinition object if found (null if not).</param>
            <returns>False if no metric definition is registered with the given Key, true if a SampledMetricDefinition is
            registered with the given Key, or throws an exception if the registered definition is not a SampledMetricDefinition.</returns>
            <exception cref="T:System.ArgumentNullException">The provided metricsSystem, categoryName, or counterName was null.</exception>
            <exception cref="T:System.ArgumentException">The metric definition found for the specified key is not a sampled metric definition.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDefinition.TryGetValue(System.Type,System.String,Gibraltar.Agent.Metrics.SampledMetricDefinition@)">
            <summary>
            Find an existing sampled metric definition previously registered via SampledMetric and SampledMetricValue attributes on a specific Type, by its counter name.
            </summary>
            <remarks>This method overload can obtain a previously registered SampledMetricDefinition created through
            SampledMetric and SampledMetricValue attributes, by specifying the Type containing those attributes.  If the
            specified Type does not have a SampledMetric attribute defined, or if the Type has a SampledMetric attribute
            but has not been registered (e.g. by a call to SampledMetricDefinition.Register(userObjectType)), then false is
            returned (with out value set to null).  If a sampled metric defined by attributes on that Type has been
            successfully registered, then true is returned (with the registered SampledMetricDefinition stored in the out
            value).  If the metric definition found by the 3-part Key used in the SampledMetric attribute (along with the
            specified counter name) is not a sampled
            metric (e.g. an event metric definition was registered with that Key), then an ArgumentException is thrown to
            signal your programming mistake.  Inheritance and interfaces will <b>not</b> be searched, so the specified Type
            must directly define the sampled metric, but valid objects of a type assignable to the specified bound Type of
            this definition <b>can</b> be sampled from the specific sampled metric definition found.</remarks>
            <param name="userObjectType">A specific Type with attributes defining one or more sampled metrics.</param>
            <param name="counterName">The counter name of the desired individual sampled metric definition defined by
            attributes on the specified Type.</param>
            <param name="value">The output variable to receive the SampledMetricDefinition object if found (null if not).</param>
            <returns>False if no SampledMetric attribute is found on the specified Type, or if no metric definition is
            registered with the 3-part Key found in that attribute (combined with the specified counter name),
            true if a SampledMetricDefinition is registered with
            the given Key, or throws an exception if the registered definition found is not a SampledMetricDefinition.</returns>
            <exception cref="T:System.ArgumentNullException">The userObjectType or counterName was null or empty.</exception>
            <exception cref="T:System.ArgumentException">The metric definition found for the specified key is not a sampled metric definition.</exception>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.SampledMetricValueAttribute">
            <summary>
            Define a specific sampled metric counter mapped from this field, property, or zero-argument method.
            </summary>
            <remarks>By decorating a field, property, or method with this attribute you can define how it should be recorded
            as a sampled metric.  The enclosing object must also have the SampledMetric attribute defined.  More than one
            SampledMetricValue attribute may be applied to any field, property, or zero-argument method, provided that each
            specifies a counter name unique within the metric namespace and category name specified in the SampledMetric
            attribute on the enclosing object.  If the counter name is not specified (or null), the name of the member is used
            as the counter name by default.  For sampling types requiring a divisor, use the SampledMetricDivisor
            attribute (specifying the same counter name as this sampled metric) to designate another field, property, or method
            to provide it.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricValueAttribute.#ctor(System.String,Gibraltar.Agent.Metrics.SamplingType,System.String)">
            <summary>
            Map the current field, property, or method to a sampled metric as its own name, with a specified sampling type and unit caption.
            </summary>
            <param name="counterName">The name of the metric counter to be defined under the metric category name.</param>
            <param name="samplingType">The sampling type of the sampled metric.</param>
            <param name="unitCaption">A displayable caption for the units this value represents, or null for unit-less values.</param>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricValueAttribute.CounterName">
            <summary>
            The name of the metric counter to be defined under the metric category name.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricValueAttribute.SetCounterName(System.String)">
            <summary>
            Used internally to set the CounterName property after construction (e.g. to correct a null).
            </summary>
            <param name="counterName">The new value for the CounterName property.</param>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricValueAttribute.SamplingType">
            <summary>
            The sampling type of the metric.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricValueAttribute.UnitCaption">
            <summary>
            A displayable caption for the units this value represents, or null for unit-less values.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricValueAttribute.Caption">
            <summary>
            A displayable caption for this sampled metric counter.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricValueAttribute.Description">
            <summary>
            An extended end-user description of this sampled metric counter.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.SampledMetricDivisorAttribute">
            <summary>
            Designate a field, property, or method to provide the divisor for a specified sampled metric counter.
            </summary>
            <remarks>The current object must also have the SampledMetric attribute defined, and must have a SampledMetricValue
            attribute defined for the same counter name as this attribute and defining a sampling type requiring a divisor,
            or this attribute is not meaningful.  This attribute may be defined multiple times (even on the same member), but
            only one SampledMetricDivisor attribute may be defined for the same sampled metric counter in the object.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Metrics.SampledMetricDivisorAttribute.#ctor(System.String)">
            <summary>
            Map the current field, property, or zero-argument method to provide the divisor for the sampled metric with the specified counter name.
            </summary>
            <param name="counterName">The name of a sampled metric with a sampling type requiring a divisor.</param>
        </member>
        <member name="P:Gibraltar.Agent.Metrics.SampledMetricDivisorAttribute.CounterName">
            <summary>
            The name of a sampled metric counter with a sampling type requiring a divisor to be provided by the target of this attribute.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.SamplingInterval">
            <summary>
            A suggested interval between value samples.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SamplingInterval.Default">
            <summary>
            Use the interval as the data was recorded.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SamplingInterval.Shortest">
            <summary>
            Use the interval as the data was recorded.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SamplingInterval.Millisecond">
            <summary>
            Use a sampling interval set in milliseconds
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SamplingInterval.Second">
            <summary>
            Use a sampling interval set in seconds.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SamplingInterval.Minute">
            <summary>
            Use a sampling interval set in minutes.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SamplingInterval.Hour">
            <summary>
            Use a sampling interval set in hours.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SamplingInterval.Day">
            <summary>
            Use a sampling interval set in days.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SamplingInterval.Week">
            <summary>
            Use a sampling interval set in weeks.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SamplingInterval.Month">
            <summary>
            Use a sampling interval set in months.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.SamplingType">
            <summary>
            Determines what the raw data for a given sampled metric is, and how it has to be processed to produce final data point values for display.
            </summary>
            <remarks>
            	<para>In many cases it is necessary to store raw facts that are translated into the
                final display value during the display process so that they work regardless of time
                resolution.</para>
            	<para>For example, to determine the percentage of processor time used for an
                activity, you need to know a time interval to look across (say per second, per
                hour, etc.), how many units of work were possible during that interval (time slices
                of the processor) and how many were used by the process. By specifying the
                TotalFraction type, the metric display system will automatically inspect the raw
                and baseline values then translate them into a percentage.</para>
            	<para>For more information on how to design sampled metrics including picking a
                Sampling Type, see <a href="Metrics_SampledMetricDesign.html">Developer's Reference
                - Metrics - Designing Sampled Metrics</a>.</para>
            	<para>This enumeration is conceptually similar to the Performance Counter Type
                enumeration provided by the runtime, but has been simplified for easier use.</para>
            </remarks>
            <seealso cref="!:Metrics_SampledMetricDesign.html" cat="Developer's Reference">Metrics - Designing Sampled Metrics</seealso>
            <seealso cref="T:Gibraltar.Agent.Metrics.SampledMetricDefinition" cat="Related Classes">SampledMetricDefinition Class</seealso>
            <seealso cref="T:Gibraltar.Agent.Metrics.SampledMetric" cat="Related Classes">SampledMetric Class</seealso>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SamplingType.RawCount">
            <summary>
            Each sample is the raw value for display as this data point.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SamplingType.RawFraction">
            <summary>
            Each sample has the raw numerator and denominator of a fraction for display as the value for this data point. 
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SamplingType.IncrementalCount">
            <summary>
            Each sample is the incremental change in the value for display as this data point.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SamplingType.IncrementalFraction">
            <summary>
            Each sample has the separate incremental changes to the numerator and denominator of the fraction for display as this data point.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SamplingType.TotalCount">
            <summary>
            Each sample is the cumulative total of display value data points.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SamplingType.TotalFraction">
            <summary>
            Each sample has the separate cumulative totals of the numerators and denominators of fraction value data points.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Metrics.SummaryFunction">
            <summary>
            Indicates the default way to interpret multiple values for display purposes
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SummaryFunction.Average">
            <summary>
            Average all of the values within each sample range to determine the displayed value.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SummaryFunction.Sum">
            <summary>
            Add all of the values within each sample range to determine the displayed value.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SummaryFunction.RunningAverage">
            <summary>
            An average of all values up through the end of the sample range.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SummaryFunction.RunningSum">
            <summary>
            The sum of all values up through the end of the sample range.
            </summary>
        </member>
        <member name="F:Gibraltar.Agent.Metrics.SummaryFunction.Count">
            <summary>
            The number of values within each sample range.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.Net.BasicAuthenticationProvider">
            <summary>
            Basic Authentication credentials for authenticating with the server
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Net.BasicAuthenticationProvider.#ctor(System.String,System.String)">
            <summary>
            Create a new instance of the HTTP Basic Authentication Provider with the specified username and password
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
        </member>
        <member name="P:Gibraltar.Agent.Net.BasicAuthenticationProvider.UserName">
            <summary>
            The user name to use for basic authentication
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Net.BasicAuthenticationProvider.Password">
            <summary>
            The password to use for basic authentication
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Net.BasicAuthenticationProvider.IsAuthenticated">
            <inheritdoc />
        </member>
        <member name="P:Gibraltar.Agent.Net.BasicAuthenticationProvider.LogoutIsSupported">
            <inheritdoc />
        </member>
        <member name="M:Gibraltar.Agent.Net.BasicAuthenticationProvider.Login(System.Uri,System.Net.Http.HttpClient)">
            <inheritdoc />
        </member>
        <member name="M:Gibraltar.Agent.Net.BasicAuthenticationProvider.Logout(System.Uri,System.Net.Http.HttpClient)">
            <inheritdoc />
        </member>
        <member name="M:Gibraltar.Agent.Net.BasicAuthenticationProvider.PreProcessRequest(System.Uri,System.Net.Http.HttpClient,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Gibraltar.Agent.Net.IServerAuthenticationProvider">
            <summary>
            Implemented to provide custom authentication for a web channel
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Net.IServerAuthenticationProvider.IsAuthenticated">
            <summary>
            Indicates if the authentication provider believes it has authenticated with the channel
            </summary>
            <remarks>If false then no logout will be attempted, and any request that requires authentication will
            cause a login attempt without waiting for an authentication failure.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.Net.IServerAuthenticationProvider.LogoutIsSupported">
            <summary>
            indicates if the authentication provider can perform a logout
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Net.IServerAuthenticationProvider.Login(System.Uri,System.Net.Http.HttpClient)">
            <summary>
            Perform a login on the supplied channel
            </summary>
            <param name="entryUri">The entry URL of the server</param>
            <param name="client">A web client object to use to perform login operations.</param>
        </member>
        <member name="M:Gibraltar.Agent.Net.IServerAuthenticationProvider.Logout(System.Uri,System.Net.Http.HttpClient)">
            <summary>
            Perform a logout on the supplied channel
            </summary>
            <param name="entryUri">The entry URL of the server</param>
            <param name="client">A web client object to use to perform logout operations.</param>
        </member>
        <member name="M:Gibraltar.Agent.Net.IServerAuthenticationProvider.PreProcessRequest(System.Uri,System.Net.Http.HttpClient,System.String,System.Boolean)">
            <summary>
            Perform per-request authentication processing.
            </summary>
            <param name="entryUri">The entry URL of the server</param>
            <param name="client">The web client that is about to be used to execute the request.  It can't be used by the authentication provider to make requests.</param>
            <param name="resourceUrl">The resource URL (with query string) specified by the client.</param>
            <param name="requestSupportsAuthentication">Indicates if the request being processed supports authentication or not.</param>
            <remarks>If the request doesn't support authentication, it's a best practice to not provide any authentication information.</remarks>
        </member>
        <member name="T:Gibraltar.Agent.Packager">
            <summary>
            Packages up session files collected on the local computer and sends them to a
            Loupe Server or anywhere via email or file transport with no user interface. For a
            user interface, see PackagerDialog.
            </summary>
            <remarks>
            	<para>
                    The packager class can be used to package up session files synchronously or
                    asynchronously and send them via email or just store the results to a single,
                    compact file without any user interface.
                </para>
            	<para>When creating a package of sessions, the packager needs to know:</para>
            	<list type="bullet">
            		<item>
            			<strong>What sessions to include:</strong> The <see cref="T:Loupe.Extensibility.Data.SessionCriteria">SessionCriteria</see> enumeration is used to indicate how
                        to select packages. It's a flag enumeration, allowing you to specify
                        multiple values at the same time.
                    </item>
            		<item><strong>What to do with the package:</strong> It can be emailed or stored
                    as a local file for you to subsequently handle on your own.</item>
            		<item><strong>Whether to mark sessions as read:</strong> Typically you'll want
                    to include sessions only on one package so that if a user generates a new
                    package later it won't contain sessions that have been completely sent before.
                    With this option set, Loupe will mark all of the sessions that it includes
                    in the package as long as the package is created successfully. If there is a
                    problem creating the package no sessions will be marked as sent.</item>
            	</list>
            	<para><strong>Asynchronous Usage</strong></para>
            	<para>
                    The packager can function asynchronously by using the methods that end with
                    Async. To get result information for asynchronous operations you need to
                    subscribe to the <see cref="E:Gibraltar.Agent.Packager.EndSend">EndSession</see> event.
                </para>
            	<para><strong>Sending the Active Session</strong></para>
            	<para>When you specify Session Criteria that includes the ActiveSession several
                unique things happen.</para>
            	<list type="bullet">
            		<item>To enable the session to be sent the current log file is ended and a new
                    one is started (just like if Log.EndFile was called).</item>
            		<item>The session will not be marked as read as it is still being changed.
                    Therefore, it can still be sent later after it closes when the complete session
                    will be available.</item>
            		<item>If the session has already been split into multiple files they will have
                    to be merged in memory first and then sent. Depending on the size of your
                    session data this may consume significant memory and processor time. As a
                    general rule of thumb it takes about 50 times the amount of memory as the
                    session file size because of the significant compression used when storing the
                    data.</item>
            	</list>
            	<para></para>
            </remarks>
            <example>
            	<code lang="CS" title="Create and Send Package Via Email" description="The following example sends all of the session files for the product the current application is running as to the email address specified in the application config file. Once packaged, sessions are marked as read and won't be automatically included in future packages.">
            //Send an email with all of the information about the current application we haven't sent before.
            using(Packager packager = new Packager())
            {
                packager.SendEmail(SessionCriteria.NewSessions, true, null);
            }
            </code>
            	<code lang="CS" title="Create and Send Package to File" description="The following example packages all of the session files for the product the current application is running as into a local file. Once packaged, sessions are marked as read and won't be automatically included in future packages.">
            		<![CDATA[
            //Send a file with all of the information about the current application we haven't sent before.
            using (Packager packager = new Packager())
            {
                //the file name will automatically have the appropriate extension added, so it is specified 
                //below without any file extension.  Typically you will want to generate a unique, temporary
                //file name to store the data as instead of using a fixed file name.
                packager.SendToFile(SessionCriteria.NewSessions, true, "C:\YourAppSessionData");
            }]]>
            	</code>
            </example>
        </member>
        <member name="E:Gibraltar.Agent.Packager.BeginSend">
            <summary>
            Raised at the start of the packaging and sending process (after all input is collected)
            </summary>
        </member>
        <member name="E:Gibraltar.Agent.Packager.EndSend">
            <summary>
            Raised at the end of the packaging and sending process with completion status information.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Packager.#ctor">
            <summary>
            Create a new packager for the current process.
            </summary>
            <example>
            	<code lang="CS" title="Create Package" description="Create a new package for the current process to send an email with all data available.">
            //Send an email with all of the information about the current application we haven't sent before.
            using(Packager packager = new Packager())
            {
                packager.SendEmail(SessionCriteria.AllSessions, true, null);
            }
            </code>
            </example>
            <remarks>Only sessions for the current product &amp; application will be considered</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Packager.#ctor(System.String)">
            <summary>
            Create a new packager for the specified product.
            </summary>
            <param name="productName">The product to package sessions for.</param>
            <remarks>All applications for the specified product will be considered.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Packager.#ctor(System.String,System.String)">
            <summary>
            Create a new packager for the specified product &amp; application.
            </summary>
            <param name="productName">The product to package sessions for.</param>
            <param name="applicationName"> Optional.  Restricts the packager to considering sessions for just this application within the specified product.</param>
            <remarks>If the application name is null then this will consider all applications for the specified product.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Packager.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new packager for the current process.
            </summary>
            <param name="productName">The product to package sessions for.</param>
            <param name="applicationName">Optional.  Restricts the packager to considering sessions for just this application within the specified product.</param>
            <param name="directory">Optional.  The log file directory on disk to look in for session files</param>
            <remarks>
            <para>If a repository folder is specified then only session files in that folder will be considered.</para>
            <para>If the application name is null then this will consider all applications for the specified product.</para>
            </remarks>
        </member>
        <member name="P:Gibraltar.Agent.Packager.ProductName">
            <summary>
            The product name of the current running application this packager was initialized with.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Packager.ApplicationName">
            <summary>
            The name of the current running application this packager was initialized with.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Packager.Caption">
            <summary>
            A caption for the resulting package
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.Packager.Description">
            <summary>
            A description for the resulting package.
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.Packager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gibraltar.Agent.Packager.SendToFile(Loupe.Extensibility.Data.SessionCriteria,System.Boolean,System.String)">
            <summary>
            Write the completed package to the provided full file name (without extension)
            and path. The extension will be set to glp automatically.
            </summary>
            <remarks>The EndSend event will be raised when the send operation completes.
            Any provided extension will be removed and replaced with the standard Loupe package extension.</remarks>
            <example>
            	<code lang="CS">
            		<![CDATA[
            //Send a file with all of the information about the current application we haven't sent before.
            using (Packager packager = new Packager())
            {
                //the file name will automatically have the appropriate extension added, so it is specified 
                //below without any file extension.  Typically you will want to generate a unique, temporary
                //file name to store the data as instead of using a fixed file name.
                packager.SendToFile(SessionCriteria.NewSessions, true, "C:\YourAppSessionData");
            }]]>
            	</code>
            </example>
            <param name="sessions">The set of match rules to apply to sessions to determine what to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="fullFileNamePath">The file name and path to write the final package to.</param>
            <exception cref="T:Gibraltar.GibraltarException">Thrown when generation or transmission fails, includes details on failure</exception>
            <exception cref="T:System.ArgumentNullException">A required parameter was null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided file information is not a fully qualified file name and path.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Packager.SendToFile(System.Predicate{Gibraltar.Agent.SessionSummary},System.Boolean,System.String)">
            <summary>
            Write the completed package to the provided full file name (without extension)
            and path. The extension will be set to glp automatically.
            </summary>
            <remarks>The EndSend event will be raised when the send operation completes.
            Any provided extension will be removed and replaced with the standard Loupe package extension.</remarks>
            <param name="sessionMatchPredicate">A delegate to evaluate sessions and determine which ones to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="fullFileNamePath">The file name and path to write the final package to.</param>
            <exception cref="T:Gibraltar.GibraltarException">Thrown when generation or transmission fails, includes details on failure</exception>
            <exception cref="T:System.ArgumentNullException">A required parameter was null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided file information is not a fully qualified file name and path.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Packager.SendToFileAsync(Loupe.Extensibility.Data.SessionCriteria,System.Boolean,System.String)">
            <summary>
            Asynchronously write the completed package to the provided full file name
            (without extension) and path. The extension will be set to glp automatically.
            </summary>
            <remarks>The EndSend event will be raised when the send operation completes.
            Any provided extension will be removed and replaced with the standard Loupe package extension.</remarks>
            <param name="sessions">The set of match rules to apply to sessions to determine what to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="fullFileNamePath">The file name and path to write the final package to.</param>
            <exception cref="T:System.ArgumentNullException">A required parameter was null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided file information is not a fully qualified file name and path.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Packager.SendToFileAsync(System.Predicate{Gibraltar.Agent.SessionSummary},System.Boolean,System.String)">
            <summary>
            Asynchronously write the completed package to the provided full file name
            (without extension) and path. The extension will be set to glp automatically.
            </summary>
            <remarks>The EndSend event will be raised when the send operation completes.
            Any provided extension will be removed and replaced with the standard Loupe package extension.</remarks>
            <param name="sessionMatchPredicate">A delegate to evaluate sessions and determine which ones to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="fullFileNamePath">The file name and path to write the final package to.</param>
            <exception cref="T:System.ArgumentNullException">A required parameter was null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The provided file information is not a fully qualified file name and path.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Packager.SendToServer(Loupe.Extensibility.Data.SessionCriteria,System.Boolean,Loupe.Configuration.ServerConfiguration)">
            <summary>Send sessions to a Loupe Server using the current agent configuration</summary>
            <remarks>The EndSend event will be raised when the send operation completes.  Because sessions are 
            sent one by one, they will be individually marked as read once sent.</remarks>
            <overloads>Send sessions to the Loupe Server</overloads>
            <param name="sessions">The set of match rules to apply to sessions to determine what to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="serverConfiguration">Optional.  The connection options to use instead of the current configured server connection</param>
            <exception cref="T:Gibraltar.GibraltarException">The server couldn't be contacted or there was a communication error.</exception>
            <exception cref="T:System.ArgumentException">The server configuration specified is invalid.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Packager.SendToServer(System.Predicate{Gibraltar.Agent.SessionSummary},System.Boolean,Loupe.Configuration.ServerConfiguration)">
            <summary>Send sessions to a Loupe Server using the current agent configuration</summary>
            <remarks>The EndSend event will be raised when the send operation completes.  Because sessions are 
            sent one by one, they will be individually marked as read once sent.</remarks>
            <overloads>Send sessions to the Loupe Server</overloads>
            <param name="sessionMatchPredicate">A delegate to evaluate sessions and determine which ones to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="serverConfiguration">Optional.  The connection options to use instead of the current configured server connection</param>
            <exception cref="T:Gibraltar.GibraltarException">The server couldn't be contacted or there was a communication error.</exception>
            <exception cref="T:System.ArgumentException">The server configuration specified is invalid.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Packager.SendToServer(Loupe.Extensibility.Data.SessionCriteria,System.Boolean,System.Boolean,Loupe.Configuration.ServerConfiguration)">
            <summary>Send sessions to a Loupe Server using the current agent configuration</summary>
            <remarks>The EndSend event will be raised when the send operation completes.  Because sessions are 
            sent one by one, they will be individually marked as read once sent.</remarks>
            <overloads>Send sessions to the Loupe Server</overloads>
            <param name="sessions">The set of match rules to apply to sessions to determine what to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="purgeSentSessions">True to have every included session removed from the local repository upon successful completion.</param>
            <param name="serverConfiguration">Optional.  The connection options to use instead of the current configured server connection</param>
            <exception cref="T:Gibraltar.GibraltarException">The server couldn't be contacted or there was a communication error.</exception>
            <exception cref="T:System.ArgumentException">The server configuration specified is invalid.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Packager.SendToServer(System.Predicate{Gibraltar.Agent.SessionSummary},System.Boolean,System.Boolean,Loupe.Configuration.ServerConfiguration)">
            <summary>Send sessions to a Loupe Server using the current agent configuration</summary>
            <remarks>The EndSend event will be raised when the send operation completes.  Because sessions are 
            sent one by one, they will be individually marked as read once sent.</remarks>
            <overloads>Send sessions to the Loupe Server</overloads>
            <param name="sessionMatchPredicate">A delegate to evaluate sessions and determine which ones to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="purgeSentSessions">True to have every included session removed from the local repository upon successful completion.</param>
            <param name="serverConfiguration">Optional.  The connection options to use instead of the current configured server connection</param>
            <exception cref="T:Gibraltar.GibraltarException">The server couldn't be contacted or there was a communication error.</exception>
            <exception cref="T:System.ArgumentException">The server configuration specified is invalid.</exception>
        </member>
        <member name="M:Gibraltar.Agent.Packager.SendToServerAsync(Loupe.Extensibility.Data.SessionCriteria,System.Boolean,Loupe.Configuration.ServerConfiguration)">
            <summary>
            Asynchronously send sessions to a Loupe Server using the current agent configuration
            </summary>
            <param name="sessions">The set of match rules to apply to sessions to determine what to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="serverConfiguration">Optional.  The connection options to use instead of the current configured server connection</param>
            <remarks>The EndSend event will be raised when the send operation completes.  Because sessions are 
            sent one by one, they will be individually marked as read once sent.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Packager.SendToServerAsync(System.Predicate{Gibraltar.Agent.SessionSummary},System.Boolean,Loupe.Configuration.ServerConfiguration)">
            <summary>
            Asynchronously send sessions to a Loupe Server using the current agent configuration
            </summary>
            <param name="sessionMatchPredicate">A delegate to evaluate sessions and determine which ones to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="serverConfiguration">Optional.  The connection options to use instead of the current configured server connection</param>
            <remarks>The EndSend event will be raised when the send operation completes.  Because sessions are 
            sent one by one, they will be individually marked as read once sent.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Packager.SendToServerAsync(Loupe.Extensibility.Data.SessionCriteria,System.Boolean,System.Boolean,Loupe.Configuration.ServerConfiguration)">
            <summary>
            Asynchronously send sessions to a Loupe Server using the current agent configuration
            </summary>
            <param name="sessions">The set of match rules to apply to sessions to determine what to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="purgeSentSessions">True to have every included session removed from the local repository upon successful completion.</param>
            <param name="serverConfiguration">Optional.  The connection options to use instead of the current configured server connection</param>
            <remarks>The EndSend event will be raised when the send operation completes.  Because sessions are 
            sent one by one, they will be individually marked as read once sent.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Packager.SendToServerAsync(System.Predicate{Gibraltar.Agent.SessionSummary},System.Boolean,System.Boolean,Loupe.Configuration.ServerConfiguration)">
            <summary>
            Asynchronously send sessions to a Loupe Server using the current agent configuration
            </summary>
            <param name="sessionMatchPredicate">A delegate to evaluate sessions and determine which ones to send.</param>
            <param name="markAsRead">True to have every included session marked as read upon successful completion.</param>
            <param name="purgeSentSessions">True to have every included session removed from the local repository upon successful completion.</param>
            <param name="serverConfiguration">Optional.  The connection options to use instead of the current configured server connection</param>
            <remarks>The EndSend event will be raised when the send operation completes.  Because sessions are 
            sent one by one, they will be individually marked as read once sent.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Packager.Dispose(System.Boolean)">
            <summary>
            Performs the actual releasing of managed and unmanaged resources.
            </summary>
            <remarks>
            Most usage should instead call Dispose(), which will call Dispose(true) for you
            and will suppress redundant finalization.</remarks>
            <param name="releaseManaged">Indicates whether to release managed resources.
            This should only be called with true, except from the finalizer which should call Dispose(false).</param>
        </member>
        <member name="M:Gibraltar.Agent.Packager.OnBeginSend">
            <summary>
            Called to raise the BeginSend event at the start of the packaging and sending process (after all input is collected)
            </summary>
            <remarks>If overriding this method, be sure to call Base.OnBeginSend to ensure that the event is still raised to its caller.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.Packager.OnEndSend(Gibraltar.Agent.PackageSendEventArgs)">
            <summary>
            Called to raise the EndSend event at the end of the packaging and sending process with completion status information.
            </summary>
            <remarks>If overriding this method, be sure to call Base.OnBeginSend to ensure that the event is still raised to its caller.</remarks>
        </member>
        <member name="T:Gibraltar.Agent.PackageSendEventHandler">
            <summary>
            Used to provide information on the status of a package send.
            </summary>
            <param name="sender">The packager object raising the event</param>
            <param name="e">The information on the package send event</param>
        </member>
        <member name="T:Gibraltar.Agent.PackageSendEventArgs">
            <summary>
            Information about the Package Send Events.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.PackageSendEventArgs.Result">
            <summary>
            The final status of the task.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.PackageSendEventArgs.Message">
            <summary>
            Optional.  An end-user display message to complement the result.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.PackageSendEventArgs.Exception">
            <summary>
            Optional.  An exception object to allow custom interpretation of an exception.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.PackageSendEventArgs.FileSize">
            <summary>
            The number of bytes in the package, if sent successfully.
            </summary>
        </member>
        <member name="T:Gibraltar.Agent.SessionSummary">
            <summary>Summary information about the current session.</summary>
            <remarks>
            	<para>The session summary includes all of the information that is available to Loupe
            to categorize the session. This includes the product,
                application, and version information that was detected by Loupe (or overridden
                in the application configuration) as well as a range of information about the
                current computing environment (such as Operating System Family and process
                architecture).</para>
            	<para>This information can be referenced at any time by your application.</para>
            </remarks>
        </member>
        <member name="M:Gibraltar.Agent.SessionSummary.#ctor(Gibraltar.Monitor.SessionSummary)">
            <summary>
            Create a new session summary as the live collection session for the current process
            </summary>
            <remarks>This constructor figures out all of the summary information when invoked, which can take a moment.</remarks>
        </member>
        <member name="M:Gibraltar.Agent.SessionSummary.#ctor(Loupe.Extensibility.Data.ISessionSummary)">
            <summary>
            Create a new session summary as the live collection session for the current process
            </summary>
            <remarks>This constructor figures out all of the summary information when invoked, which can take a moment.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.Id">
            <summary>
            The unique Id of the session
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.TimeZoneCaption">
            <summary>
            The display caption of the time zone where the session was recorded
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.StartDateTime">
            <summary>
            The date and time the session started
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.EndDateTime">
            <summary>
            The date and time the session ended or was last confirmed running
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.Duration">
            <summary>
            The time range between the start and end of this session..
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.Caption">
            <summary>
            A display caption for the session
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.Product">
            <summary>
            The product name of the application that recorded the session.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.Application">
            <summary>
            The title of the application that recorded the session.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.Environment">
            <summary>
            Optional.  The environment this session is running in.
            </summary>
            <remarks>Environments are useful for categorizing sessions, for example to 
            indicate the hosting environment. If a value is provided it will be 
            carried with the session data to upstream servers and clients.  If the 
            corresponding entry does not exist it will be automatically created.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.PromotionLevel">
            <summary>
            Optional.  The promotion level of the session.
            </summary>
            <remarks>Promotion levels are useful for categorizing sessions, for example to 
            indicate whether it was run in development, staging, or production. 
            If a value is provided it will be carried with the session data to upstream servers and clients.  
            If the corresponding entry does not exist it will be automatically created.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.ApplicationType">
            <summary>
            The type of process the application ran as.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.ApplicationDescription">
            <summary>
            The description of the application from its manifest.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.ApplicationVersion">
            <summary>
            The version of the application that recorded the session
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.AgentVersion">
            <summary>
            The version of the Loupe Agent used to monitor the session
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.HostName">
            <summary>
            The host name / NetBIOS name of the computer that recorded the session
            </summary>
            <remarks>Does not include the domain name portion of the fully qualified DNS name.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.DnsDomainName">
            <summary>
            The DNS domain name of the computer that recorded the session.  May be empty.
            </summary>
            <remarks>Does not include the host name portion of the fully qualified DNS name.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.FullyQualifiedUserName">
            <summary>
            The fully qualified user name of the user the application was run as.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.UserName">
            <summary>
            The user Id that was used to run the session
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.UserDomainName">
            <summary>
            The domain of the user id that was used to run the session
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.OSVersion">
            <summary>
            The version information of the installed operating system (without service pack or patches)
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.OSServicePack">
            <summary>
            The operating system service pack, if any.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.OSCultureName">
            <summary>
            The culture name of the underlying operating system installation
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.OSArchitecture">
            <summary>
            The processor architecture of the operating system.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.OSBootMode">
            <summary>
            The boot mode of the operating system.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.OSPlatformCode">
            <summary>
            The OS Platform code, nearly always 1 indicating Windows NT
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.OSProductType">
            <summary>
            The OS product type code, used to differentiate specific editions of various operating systems.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.OSSuiteMask">
            <summary>
            The OS Suite Mask, used to differentiate specific editions of various operating systems.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.OSFamilyName">
            <summary>
            The well known operating system family name, like Windows Vista or Windows Server 2003.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.OSEditionName">
            <summary>
            The edition of the operating system without the family name, such as Workstation or Standard Server.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.OSFullName">
            <summary>
            The well known OS name and edition name
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.OSFullNameWithServicePack">
            <summary>
            The well known OS name, edition name, and service pack like Windows XP Professional Service Pack 3
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.RuntimeVersion">
            <summary>
            The version of the .NET runtime that the application domain is running as.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.RuntimeArchitecture">
            <summary>
            The processor architecture the process is running as.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.CurrentCultureName">
            <summary>
            The current application culture name.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.CurrentUICultureName">
            <summary>
            The current user interface culture name.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.MemoryMB">
            <summary>
            The number of megabytes of installed memory in the host computer.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.Processors">
            <summary>
            The number of physical processor sockets in the host computer.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.ProcessorCores">
            <summary>
            The total number of processor cores in the host computer.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.UserInteractive">
            <summary>
            Indicates if the session was run in a user interactive mode.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.TerminalServer">
            <summary>
            Indicates if the session was run through terminal server.  Only applies to User Interactive sessions.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.ScreenWidth">
            <summary>
            The number of pixels wide of the virtual desktop.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.ScreenHeight">
            <summary>
            The number of pixels tall for the virtual desktop.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.ColorDepth">
            <summary>
            The number of bits of color depth.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.CommandLine">
            <summary>
            The complete command line used to execute the process including arguments.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.Status">
            <summary>
            The final status of the session.
            </summary>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.MessageCount">
            <summary>
            The number of messages in the messages collection.
            </summary>
            <remarks>This value is cached for high performance and reflects all of the known messages.  If only part
            of the files for a session are loaded, the totals as of the latest file loaded are used.  This means the
            count of items may exceed the actual number of matching messages in the messages collection if earlier
            files are missing.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.CriticalCount">
            <summary>
            The number of critical messages in the messages collection.
            </summary>
            <remarks>This value is cached for high performance and reflects all of the known messages.  If only part
            of the files for a session are loaded, the totals as of the latest file loaded are used.  This means the
            count of items may exceed the actual number of matching messages in the messages collection if earlier
            files are missing.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.ErrorCount">
            <summary>
            The number of error messages in the messages collection.
            </summary>
            <remarks>This value is cached for high performance and reflects all of the known messages.  If only part
            of the files for a session are loaded, the totals as of the latest file loaded are used.  This means the
            count of items may exceed the actual number of matching messages in the messages collection if earlier
            files are missing.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.WarningCount">
            <summary>
            The number of warning messages in the messages collection.
            </summary>
            <remarks>This value is cached for high performance and reflects all of the known messages.  If only part
            of the files for a session are loaded, the totals as of the latest file loaded are used.  This means the
            count of items may exceed the actual number of matching messages in the messages collection if earlier
            files are missing.</remarks>
        </member>
        <member name="P:Gibraltar.Agent.SessionSummary.Properties">
            <summary>
            A copy of the collection of application specific properties. (Set via configuration at logging startup.  Do not modify here.)
            </summary>
        </member>
        <member name="M:Gibraltar.Agent.SessionSummary.SyncWrappedObject(Gibraltar.Monitor.SessionSummary)">
            <summary>
            Ensures that the provided object is used as the wrapped object.
            </summary>
            <param name="summary"></param>
        </member>
    </members>
</doc>
